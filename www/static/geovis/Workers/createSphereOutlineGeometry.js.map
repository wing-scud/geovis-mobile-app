{"version":3,"file":"createSphereOutlineGeometry.js","sources":["../../../../Source/Core/SphereOutlineGeometry.js","../../../../Source/WorkersES6/createSphereOutlineGeometry.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport EllipsoidOutlineGeometry from './EllipsoidOutlineGeometry.js';\r\n\r\n    /**\r\n     * A description of the outline of a sphere.\r\n     *\r\n     * @alias SphereOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Number} [options.radius=1.0] The radius of the sphere.\r\n     * @param {Number} [options.stackPartitions=10] The count of stacks for the sphere (1 greater than the number of parallel lines).\r\n     * @param {Number} [options.slicePartitions=8] The count of slices for the sphere (Equal to the number of radial lines).\r\n     * @param {Number} [options.subdivisions=200] The number of points per line, determining the granularity of the curvature .\r\n     *\r\n     * @exception {DeveloperError} options.stackPartitions must be greater than or equal to one.\r\n     * @exception {DeveloperError} options.slicePartitions must be greater than or equal to zero.\r\n     * @exception {DeveloperError} options.subdivisions must be greater than or equal to zero.\r\n     *\r\n     * @example\r\n     * var sphere = new Cesium.SphereOutlineGeometry({\r\n     *   radius : 100.0,\r\n     *   stackPartitions : 6,\r\n     *   slicePartitions: 5\r\n     * });\r\n     * var geometry = Cesium.SphereOutlineGeometry.createGeometry(sphere);\r\n     */\r\n    function SphereOutlineGeometry(options) {\r\n        var radius = defaultValue(options.radius, 1.0);\r\n        var radii = new Cartesian3(radius, radius, radius);\r\n        var ellipsoidOptions = {\r\n                radii: radii,\r\n                stackPartitions: options.stackPartitions,\r\n                slicePartitions: options.slicePartitions,\r\n                subdivisions: options.subdivisions\r\n        };\r\n\r\n        this._ellipsoidGeometry = new EllipsoidOutlineGeometry(ellipsoidOptions);\r\n        this._workerName = 'createSphereOutlineGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    SphereOutlineGeometry.packedLength = EllipsoidOutlineGeometry.packedLength;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {SphereOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    SphereOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        //>>includeEnd('debug');\r\n\r\n        return EllipsoidOutlineGeometry.pack(value._ellipsoidGeometry, array, startingIndex);\r\n    };\r\n\r\n    var scratchEllipsoidGeometry = new EllipsoidOutlineGeometry();\r\n    var scratchOptions = {\r\n        radius : undefined,\r\n        radii : new Cartesian3(),\r\n        stackPartitions : undefined,\r\n        slicePartitions : undefined,\r\n        subdivisions : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {SphereOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {SphereOutlineGeometry} The modified result parameter or a new SphereOutlineGeometry instance if one was not provided.\r\n     */\r\n    SphereOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        var ellipsoidGeometry = EllipsoidOutlineGeometry.unpack(array, startingIndex, scratchEllipsoidGeometry);\r\n        scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\r\n        scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\r\n        scratchOptions.subdivisions = ellipsoidGeometry._subdivisions;\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.radius = ellipsoidGeometry._radii.x;\r\n            return new SphereOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\r\n        result._ellipsoidGeometry = new EllipsoidOutlineGeometry(scratchOptions);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of an outline of a sphere, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {SphereOutlineGeometry} sphereGeometry A description of the sphere outline.\r\n     * @returns {Geometry} The computed vertices and indices.\r\n     */\r\n    SphereOutlineGeometry.createGeometry = function(sphereGeometry) {\r\n        return EllipsoidOutlineGeometry.createGeometry(sphereGeometry._ellipsoidGeometry);\r\n    };\r\nexport default SphereOutlineGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport SphereOutlineGeometry from '../Core/SphereOutlineGeometry.js';\r\n\r\n    function createSphereOutlineGeometry(sphereGeometry, offset) {\r\n        if (defined(offset)) {\r\n            sphereGeometry = SphereOutlineGeometry.unpack(sphereGeometry, offset);\r\n        }\r\n        return SphereOutlineGeometry.createGeometry(sphereGeometry);\r\n    }\r\nexport default createSphereOutlineGeometry;\r\n"],"names":["defaultValue","Cartesian3","EllipsoidOutlineGeometry","Check","defined"],"mappings":"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"}