{"version":3,"file":"createVerticesFromGoogleEarthEnterpriseBuffer.js","sources":["../../../../Source/WorkersES6/createVerticesFromGoogleEarthEnterpriseBuffer.js"],"sourcesContent":["import AxisAlignedBoundingBox from '../Core/AxisAlignedBoundingBox.js';\r\nimport BoundingSphere from '../Core/BoundingSphere.js';\r\nimport Cartesian2 from '../Core/Cartesian2.js';\r\nimport Cartesian3 from '../Core/Cartesian3.js';\r\nimport Cartographic from '../Core/Cartographic.js';\r\nimport defaultValue from '../Core/defaultValue.js';\r\nimport defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport EllipsoidalOccluder from '../Core/EllipsoidalOccluder.js';\r\nimport CesiumMath from '../Core/Math.js';\r\nimport Matrix4 from '../Core/Matrix4.js';\r\nimport OrientedBoundingBox from '../Core/OrientedBoundingBox.js';\r\nimport Rectangle from '../Core/Rectangle.js';\r\nimport RuntimeError from '../Core/RuntimeError.js';\r\nimport TerrainEncoding from '../Core/TerrainEncoding.js';\r\nimport Transforms from '../Core/Transforms.js';\r\nimport WebMercatorProjection from '../Core/WebMercatorProjection.js';\r\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\r\n\r\n    var sizeOfUint16 = Uint16Array.BYTES_PER_ELEMENT;\r\n    var sizeOfInt32 = Int32Array.BYTES_PER_ELEMENT;\r\n    var sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\r\n    var sizeOfFloat = Float32Array.BYTES_PER_ELEMENT;\r\n    var sizeOfDouble = Float64Array.BYTES_PER_ELEMENT;\r\n\r\n    function indexOfEpsilon(arr, elem, elemType) {\r\n        elemType = defaultValue(elemType, CesiumMath);\r\n        var count = arr.length;\r\n        for (var i = 0; i < count; ++i) {\r\n            if (elemType.equalsEpsilon(arr[i], elem, CesiumMath.EPSILON12)) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function createVerticesFromGoogleEarthEnterpriseBuffer(parameters, transferableObjects) {\r\n        parameters.ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\r\n        parameters.rectangle = Rectangle.clone(parameters.rectangle);\r\n\r\n        var statistics = processBuffer(parameters.buffer, parameters.relativeToCenter, parameters.ellipsoid,\r\n            parameters.rectangle, parameters.nativeRectangle, parameters.exaggeration, parameters.skirtHeight,\r\n            parameters.includeWebMercatorT, parameters.negativeAltitudeExponentBias, parameters.negativeElevationThreshold);\r\n        var vertices = statistics.vertices;\r\n        transferableObjects.push(vertices.buffer);\r\n        var indices = statistics.indices;\r\n        transferableObjects.push(indices.buffer);\r\n\r\n        return {\r\n            vertices : vertices.buffer,\r\n            indices : indices.buffer,\r\n            numberOfAttributes : statistics.encoding.getStride(),\r\n            minimumHeight : statistics.minimumHeight,\r\n            maximumHeight : statistics.maximumHeight,\r\n            boundingSphere3D : statistics.boundingSphere3D,\r\n            orientedBoundingBox : statistics.orientedBoundingBox,\r\n            occludeePointInScaledSpace : statistics.occludeePointInScaledSpace,\r\n            encoding : statistics.encoding,\r\n            vertexCountWithoutSkirts : statistics.vertexCountWithoutSkirts,\r\n            indexCountWithoutSkirts : statistics.indexCountWithoutSkirts,\r\n            westIndicesSouthToNorth : statistics.westIndicesSouthToNorth,\r\n            southIndicesEastToWest : statistics.southIndicesEastToWest,\r\n            eastIndicesNorthToSouth : statistics.eastIndicesNorthToSouth,\r\n            northIndicesWestToEast : statistics.northIndicesWestToEast\r\n        };\r\n    }\r\n\r\n    var scratchCartographic = new Cartographic();\r\n    var scratchCartesian = new Cartesian3();\r\n    var minimumScratch = new Cartesian3();\r\n    var maximumScratch = new Cartesian3();\r\n    var matrix4Scratch = new Matrix4();\r\n\r\n    function processBuffer(buffer, relativeToCenter, ellipsoid, rectangle, nativeRectangle, exaggeration, skirtHeight, includeWebMercatorT, negativeAltitudeExponentBias, negativeElevationThreshold) {\r\n        var geographicWest;\r\n        var geographicSouth;\r\n        var geographicEast;\r\n        var geographicNorth;\r\n        var rectangleWidth, rectangleHeight;\r\n\r\n        if (!defined(rectangle)) {\r\n            geographicWest = CesiumMath.toRadians(nativeRectangle.west);\r\n            geographicSouth = CesiumMath.toRadians(nativeRectangle.south);\r\n            geographicEast = CesiumMath.toRadians(nativeRectangle.east);\r\n            geographicNorth = CesiumMath.toRadians(nativeRectangle.north);\r\n            rectangleWidth = CesiumMath.toRadians(rectangle.width);\r\n            rectangleHeight = CesiumMath.toRadians(rectangle.height);\r\n        } else {\r\n            geographicWest = rectangle.west;\r\n            geographicSouth = rectangle.south;\r\n            geographicEast = rectangle.east;\r\n            geographicNorth = rectangle.north;\r\n            rectangleWidth = rectangle.width;\r\n            rectangleHeight = rectangle.height;\r\n        }\r\n\r\n        // Keep track of quad borders so we can remove duplicates around the borders\r\n        var quadBorderLatitudes = [geographicSouth, geographicNorth];\r\n        var quadBorderLongitudes = [geographicWest, geographicEast];\r\n\r\n        var fromENU = Transforms.eastNorthUpToFixedFrame(relativeToCenter, ellipsoid);\r\n        var toENU = Matrix4.inverseTransformation(fromENU, matrix4Scratch);\r\n\r\n        var southMercatorY;\r\n        var oneOverMercatorHeight;\r\n        if (includeWebMercatorT) {\r\n            southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(geographicSouth);\r\n            oneOverMercatorHeight = 1.0 / (WebMercatorProjection.geodeticLatitudeToMercatorAngle(geographicNorth) - southMercatorY);\r\n        }\r\n\r\n        var dv = new DataView(buffer);\r\n\r\n        var minHeight = Number.POSITIVE_INFINITY;\r\n        var maxHeight = Number.NEGATIVE_INFINITY;\r\n\r\n        var minimum = minimumScratch;\r\n        minimum.x = Number.POSITIVE_INFINITY;\r\n        minimum.y = Number.POSITIVE_INFINITY;\r\n        minimum.z = Number.POSITIVE_INFINITY;\r\n\r\n        var maximum = maximumScratch;\r\n        maximum.x = Number.NEGATIVE_INFINITY;\r\n        maximum.y = Number.NEGATIVE_INFINITY;\r\n        maximum.z = Number.NEGATIVE_INFINITY;\r\n\r\n        // Compute sizes\r\n        var offset = 0;\r\n        var size = 0;\r\n        var indicesSize = 0;\r\n        var quadSize;\r\n        var quad;\r\n        for (quad = 0; quad < 4; ++quad) {\r\n            var o = offset;\r\n            quadSize = dv.getUint32(o, true);\r\n            o += sizeOfUint32;\r\n\r\n            var x = CesiumMath.toRadians(dv.getFloat64(o, true) * 180.0);\r\n            o += sizeOfDouble;\r\n            if (indexOfEpsilon(quadBorderLongitudes, x) === -1) {\r\n                quadBorderLongitudes.push(x);\r\n            }\r\n\r\n            var y = CesiumMath.toRadians(dv.getFloat64(o, true) * 180.0);\r\n            o += sizeOfDouble;\r\n            if (indexOfEpsilon(quadBorderLatitudes, y) === -1) {\r\n                quadBorderLatitudes.push(y);\r\n            }\r\n\r\n            o += 2 * sizeOfDouble; // stepX + stepY\r\n\r\n            var c = dv.getInt32(o, true); // Read point count\r\n            o += sizeOfInt32;\r\n            size += c;\r\n\r\n            c = dv.getInt32(o, true); // Read index count\r\n            indicesSize += c * 3;\r\n\r\n            offset += quadSize + sizeOfUint32; // Jump to next quad\r\n        }\r\n\r\n        // Quad Border points to remove duplicates\r\n        var quadBorderPoints = [];\r\n        var quadBorderIndices = [];\r\n\r\n        // Create arrays\r\n        var positions = new Array(size);\r\n        var uvs = new Array(size);\r\n        var heights = new Array(size);\r\n        var webMercatorTs = includeWebMercatorT ? new Array(size) : [];\r\n        var indices = new Array(indicesSize);\r\n\r\n        // Points are laid out in rows starting at SW, so storing border points as we\r\n        //  come across them all points will be adjacent.\r\n        var westBorder = [];\r\n        var southBorder = [];\r\n        var eastBorder = [];\r\n        var northBorder = [];\r\n\r\n        // Each tile is split into 4 parts\r\n        var pointOffset = 0;\r\n        var indicesOffset = 0;\r\n        offset = 0;\r\n        for (quad = 0; quad < 4; ++quad) {\r\n            quadSize = dv.getUint32(offset, true);\r\n            offset += sizeOfUint32;\r\n            var startQuad = offset;\r\n\r\n            var originX = CesiumMath.toRadians(dv.getFloat64(offset, true) * 180.0);\r\n            offset += sizeOfDouble;\r\n\r\n            var originY = CesiumMath.toRadians(dv.getFloat64(offset, true) * 180.0);\r\n            offset += sizeOfDouble;\r\n\r\n            var stepX = CesiumMath.toRadians(dv.getFloat64(offset, true) * 180.0);\r\n            var halfStepX = stepX * 0.5;\r\n            offset += sizeOfDouble;\r\n\r\n            var stepY = CesiumMath.toRadians(dv.getFloat64(offset, true) * 180.0);\r\n            var halfStepY = stepY * 0.5;\r\n            offset += sizeOfDouble;\r\n\r\n            var numPoints = dv.getInt32(offset, true);\r\n            offset += sizeOfInt32;\r\n\r\n            var numFaces = dv.getInt32(offset, true);\r\n            offset += sizeOfInt32;\r\n\r\n            //var level = dv.getInt32(offset, true);\r\n            offset += sizeOfInt32;\r\n\r\n            // Keep track of quad indices to overall tile indices\r\n            var indicesMapping = new Array(numPoints);\r\n            for (var i = 0; i < numPoints; ++i) {\r\n                var longitude = originX + dv.getUint8(offset++) * stepX;\r\n                scratchCartographic.longitude = longitude;\r\n                var latitude = originY + dv.getUint8(offset++) * stepY;\r\n                scratchCartographic.latitude = latitude;\r\n\r\n                var height = dv.getFloat32(offset, true);\r\n                offset += sizeOfFloat;\r\n\r\n                // In order to support old clients, negative altitude values are stored as\r\n                // height/-2^32. Old clients see the value as really close to 0 but new clients multiply\r\n                // by -2^32 to get the real negative altitude value.\r\n                if (height !== 0 && height < negativeElevationThreshold) {\r\n                    height *= -Math.pow(2, negativeAltitudeExponentBias);\r\n                }\r\n\r\n                // Height is stored in units of (1/EarthRadius) or (1/6371010.0)\r\n                height *= 6371010.0 * exaggeration;\r\n\r\n                scratchCartographic.height = height;\r\n\r\n                // Is it along a quad border - if so check if already exists and use that index\r\n                if (indexOfEpsilon(quadBorderLongitudes, longitude) !== -1 ||\r\n                    indexOfEpsilon(quadBorderLatitudes, latitude) !== -1) {\r\n                    var index = indexOfEpsilon(quadBorderPoints, scratchCartographic, Cartographic);\r\n                    if (index === -1) {\r\n                        quadBorderPoints.push(Cartographic.clone(scratchCartographic));\r\n                        quadBorderIndices.push(pointOffset);\r\n                    } else {\r\n                        indicesMapping[i] = quadBorderIndices[index];\r\n                        continue;\r\n                    }\r\n                }\r\n                indicesMapping[i] = pointOffset;\r\n\r\n                if (Math.abs(longitude - geographicWest) < halfStepX) {\r\n                    westBorder.push({\r\n                        index : pointOffset,\r\n                        cartographic : Cartographic.clone(scratchCartographic)\r\n                    });\r\n                } else if (Math.abs(longitude - geographicEast) < halfStepX) {\r\n                    eastBorder.push({\r\n                        index : pointOffset,\r\n                        cartographic : Cartographic.clone(scratchCartographic)\r\n                    });\r\n                } else if (Math.abs(latitude - geographicSouth) < halfStepY) {\r\n                    southBorder.push({\r\n                        index : pointOffset,\r\n                        cartographic : Cartographic.clone(scratchCartographic)\r\n                    });\r\n                } else if (Math.abs(latitude - geographicNorth) < halfStepY) {\r\n                    northBorder.push({\r\n                        index : pointOffset,\r\n                        cartographic : Cartographic.clone(scratchCartographic)\r\n                    });\r\n                }\r\n\r\n                minHeight = Math.min(height, minHeight);\r\n                maxHeight = Math.max(height, maxHeight);\r\n                heights[pointOffset] = height;\r\n\r\n                var pos = ellipsoid.cartographicToCartesian(scratchCartographic);\r\n                positions[pointOffset] = pos;\r\n\r\n                if (includeWebMercatorT) {\r\n                    webMercatorTs[pointOffset] = (WebMercatorProjection.geodeticLatitudeToMercatorAngle(latitude) - southMercatorY) * oneOverMercatorHeight;\r\n                }\r\n\r\n                Matrix4.multiplyByPoint(toENU, pos, scratchCartesian);\r\n\r\n                Cartesian3.minimumByComponent(scratchCartesian, minimum, minimum);\r\n                Cartesian3.maximumByComponent(scratchCartesian, maximum, maximum);\r\n\r\n                var u = (longitude - geographicWest) / (geographicEast - geographicWest);\r\n                u = CesiumMath.clamp(u, 0.0, 1.0);\r\n                var v = (latitude - geographicSouth) / (geographicNorth - geographicSouth);\r\n                v = CesiumMath.clamp(v, 0.0, 1.0);\r\n\r\n                uvs[pointOffset] = new Cartesian2(u, v);\r\n                ++pointOffset;\r\n            }\r\n\r\n            var facesElementCount = numFaces * 3;\r\n            for (var j = 0; j < facesElementCount; ++j, ++indicesOffset) {\r\n                indices[indicesOffset] = indicesMapping[dv.getUint16(offset, true)];\r\n                offset += sizeOfUint16;\r\n            }\r\n\r\n            if (quadSize !== (offset - startQuad)) {\r\n                throw new RuntimeError('Invalid terrain tile.');\r\n            }\r\n        }\r\n\r\n        positions.length = pointOffset;\r\n        uvs.length = pointOffset;\r\n        heights.length = pointOffset;\r\n        if (includeWebMercatorT) {\r\n            webMercatorTs.length = pointOffset;\r\n        }\r\n\r\n        var vertexCountWithoutSkirts = pointOffset;\r\n        var indexCountWithoutSkirts = indicesOffset;\r\n\r\n        // Add skirt points\r\n        var skirtOptions = {\r\n            hMin : minHeight,\r\n            lastBorderPoint : undefined,\r\n            skirtHeight : skirtHeight,\r\n            toENU : toENU,\r\n            ellipsoid : ellipsoid,\r\n            minimum : minimum,\r\n            maximum : maximum\r\n        };\r\n\r\n        // Sort counter clockwise from NW corner\r\n        // Corner points are in the east/west arrays\r\n        westBorder.sort(function(a, b) {\r\n            return b.cartographic.latitude - a.cartographic.latitude;\r\n        });\r\n        southBorder.sort(function(a, b) {\r\n            return a.cartographic.longitude - b.cartographic.longitude;\r\n        });\r\n        eastBorder.sort(function(a, b) {\r\n            return a.cartographic.latitude - b.cartographic.latitude;\r\n        });\r\n        northBorder.sort(function(a, b) {\r\n            return b.cartographic.longitude - a.cartographic.longitude;\r\n        });\r\n\r\n        var percentage = 0.00001;\r\n        addSkirt(positions, heights, uvs, webMercatorTs, indices, skirtOptions,\r\n            westBorder, -percentage * rectangleWidth, true, -percentage * rectangleHeight);\r\n        addSkirt(positions, heights, uvs, webMercatorTs, indices, skirtOptions,\r\n            southBorder, -percentage * rectangleHeight, false);\r\n        addSkirt(positions, heights, uvs, webMercatorTs, indices, skirtOptions,\r\n            eastBorder, percentage * rectangleWidth, true, percentage * rectangleHeight);\r\n        addSkirt(positions, heights, uvs, webMercatorTs, indices, skirtOptions,\r\n            northBorder, percentage * rectangleHeight, false);\r\n\r\n        // Since the corner between the north and west sides is in the west array, generate the last\r\n        //  two triangles between the last north vertex and the first west vertex\r\n        if (westBorder.length > 0 && northBorder.length > 0) {\r\n            var firstBorderIndex = westBorder[0].index;\r\n            var firstSkirtIndex = vertexCountWithoutSkirts;\r\n            var lastBorderIndex = northBorder[northBorder.length - 1].index;\r\n            var lastSkirtIndex = positions.length - 1;\r\n\r\n            indices.push(lastBorderIndex, lastSkirtIndex, firstSkirtIndex, firstSkirtIndex, firstBorderIndex, lastBorderIndex);\r\n        }\r\n\r\n        size = positions.length; // Get new size with skirt vertices\r\n\r\n        var boundingSphere3D = BoundingSphere.fromPoints(positions);\r\n        var orientedBoundingBox;\r\n        if (defined(rectangle)) {\r\n            orientedBoundingBox = OrientedBoundingBox.fromRectangle(rectangle, minHeight, maxHeight, ellipsoid);\r\n        }\r\n\r\n        var occluder = new EllipsoidalOccluder(ellipsoid);\r\n        var occludeePointInScaledSpace = occluder.computeHorizonCullingPointPossiblyUnderEllipsoid(relativeToCenter, positions, minHeight);\r\n\r\n        var aaBox = new AxisAlignedBoundingBox(minimum, maximum, relativeToCenter);\r\n        var encoding = new TerrainEncoding(aaBox, skirtOptions.hMin, maxHeight, fromENU, false, includeWebMercatorT);\r\n        var vertices = new Float32Array(size * encoding.getStride());\r\n\r\n        var bufferIndex = 0;\r\n        for (var k = 0; k < size; ++k) {\r\n            bufferIndex = encoding.encode(vertices, bufferIndex, positions[k], uvs[k], heights[k], undefined, webMercatorTs[k]);\r\n        }\r\n\r\n        var westIndicesSouthToNorth = westBorder.map(function(vertex) { return vertex.index; }).reverse();\r\n        var southIndicesEastToWest = southBorder.map(function(vertex) { return vertex.index; }).reverse();\r\n        var eastIndicesNorthToSouth = eastBorder.map(function(vertex) { return vertex.index; }).reverse();\r\n        var northIndicesWestToEast = northBorder.map(function(vertex) { return vertex.index; }).reverse();\r\n\r\n        southIndicesEastToWest.unshift(eastIndicesNorthToSouth[eastIndicesNorthToSouth.length - 1]);\r\n        southIndicesEastToWest.push(westIndicesSouthToNorth[0]);\r\n\r\n        northIndicesWestToEast.unshift(westIndicesSouthToNorth[westIndicesSouthToNorth.length - 1]);\r\n        northIndicesWestToEast.push(eastIndicesNorthToSouth[0]);\r\n\r\n        return {\r\n            vertices : vertices,\r\n            indices : new Uint16Array(indices),\r\n            maximumHeight : maxHeight,\r\n            minimumHeight : minHeight,\r\n            encoding : encoding,\r\n            boundingSphere3D : boundingSphere3D,\r\n            orientedBoundingBox : orientedBoundingBox,\r\n            occludeePointInScaledSpace : occludeePointInScaledSpace,\r\n            vertexCountWithoutSkirts : vertexCountWithoutSkirts,\r\n            indexCountWithoutSkirts : indexCountWithoutSkirts,\r\n            westIndicesSouthToNorth : westIndicesSouthToNorth,\r\n            southIndicesEastToWest : southIndicesEastToWest,\r\n            eastIndicesNorthToSouth : eastIndicesNorthToSouth,\r\n            northIndicesWestToEast : northIndicesWestToEast\r\n        };\r\n    }\r\n\r\n    function addSkirt(positions, heights, uvs, webMercatorTs, indices, skirtOptions,\r\n                      borderPoints, fudgeFactor, eastOrWest, cornerFudge) {\r\n        var count = borderPoints.length;\r\n        for (var j = 0; j < count; ++j) {\r\n            var borderPoint = borderPoints[j];\r\n            var borderCartographic = borderPoint.cartographic;\r\n            var borderIndex = borderPoint.index;\r\n            var currentIndex = positions.length;\r\n\r\n            var longitude = borderCartographic.longitude;\r\n            var latitude = borderCartographic.latitude;\r\n            latitude = CesiumMath.clamp(latitude, -CesiumMath.PI_OVER_TWO, CesiumMath.PI_OVER_TWO); // Don't go over the poles\r\n            var height = borderCartographic.height - skirtOptions.skirtHeight;\r\n            skirtOptions.hMin = Math.min(skirtOptions.hMin, height);\r\n\r\n            Cartographic.fromRadians(longitude, latitude, height, scratchCartographic);\r\n\r\n            // Adjust sides to angle out\r\n            if (eastOrWest) {\r\n                scratchCartographic.longitude += fudgeFactor;\r\n            }\r\n\r\n            // Adjust top or bottom to angle out\r\n            // Since corners are in the east/west arrays angle the first and last points as well\r\n            if (!eastOrWest) {\r\n                scratchCartographic.latitude += fudgeFactor;\r\n            } else if (j === (count - 1)) {\r\n                scratchCartographic.latitude += cornerFudge;\r\n            } else if (j === 0) {\r\n                scratchCartographic.latitude -= cornerFudge;\r\n            }\r\n\r\n            var pos = skirtOptions.ellipsoid.cartographicToCartesian(scratchCartographic);\r\n            positions.push(pos);\r\n            heights.push(height);\r\n            uvs.push(Cartesian2.clone(uvs[borderIndex])); // Copy UVs from border point\r\n            if (webMercatorTs.length > 0) {\r\n                webMercatorTs.push(webMercatorTs[borderIndex]);\r\n            }\r\n\r\n            Matrix4.multiplyByPoint(skirtOptions.toENU, pos, scratchCartesian);\r\n\r\n            var minimum = skirtOptions.minimum;\r\n            var maximum = skirtOptions.maximum;\r\n            Cartesian3.minimumByComponent(scratchCartesian, minimum, minimum);\r\n            Cartesian3.maximumByComponent(scratchCartesian, maximum, maximum);\r\n\r\n            var lastBorderPoint = skirtOptions.lastBorderPoint;\r\n            if (defined(lastBorderPoint)) {\r\n                var lastBorderIndex = lastBorderPoint.index;\r\n                indices.push(lastBorderIndex, currentIndex - 1, currentIndex, currentIndex, borderIndex, lastBorderIndex);\r\n            }\r\n\r\n            skirtOptions.lastBorderPoint = borderPoint;\r\n        }\r\n    }\r\nexport default createTaskProcessorWorker(createVerticesFromGoogleEarthEnterpriseBuffer);\r\n"],"names":["defaultValue","CesiumMath","Ellipsoid","Rectangle","Cartographic","Cartesian3","Matrix4","defined","Transforms","WebMercatorProjection","Cartesian2","RuntimeError","BoundingSphere","OrientedBoundingBox","EllipsoidalOccluder","AxisAlignedBoundingBox","TerrainEncoding"],"mappings":"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"}