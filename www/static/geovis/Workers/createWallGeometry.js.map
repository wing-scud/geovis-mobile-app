{"version":3,"file":"createWallGeometry.js","sources":["../../../../Source/Core/WallGeometry.js","../../../../Source/WorkersES6/createWallGeometry.js"],"sourcesContent":["import BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport VertexFormat from './VertexFormat.js';\r\nimport WallGeometryLibrary from './WallGeometryLibrary.js';\r\n\r\n    var scratchCartesian3Position1 = new Cartesian3();\r\n    var scratchCartesian3Position2 = new Cartesian3();\r\n    var scratchCartesian3Position3 = new Cartesian3();\r\n    var scratchCartesian3Position4 = new Cartesian3();\r\n    var scratchCartesian3Position5 = new Cartesian3();\r\n    var scratchBitangent = new Cartesian3();\r\n    var scratchTangent = new Cartesian3();\r\n    var scratchNormal = new Cartesian3();\r\n\r\n    /**\r\n     * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\r\n     * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\r\n     *\r\n     * @alias WallGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Number[]} [options.maximumHeights] An array parallel to <code>positions</code> that give the maximum height of the\r\n     *        wall at <code>positions</code>. If undefined, the height of each position in used.\r\n     * @param {Number[]} [options.minimumHeights] An array parallel to <code>positions</code> that give the minimum height of the\r\n     *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     *\r\n     * @exception {DeveloperError} positions length must be greater than or equal to 2.\r\n     * @exception {DeveloperError} positions and maximumHeights must have the same length.\r\n     * @exception {DeveloperError} positions and minimumHeights must have the same length.\r\n     *\r\n     * @see WallGeometry#createGeometry\r\n     * @see WallGeometry#fromConstantHeight\r\n     *\r\n     * @demo {@link https://sandcastle.cesium.com/index.html?src=Wall.html|Cesium Sandcastle Wall Demo}\r\n     *\r\n     * @example\r\n     * // create a wall that spans from ground level to 10000 meters\r\n     * var wall = new Cesium.WallGeometry({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\r\n     *     19.0, 47.0, 10000.0,\r\n     *     19.0, 48.0, 10000.0,\r\n     *     20.0, 48.0, 10000.0,\r\n     *     20.0, 47.0, 10000.0,\r\n     *     19.0, 47.0, 10000.0\r\n     *   ])\r\n     * });\r\n     * var geometry = Cesium.WallGeometry.createGeometry(wall);\r\n     */\r\n    function WallGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var wallPositions = options.positions;\r\n        var maximumHeights = options.maximumHeights;\r\n        var minimumHeights = options.minimumHeights;\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(wallPositions)) {\r\n            throw new DeveloperError('options.positions is required.');\r\n        }\r\n        if (defined(maximumHeights) && maximumHeights.length !== wallPositions.length) {\r\n            throw new DeveloperError('options.positions and options.maximumHeights must have the same length.');\r\n        }\r\n        if (defined(minimumHeights) && minimumHeights.length !== wallPositions.length) {\r\n            throw new DeveloperError('options.positions and options.minimumHeights must have the same length.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n\r\n        this._positions = wallPositions;\r\n        this._minimumHeights = minimumHeights;\r\n        this._maximumHeights = maximumHeights;\r\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n        this._granularity = granularity;\r\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\r\n        this._workerName = 'createWallGeometry';\r\n\r\n        var numComponents = 1 + wallPositions.length * Cartesian3.packedLength + 2;\r\n        if (defined(minimumHeights)) {\r\n            numComponents += minimumHeights.length;\r\n        }\r\n        if (defined(maximumHeights)) {\r\n            numComponents += maximumHeights.length;\r\n        }\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 1;\r\n    }\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {WallGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    WallGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(value)) {\r\n            throw new DeveloperError('value is required');\r\n        }\r\n        if (!defined(array)) {\r\n            throw new DeveloperError('array is required');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var positions = value._positions;\r\n        var length = positions.length;\r\n        array[startingIndex++] = length;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            Cartesian3.pack(positions[i], array, startingIndex);\r\n        }\r\n\r\n        var minimumHeights = value._minimumHeights;\r\n        length = defined(minimumHeights) ? minimumHeights.length : 0;\r\n        array[startingIndex++] = length;\r\n\r\n        if (defined(minimumHeights)) {\r\n            for (i = 0; i < length; ++i) {\r\n                array[startingIndex++] = minimumHeights[i];\r\n            }\r\n        }\r\n\r\n        var maximumHeights = value._maximumHeights;\r\n        length = defined(maximumHeights) ? maximumHeights.length : 0;\r\n        array[startingIndex++] = length;\r\n\r\n        if (defined(maximumHeights)) {\r\n            for (i = 0; i < length; ++i) {\r\n                array[startingIndex++] = maximumHeights[i];\r\n            }\r\n        }\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        array[startingIndex] = value._granularity;\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var scratchVertexFormat = new VertexFormat();\r\n    var scratchOptions = {\r\n        positions : undefined,\r\n        minimumHeights : undefined,\r\n        maximumHeights : undefined,\r\n        ellipsoid : scratchEllipsoid,\r\n        vertexFormat : scratchVertexFormat,\r\n        granularity : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {WallGeometry} [result] The object into which to store the result.\r\n     * @returns {WallGeometry} The modified result parameter or a new WallGeometry instance if one was not provided.\r\n     */\r\n    WallGeometry.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(array)) {\r\n            throw new DeveloperError('array is required');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var length = array[startingIndex++];\r\n        var positions = new Array(length);\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            positions[i] = Cartesian3.unpack(array, startingIndex);\r\n        }\r\n\r\n        length = array[startingIndex++];\r\n        var minimumHeights;\r\n\r\n        if (length > 0) {\r\n            minimumHeights = new Array(length);\r\n            for (i = 0; i < length; ++i) {\r\n                minimumHeights[i] = array[startingIndex++];\r\n            }\r\n        }\r\n\r\n        length = array[startingIndex++];\r\n        var maximumHeights;\r\n\r\n        if (length > 0) {\r\n            maximumHeights = new Array(length);\r\n            for (i = 0; i < length; ++i) {\r\n                maximumHeights[i] = array[startingIndex++];\r\n            }\r\n        }\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        var granularity = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.positions = positions;\r\n            scratchOptions.minimumHeights = minimumHeights;\r\n            scratchOptions.maximumHeights = maximumHeights;\r\n            scratchOptions.granularity = granularity;\r\n            return new WallGeometry(scratchOptions);\r\n        }\r\n\r\n        result._positions = positions;\r\n        result._minimumHeights = minimumHeights;\r\n        result._maximumHeights = maximumHeights;\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._granularity = granularity;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\r\n     * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\r\n     * @param {Number} [options.maximumHeight] A constant that defines the maximum height of the\r\n     *        wall at <code>positions</code>. If undefined, the height of each position in used.\r\n     * @param {Number} [options.minimumHeight] A constant that defines the minimum height of the\r\n     *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @returns {WallGeometry}\r\n     *\r\n     *\r\n     * @example\r\n     * // create a wall that spans from 10000 meters to 20000 meters\r\n     * var wall = Cesium.WallGeometry.fromConstantHeights({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n     *     19.0, 47.0,\r\n     *     19.0, 48.0,\r\n     *     20.0, 48.0,\r\n     *     20.0, 47.0,\r\n     *     19.0, 47.0,\r\n     *   ]),\r\n     *   minimumHeight : 20000.0,\r\n     *   maximumHeight : 10000.0\r\n     * });\r\n     * var geometry = Cesium.WallGeometry.createGeometry(wall);\r\n     *\r\n     * @see WallGeometry#createGeometry\r\n     */\r\n    WallGeometry.fromConstantHeights = function(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var positions = options.positions;\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(positions)) {\r\n            throw new DeveloperError('options.positions is required.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var minHeights;\r\n        var maxHeights;\r\n\r\n        var min = options.minimumHeight;\r\n        var max = options.maximumHeight;\r\n\r\n        var doMin = defined(min);\r\n        var doMax = defined(max);\r\n        if (doMin || doMax) {\r\n            var length = positions.length;\r\n            minHeights = (doMin) ? new Array(length) : undefined;\r\n            maxHeights = (doMax) ? new Array(length) : undefined;\r\n\r\n            for (var i = 0; i < length; ++i) {\r\n                if (doMin) {\r\n                    minHeights[i] = min;\r\n                }\r\n\r\n                if (doMax) {\r\n                    maxHeights[i] = max;\r\n                }\r\n            }\r\n        }\r\n\r\n        var newOptions = {\r\n            positions : positions,\r\n            maximumHeights : maxHeights,\r\n            minimumHeights : minHeights,\r\n            ellipsoid : options.ellipsoid,\r\n            vertexFormat : options.vertexFormat\r\n        };\r\n        return new WallGeometry(newOptions);\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a wall, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {WallGeometry} wallGeometry A description of the wall.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    WallGeometry.createGeometry = function(wallGeometry) {\r\n        var wallPositions = wallGeometry._positions;\r\n        var minimumHeights = wallGeometry._minimumHeights;\r\n        var maximumHeights = wallGeometry._maximumHeights;\r\n        var vertexFormat = wallGeometry._vertexFormat;\r\n        var granularity = wallGeometry._granularity;\r\n        var ellipsoid = wallGeometry._ellipsoid;\r\n\r\n        var pos = WallGeometryLibrary.computePositions(ellipsoid, wallPositions, maximumHeights, minimumHeights, granularity, true);\r\n        if (!defined(pos)) {\r\n            return;\r\n        }\r\n\r\n        var bottomPositions = pos.bottomPositions;\r\n        var topPositions = pos.topPositions;\r\n        var numCorners = pos.numCorners;\r\n\r\n        var length = topPositions.length;\r\n        var size = length * 2;\r\n\r\n        var positions = vertexFormat.position ? new Float64Array(size) : undefined;\r\n        var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\r\n        var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\r\n        var bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\r\n        var textureCoordinates = vertexFormat.st ? new Float32Array(size / 3 * 2) : undefined;\r\n\r\n        var positionIndex = 0;\r\n        var normalIndex = 0;\r\n        var bitangentIndex = 0;\r\n        var tangentIndex = 0;\r\n        var stIndex = 0;\r\n\r\n        // add lower and upper points one after the other, lower\r\n        // points being even and upper points being odd\r\n        var normal = scratchNormal;\r\n        var tangent = scratchTangent;\r\n        var bitangent = scratchBitangent;\r\n        var recomputeNormal = true;\r\n        length /= 3;\r\n        var i;\r\n        var s = 0;\r\n        var ds = 1/(length - wallPositions.length + 1);\r\n        for (i = 0; i < length; ++i) {\r\n            var i3 = i * 3;\r\n            var topPosition = Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position1);\r\n            var bottomPosition = Cartesian3.fromArray(bottomPositions, i3, scratchCartesian3Position2);\r\n            if (vertexFormat.position) {\r\n                // insert the lower point\r\n                positions[positionIndex++] = bottomPosition.x;\r\n                positions[positionIndex++] = bottomPosition.y;\r\n                positions[positionIndex++] = bottomPosition.z;\r\n\r\n                // insert the upper point\r\n                positions[positionIndex++] = topPosition.x;\r\n                positions[positionIndex++] = topPosition.y;\r\n                positions[positionIndex++] = topPosition.z;\r\n            }\r\n\r\n            if (vertexFormat.st) {\r\n                textureCoordinates[stIndex++] = s;\r\n                textureCoordinates[stIndex++] = 0.0;\r\n\r\n                textureCoordinates[stIndex++] = s;\r\n                textureCoordinates[stIndex++] = 1.0;\r\n            }\r\n\r\n            if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\r\n                var nextPosition;\r\n                var nextTop = Cartesian3.clone(Cartesian3.ZERO, scratchCartesian3Position5);\r\n                var groundPosition = ellipsoid.scaleToGeodeticSurface(Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position2), scratchCartesian3Position2);\r\n                if (i + 1 < length) {\r\n                    nextPosition = ellipsoid.scaleToGeodeticSurface(Cartesian3.fromArray(topPositions, i3 + 3, scratchCartesian3Position3), scratchCartesian3Position3);\r\n                    nextTop = Cartesian3.fromArray(topPositions, i3 + 3, scratchCartesian3Position5);\r\n                }\r\n\r\n                if (recomputeNormal) {\r\n                    var scalednextPosition = Cartesian3.subtract(nextTop, topPosition, scratchCartesian3Position4);\r\n                    var scaledGroundPosition = Cartesian3.subtract(groundPosition, topPosition, scratchCartesian3Position1);\r\n                    normal = Cartesian3.normalize(Cartesian3.cross(scaledGroundPosition, scalednextPosition, normal), normal);\r\n                    recomputeNormal = false;\r\n                }\r\n\r\n                if (Cartesian3.equalsEpsilon(nextPosition, groundPosition, CesiumMath.EPSILON10)) {\r\n                    recomputeNormal = true;\r\n                } else {\r\n                    s += ds;\r\n                    if (vertexFormat.tangent) {\r\n                        tangent = Cartesian3.normalize(Cartesian3.subtract(nextPosition, groundPosition, tangent), tangent);\r\n                    }\r\n                    if (vertexFormat.bitangent) {\r\n                        bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\r\n                    }\r\n                }\r\n\r\n                if (vertexFormat.normal) {\r\n                    normals[normalIndex++] = normal.x;\r\n                    normals[normalIndex++] = normal.y;\r\n                    normals[normalIndex++] = normal.z;\r\n\r\n                    normals[normalIndex++] = normal.x;\r\n                    normals[normalIndex++] = normal.y;\r\n                    normals[normalIndex++] = normal.z;\r\n                }\r\n\r\n                if (vertexFormat.tangent) {\r\n                    tangents[tangentIndex++] = tangent.x;\r\n                    tangents[tangentIndex++] = tangent.y;\r\n                    tangents[tangentIndex++] = tangent.z;\r\n\r\n                    tangents[tangentIndex++] = tangent.x;\r\n                    tangents[tangentIndex++] = tangent.y;\r\n                    tangents[tangentIndex++] = tangent.z;\r\n                }\r\n\r\n                if (vertexFormat.bitangent) {\r\n                    bitangents[bitangentIndex++] = bitangent.x;\r\n                    bitangents[bitangentIndex++] = bitangent.y;\r\n                    bitangents[bitangentIndex++] = bitangent.z;\r\n\r\n                    bitangents[bitangentIndex++] = bitangent.x;\r\n                    bitangents[bitangentIndex++] = bitangent.y;\r\n                    bitangents[bitangentIndex++] = bitangent.z;\r\n                }\r\n            }\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n\r\n        if (vertexFormat.position) {\r\n            attributes.position = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : positions\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.normal) {\r\n            attributes.normal = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : normals\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.tangent) {\r\n            attributes.tangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : tangents\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.bitangent) {\r\n            attributes.bitangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : bitangents\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.st) {\r\n            attributes.st = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                values : textureCoordinates\r\n            });\r\n        }\r\n\r\n        // prepare the side walls, two triangles for each wall\r\n        //\r\n        //    A (i+1)  B (i+3) E\r\n        //    +--------+-------+\r\n        //    |      / |      /|    triangles:  A C B\r\n        //    |     /  |     / |                B C D\r\n        //    |    /   |    /  |\r\n        //    |   /    |   /   |\r\n        //    |  /     |  /    |\r\n        //    | /      | /     |\r\n        //    +--------+-------+\r\n        //    C (i)    D (i+2) F\r\n        //\r\n\r\n        var numVertices = size / 3;\r\n        size -= 6 * (numCorners + 1);\r\n        var indices = IndexDatatype.createTypedArray(numVertices, size);\r\n\r\n        var edgeIndex = 0;\r\n        for (i = 0; i < numVertices - 2; i += 2) {\r\n            var LL = i;\r\n            var LR = i + 2;\r\n            var pl = Cartesian3.fromArray(positions, LL * 3, scratchCartesian3Position1);\r\n            var pr = Cartesian3.fromArray(positions, LR * 3, scratchCartesian3Position2);\r\n            if (Cartesian3.equalsEpsilon(pl, pr, CesiumMath.EPSILON10)) {\r\n                continue;\r\n            }\r\n            var UL = i + 1;\r\n            var UR = i + 3;\r\n\r\n            indices[edgeIndex++] = UL;\r\n            indices[edgeIndex++] = LL;\r\n            indices[edgeIndex++] = UR;\r\n            indices[edgeIndex++] = UR;\r\n            indices[edgeIndex++] = LL;\r\n            indices[edgeIndex++] = LR;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.TRIANGLES,\r\n            boundingSphere : new BoundingSphere.fromVertices(positions)\r\n        });\r\n    };\r\nexport default WallGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport WallGeometry from '../Core/WallGeometry.js';\r\n\r\n    function createWallGeometry(wallGeometry, offset) {\r\n        if (defined(offset)) {\r\n            wallGeometry = WallGeometry.unpack(wallGeometry, offset);\r\n        }\r\n        wallGeometry._ellipsoid = Ellipsoid.clone(wallGeometry._ellipsoid);\r\n        return WallGeometry.createGeometry(wallGeometry);\r\n    }\r\nexport default createWallGeometry;\r\n"],"names":["Cartesian3","defaultValue","defined","DeveloperError","VertexFormat","CesiumMath","Ellipsoid","WallGeometryLibrary","GeometryAttributes","GeometryAttribute","ComponentDatatype","IndexDatatype","Geometry","PrimitiveType","BoundingSphere"],"mappings":"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"}