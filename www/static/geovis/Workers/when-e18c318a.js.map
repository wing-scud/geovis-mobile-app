{"version":3,"file":"when-e18c318a.js","sources":["../../../../Source/ThirdParty/when.js"],"sourcesContent":["/**\r\n  @license\r\n  when.js - https://github.com/cujojs/when\r\n\r\n  MIT License (c) copyright B Cavalier & J Hann\r\n\r\n * A lightweight CommonJS Promises/A and when() implementation\r\n * when is part of the cujo.js family of libraries (http://cujojs.com/)\r\n *\r\n * Licensed under the MIT License at:\r\n * http://www.opensource.org/licenses/mit-license.php\r\n *\r\n * @version 1.7.1\r\n */\r\n\r\n\tvar reduceArray, slice, undef;\r\n\r\n\t//\r\n\t// Public API\r\n\t//\r\n\r\n\twhen.defer     = defer;     // Create a deferred\r\n\twhen.resolve   = resolve;   // Create a resolved promise\r\n\twhen.reject    = reject;    // Create a rejected promise\r\n\r\n\twhen.join      = join;      // Join 2 or more promises\r\n\r\n\twhen.all       = all;       // Resolve a list of promises\r\n\twhen.map       = map;       // Array.map() for promises\r\n\twhen.reduce    = reduce;    // Array.reduce() for promises\r\n\r\n\twhen.any       = any;       // One-winner race\r\n\twhen.some      = some;      // Multi-winner race\r\n\r\n\twhen.chain     = chain;     // Make a promise trigger another resolver\r\n\r\n\twhen.isPromise = isPromise; // Determine if a thing is a promise\r\n\r\n\t/**\r\n\t * Register an observer for a promise or immediate value.\r\n\t *\r\n\t * @param {*} promiseOrValue\r\n\t * @param {function?} [onFulfilled] callback to be called when promiseOrValue is\r\n\t *   successfully fulfilled.  If promiseOrValue is an immediate value, callback\r\n\t *   will be invoked immediately.\r\n\t * @param {function?} [onRejected] callback to be called when promiseOrValue is\r\n\t *   rejected.\r\n\t * @param {function?} [onProgress] callback to be called when progress updates\r\n\t *   are issued for promiseOrValue.\r\n\t * @returns {Promise} a new {@link Promise} that will complete with the return\r\n\t *   value of callback or errback or the completion value of promiseOrValue if\r\n\t *   callback and/or errback is not supplied.\r\n\t */\r\n\tfunction when(promiseOrValue, onFulfilled, onRejected, onProgress) {\r\n\t\t// Get a trusted promise for the input promiseOrValue, and then\r\n\t\t// register promise handlers\r\n\t\treturn resolve(promiseOrValue).then(onFulfilled, onRejected, onProgress);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns promiseOrValue if promiseOrValue is a {@link Promise}, a new Promise if\r\n\t * promiseOrValue is a foreign promise, or a new, already-fulfilled {@link Promise}\r\n\t * whose value is promiseOrValue if promiseOrValue is an immediate value.\r\n\t *\r\n\t * @param {*} promiseOrValue\r\n\t * @returns Guaranteed to return a trusted Promise.  If promiseOrValue is a when.js {@link Promise}\r\n\t *   returns promiseOrValue, otherwise, returns a new, already-resolved, when.js {@link Promise}\r\n\t *   whose resolution value is:\r\n\t *   * the resolution value of promiseOrValue if it's a foreign promise, or\r\n\t *   * promiseOrValue if it's a value\r\n\t */\r\n\tfunction resolve(promiseOrValue) {\r\n\t\tvar promise, deferred;\r\n\r\n\t\tif(promiseOrValue instanceof Promise) {\r\n\t\t\t// It's a when.js promise, so we trust it\r\n\t\t\tpromise = promiseOrValue;\r\n\r\n\t\t} else {\r\n\t\t\t// It's not a when.js promise. See if it's a foreign promise or a value.\r\n\t\t\tif(isPromise(promiseOrValue)) {\r\n\t\t\t\t// It's a thenable, but we don't know where it came from, so don't trust\r\n\t\t\t\t// its implementation entirely.  Introduce a trusted middleman when.js promise\r\n\t\t\t\tdeferred = defer();\r\n\r\n\t\t\t\t// IMPORTANT: This is the only place when.js should ever call .then() on an\r\n\t\t\t\t// untrusted promise. Don't expose the return value to the untrusted promise\r\n\t\t\t\tpromiseOrValue.then(\r\n\t\t\t\t\tfunction(value)  { deferred.resolve(value); },\r\n\t\t\t\t\tfunction(reason) { deferred.reject(reason); },\r\n\t\t\t\t\tfunction(update) { deferred.progress(update); }\r\n\t\t\t\t);\r\n\r\n\t\t\t\tpromise = deferred.promise;\r\n\r\n\t\t\t} else {\r\n\t\t\t\t// It's a value, not a promise.  Create a resolved promise for it.\r\n\t\t\t\tpromise = fulfilled(promiseOrValue);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn promise;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a rejected promise for the supplied promiseOrValue.  The returned\r\n\t * promise will be rejected with:\r\n\t * - promiseOrValue, if it is a value, or\r\n\t * - if promiseOrValue is a promise\r\n\t *   - promiseOrValue's value after it is fulfilled\r\n\t *   - promiseOrValue's reason after it is rejected\r\n\t * @param {*} promiseOrValue the rejected value of the returned {@link Promise}\r\n\t * @returns {Promise} rejected {@link Promise}\r\n\t */\r\n\tfunction reject(promiseOrValue) {\r\n\t\treturn when(promiseOrValue, rejected);\r\n\t}\r\n\r\n\t/**\r\n\t * Trusted Promise constructor.  A Promise created from this constructor is\r\n\t * a trusted when.js promise.  Any other duck-typed promise is considered\r\n\t * untrusted.\r\n\t * @constructor\r\n\t * @name Promise\r\n\t */\r\n\tfunction Promise(then) {\r\n\t\tthis.then = then;\r\n\t}\r\n\r\n\tPromise.prototype = {\r\n\t\t/**\r\n\t\t * Register a callback that will be called when a promise is\r\n\t\t * fulfilled or rejected.  Optionally also register a progress handler.\r\n\t\t * Shortcut for .then(onFulfilledOrRejected, onFulfilledOrRejected, onProgress)\r\n\t\t * @param {function?} [onFulfilledOrRejected]\r\n\t\t * @param {function?} [onProgress]\r\n\t\t * @returns {Promise}\r\n\t\t */\r\n\t\talways: function(onFulfilledOrRejected, onProgress) {\r\n\t\t\treturn this.then(onFulfilledOrRejected, onFulfilledOrRejected, onProgress);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Register a rejection handler.  Shortcut for .then(undefined, onRejected)\r\n\t\t * @param {function?} onRejected\r\n\t\t * @returns {Promise}\r\n\t\t */\r\n\t\totherwise: function(onRejected) {\r\n\t\t\treturn this.then(undef, onRejected);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Shortcut for .then(function() { return value; })\r\n\t\t * @param  {*} value\r\n\t\t * @returns {Promise} a promise that:\r\n\t\t *  - is fulfilled if value is not a promise, or\r\n\t\t *  - if value is a promise, will fulfill with its value, or reject\r\n\t\t *    with its reason.\r\n\t\t */\r\n\t\tyield: function(value) {\r\n\t\t\treturn this.then(function() {\r\n\t\t\t\treturn value;\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Assumes that this promise will fulfill with an array, and arranges\r\n\t\t * for the onFulfilled to be called with the array as its argument list\r\n\t\t * i.e. onFulfilled.spread(undefined, array).\r\n\t\t * @param {function} onFulfilled function to receive spread arguments\r\n\t\t * @returns {Promise}\r\n\t\t */\r\n\t\tspread: function(onFulfilled) {\r\n\t\t\treturn this.then(function(array) {\r\n\t\t\t\t// array may contain promises, so resolve its contents.\r\n\t\t\t\treturn all(array, function(array) {\r\n\t\t\t\t\treturn onFulfilled.apply(undef, array);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Create an already-resolved promise for the supplied value\r\n\t * @private\r\n\t *\r\n\t * @param {*} value\r\n\t * @returns {Promise} fulfilled promise\r\n\t */\r\n\tfunction fulfilled(value) {\r\n\t\tvar p = new Promise(function(onFulfilled) {\r\n\t\t\t// TODO: Promises/A+ check typeof onFulfilled\r\n\t\t\ttry {\r\n\t\t\t\treturn resolve(onFulfilled ? onFulfilled(value) : value);\r\n\t\t\t} catch(e) {\r\n\t\t\t\treturn rejected(e);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn p;\r\n\t}\r\n\r\n\t/**\r\n\t * Create an already-rejected {@link Promise} with the supplied\r\n\t * rejection reason.\r\n\t * @private\r\n\t *\r\n\t * @param {*} reason\r\n\t * @returns {Promise} rejected promise\r\n\t */\r\n\tfunction rejected(reason) {\r\n\t\tvar p = new Promise(function(_, onRejected) {\r\n\t\t\t// TODO: Promises/A+ check typeof onRejected\r\n\t\t\ttry {\r\n\t\t\t\treturn onRejected ? resolve(onRejected(reason)) : rejected(reason);\r\n\t\t\t} catch(e) {\r\n\t\t\t\treturn rejected(e);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn p;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new, Deferred with fully isolated resolver and promise parts,\r\n\t * either or both of which may be given out safely to consumers.\r\n\t * The Deferred itself has the full API: resolve, reject, progress, and\r\n\t * then. The resolver has resolve, reject, and progress.  The promise\r\n\t * only has then.\r\n\t *\r\n\t * @returns {Deferred}\r\n\t */\r\n\tfunction defer() {\r\n\t\tvar deferred, promise, handlers, progressHandlers,\r\n\t\t\t_then, _progress, _resolve;\r\n\r\n\t\t/**\r\n\t\t * The promise for the new deferred\r\n\t\t * @type {Promise}\r\n\t\t */\r\n\t\tpromise = new Promise(then);\r\n\r\n\t\t/**\r\n\t\t * The full Deferred object, with {@link Promise} and {@link Resolver} parts\r\n\t\t * @class Deferred\r\n\t\t * @name Deferred\r\n\t\t */\r\n\t\tdeferred = {\r\n\t\t\tthen:     then, // DEPRECATED: use deferred.promise.then\r\n\t\t\tresolve:  promiseResolve,\r\n\t\t\treject:   promiseReject,\r\n\t\t\t// TODO: Consider renaming progress() to notify()\r\n\t\t\tprogress: promiseProgress,\r\n\r\n\t\t\tpromise:  promise,\r\n\r\n\t\t\tresolver: {\r\n\t\t\t\tresolve:  promiseResolve,\r\n\t\t\t\treject:   promiseReject,\r\n\t\t\t\tprogress: promiseProgress\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\thandlers = [];\r\n\t\tprogressHandlers = [];\r\n\r\n\t\t/**\r\n\t\t * Pre-resolution then() that adds the supplied callback, errback, and progback\r\n\t\t * functions to the registered listeners\r\n\t\t * @private\r\n\t\t *\r\n\t\t * @param {function?} [onFulfilled] resolution handler\r\n\t\t * @param {function?} [onRejected] rejection handler\r\n\t\t * @param {function?} [onProgress] progress handler\r\n\t\t */\r\n\t\t_then = function(onFulfilled, onRejected, onProgress) {\r\n\t\t\t// TODO: Promises/A+ check typeof onFulfilled, onRejected, onProgress\r\n\t\t\tvar deferred, progressHandler;\r\n\r\n\t\t\tdeferred = defer();\r\n\r\n\t\t\tprogressHandler = typeof onProgress === 'function'\r\n\t\t\t\t? function(update) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\t// Allow progress handler to transform progress event\r\n\t\t\t\t\t\tdeferred.progress(onProgress(update));\r\n\t\t\t\t\t} catch(e) {\r\n\t\t\t\t\t\t// Use caught value as progress\r\n\t\t\t\t\t\tdeferred.progress(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t: function(update) { deferred.progress(update); };\r\n\r\n\t\t\thandlers.push(function(promise) {\r\n\t\t\t\tpromise.then(onFulfilled, onRejected)\r\n\t\t\t\t\t.then(deferred.resolve, deferred.reject, progressHandler);\r\n\t\t\t});\r\n\r\n\t\t\tprogressHandlers.push(progressHandler);\r\n\r\n\t\t\treturn deferred.promise;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Issue a progress event, notifying all progress listeners\r\n\t\t * @private\r\n\t\t * @param {*} update progress event payload to pass to all listeners\r\n\t\t */\r\n\t\t_progress = function(update) {\r\n\t\t\tprocessQueue(progressHandlers, update);\r\n\t\t\treturn update;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Transition from pre-resolution state to post-resolution state, notifying\r\n\t\t * all listeners of the resolution or rejection\r\n\t\t * @private\r\n\t\t * @param {*} value the value of this deferred\r\n\t\t */\r\n\t\t_resolve = function(value) {\r\n\t\t\tvalue = resolve(value);\r\n\r\n\t\t\t// Replace _then with one that directly notifies with the result.\r\n\t\t\t_then = value.then;\r\n\t\t\t// Replace _resolve so that this Deferred can only be resolved once\r\n\t\t\t_resolve = resolve;\r\n\t\t\t// Make _progress a noop, to disallow progress for the resolved promise.\r\n\t\t\t_progress = noop;\r\n\r\n\t\t\t// Notify handlers\r\n\t\t\tprocessQueue(handlers, value);\r\n\r\n\t\t\t// Free progressHandlers array since we'll never issue progress events\r\n\t\t\tprogressHandlers = handlers = undef;\r\n\r\n\t\t\treturn value;\r\n\t\t};\r\n\r\n\t\treturn deferred;\r\n\r\n\t\t/**\r\n\t\t * Wrapper to allow _then to be replaced safely\r\n\t\t * @param {function?} [onFulfilled] resolution handler\r\n\t\t * @param {function?} [onRejected] rejection handler\r\n\t\t * @param {function?} [onProgress] progress handler\r\n\t\t * @returns {Promise} new promise\r\n\t\t */\r\n\t\tfunction then(onFulfilled, onRejected, onProgress) {\r\n\t\t\t// TODO: Promises/A+ check typeof onFulfilled, onRejected, onProgress\r\n\t\t\treturn _then(onFulfilled, onRejected, onProgress);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Wrapper to allow _resolve to be replaced\r\n\t\t */\r\n\t\tfunction promiseResolve(val) {\r\n\t\t\treturn _resolve(val);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Wrapper to allow _reject to be replaced\r\n\t\t */\r\n\t\tfunction promiseReject(err) {\r\n\t\t\treturn _resolve(rejected(err));\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Wrapper to allow _progress to be replaced\r\n\t\t */\r\n\t\tfunction promiseProgress(update) {\r\n\t\t\treturn _progress(update);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Determines if promiseOrValue is a promise or not.  Uses the feature\r\n\t * test from http://wiki.commonjs.org/wiki/Promises/A to determine if\r\n\t * promiseOrValue is a promise.\r\n\t *\r\n\t * @param {*} promiseOrValue anything\r\n\t * @returns {boolean} true if promiseOrValue is a {@link Promise}\r\n\t */\r\n\tfunction isPromise(promiseOrValue) {\r\n\t\treturn promiseOrValue && typeof promiseOrValue.then === 'function';\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates a competitive race, returning a promise that will resolve when\r\n\t * howMany of the supplied promisesOrValues have resolved, or will reject when\r\n\t * it becomes impossible for howMany to resolve, for example, when\r\n\t * (promisesOrValues.length - howMany) + 1 input promises reject.\r\n\t *\r\n\t * @param {Array} promisesOrValues array of anything, may contain a mix\r\n\t *      of promises and values\r\n\t * @param howMany {number} number of promisesOrValues to resolve\r\n\t * @param {function?} [onFulfilled] resolution handler\r\n\t * @param {function?} [onRejected] rejection handler\r\n\t * @param {function?} [onProgress] progress handler\r\n\t * @returns {Promise} promise that will resolve to an array of howMany values that\r\n\t * resolved first, or will reject with an array of (promisesOrValues.length - howMany) + 1\r\n\t * rejection reasons.\r\n\t */\r\n\tfunction some(promisesOrValues, howMany, onFulfilled, onRejected, onProgress) {\r\n\r\n\t\tcheckCallbacks(2, arguments);\r\n\r\n\t\treturn when(promisesOrValues, function(promisesOrValues) {\r\n\r\n\t\t\tvar toResolve, toReject, values, reasons, deferred, fulfillOne, rejectOne, progress, len, i;\r\n\r\n\t\t\tlen = promisesOrValues.length >>> 0;\r\n\r\n\t\t\ttoResolve = Math.max(0, Math.min(howMany, len));\r\n\t\t\tvalues = [];\r\n\r\n\t\t\ttoReject = (len - toResolve) + 1;\r\n\t\t\treasons = [];\r\n\r\n\t\t\tdeferred = defer();\r\n\r\n\t\t\t// No items in the input, resolve immediately\r\n\t\t\tif (!toResolve) {\r\n\t\t\t\tdeferred.resolve(values);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tprogress = deferred.progress;\r\n\r\n\t\t\t\trejectOne = function(reason) {\r\n\t\t\t\t\treasons.push(reason);\r\n\t\t\t\t\tif(!--toReject) {\r\n\t\t\t\t\t\tfulfillOne = rejectOne = noop;\r\n\t\t\t\t\t\tdeferred.reject(reasons);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfulfillOne = function(val) {\r\n\t\t\t\t\t// This orders the values based on promise resolution order\r\n\t\t\t\t\t// Another strategy would be to use the original position of\r\n\t\t\t\t\t// the corresponding promise.\r\n\t\t\t\t\tvalues.push(val);\r\n\r\n\t\t\t\t\tif (!--toResolve) {\r\n\t\t\t\t\t\tfulfillOne = rejectOne = noop;\r\n\t\t\t\t\t\tdeferred.resolve(values);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfor(i = 0; i < len; ++i) {\r\n\t\t\t\t\tif(i in promisesOrValues) {\r\n\t\t\t\t\t\twhen(promisesOrValues[i], fulfiller, rejecter, progress);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn deferred.then(onFulfilled, onRejected, onProgress);\r\n\r\n\t\t\tfunction rejecter(reason) {\r\n\t\t\t\trejectOne(reason);\r\n\t\t\t}\r\n\r\n\t\t\tfunction fulfiller(val) {\r\n\t\t\t\tfulfillOne(val);\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates a competitive race, returning a promise that will resolve when\r\n\t * any one of the supplied promisesOrValues has resolved or will reject when\r\n\t * *all* promisesOrValues have rejected.\r\n\t *\r\n\t * @param {Array|Promise} promisesOrValues array of anything, may contain a mix\r\n\t *      of {@link Promise}s and values\r\n\t * @param {function?} [onFulfilled] resolution handler\r\n\t * @param {function?} [onRejected] rejection handler\r\n\t * @param {function?} [onProgress] progress handler\r\n\t * @returns {Promise} promise that will resolve to the value that resolved first, or\r\n\t * will reject with an array of all rejected inputs.\r\n\t */\r\n\tfunction any(promisesOrValues, onFulfilled, onRejected, onProgress) {\r\n\r\n\t\tfunction unwrapSingleResult(val) {\r\n\t\t\treturn onFulfilled ? onFulfilled(val[0]) : val[0];\r\n\t\t}\r\n\r\n\t\treturn some(promisesOrValues, 1, unwrapSingleResult, onRejected, onProgress);\r\n\t}\r\n\r\n\t/**\r\n\t * Return a promise that will resolve only once all the supplied promisesOrValues\r\n\t * have resolved. The resolution value of the returned promise will be an array\r\n\t * containing the resolution values of each of the promisesOrValues.\r\n\t * @memberOf when\r\n\t *\r\n\t * @param {Array|Promise} promisesOrValues array of anything, may contain a mix\r\n\t *      of {@link Promise}s and values\r\n\t * @param {function?} [onFulfilled] resolution handler\r\n\t * @param {function?} [onRejected] rejection handler\r\n\t * @param {function?} [onProgress] progress handler\r\n\t * @returns {Promise}\r\n\t */\r\n\tfunction all(promisesOrValues, onFulfilled, onRejected, onProgress) {\r\n\t\tcheckCallbacks(1, arguments);\r\n\t\treturn map(promisesOrValues, identity).then(onFulfilled, onRejected, onProgress);\r\n\t}\r\n\r\n\t/**\r\n\t * Joins multiple promises into a single returned promise.\r\n\t * @returns {Promise} a promise that will fulfill when *all* the input promises\r\n\t * have fulfilled, or will reject when *any one* of the input promises rejects.\r\n\t */\r\n\tfunction join(/* ...promises */) {\r\n\t\treturn map(arguments, identity);\r\n\t}\r\n\r\n\t/**\r\n\t * Traditional map function, similar to `Array.prototype.map()`, but allows\r\n\t * input to contain {@link Promise}s and/or values, and mapFunc may return\r\n\t * either a value or a {@link Promise}\r\n\t *\r\n\t * @param {Array|Promise} promise array of anything, may contain a mix\r\n\t *      of {@link Promise}s and values\r\n\t * @param {function} mapFunc mapping function mapFunc(value) which may return\r\n\t *      either a {@link Promise} or value\r\n\t * @returns {Promise} a {@link Promise} that will resolve to an array containing\r\n\t *      the mapped output values.\r\n\t */\r\n\tfunction map(promise, mapFunc) {\r\n\t\treturn when(promise, function(array) {\r\n\t\t\tvar results, len, toResolve, resolve, i, d;\r\n\r\n\t\t\t// Since we know the resulting length, we can preallocate the results\r\n\t\t\t// array to avoid array expansions.\r\n\t\t\ttoResolve = len = array.length >>> 0;\r\n\t\t\tresults = [];\r\n\t\t\td = defer();\r\n\r\n\t\t\tif(!toResolve) {\r\n\t\t\t\td.resolve(results);\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresolve = function resolveOne(item, i) {\r\n\t\t\t\t\twhen(item, mapFunc).then(function(mapped) {\r\n\t\t\t\t\t\tresults[i] = mapped;\r\n\r\n\t\t\t\t\t\tif(!--toResolve) {\r\n\t\t\t\t\t\t\td.resolve(results);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, d.reject);\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Since mapFunc may be async, get all invocations of it into flight\r\n\t\t\t\tfor(i = 0; i < len; i++) {\r\n\t\t\t\t\tif(i in array) {\r\n\t\t\t\t\t\tresolve(array[i], i);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t--toResolve;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn d.promise;\r\n\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Traditional reduce function, similar to `Array.prototype.reduce()`, but\r\n\t * input may contain promises and/or values, and reduceFunc\r\n\t * may return either a value or a promise, *and* initialValue may\r\n\t * be a promise for the starting value.\r\n\t *\r\n\t * @param {Array|Promise} promise array or promise for an array of anything,\r\n\t *      may contain a mix of promises and values.\r\n\t * @param {function} reduceFunc reduce function reduce(currentValue, nextValue, index, total),\r\n\t *      where total is the total number of items being reduced, and will be the same\r\n\t *      in each call to reduceFunc.\r\n\t * @returns {Promise} that will resolve to the final reduced value\r\n\t */\r\n\tfunction reduce(promise, reduceFunc /*, initialValue */) {\r\n\t\tvar args = slice.call(arguments, 1);\r\n\r\n\t\treturn when(promise, function(array) {\r\n\t\t\tvar total;\r\n\r\n\t\t\ttotal = array.length;\r\n\r\n\t\t\t// Wrap the supplied reduceFunc with one that handles promises and then\r\n\t\t\t// delegates to the supplied.\r\n\t\t\targs[0] = function (current, val, i) {\r\n\t\t\t\treturn when(current, function (c) {\r\n\t\t\t\t\treturn when(val, function (value) {\r\n\t\t\t\t\t\treturn reduceFunc(c, value, i, total);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t};\r\n\r\n\t\t\treturn reduceArray.apply(array, args);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Ensure that resolution of promiseOrValue will trigger resolver with the\r\n\t * value or reason of promiseOrValue, or instead with resolveValue if it is provided.\r\n\t *\r\n\t * @param promiseOrValue\r\n\t * @param {Object} resolver\r\n\t * @param {function} resolver.resolve\r\n\t * @param {function} resolver.reject\r\n\t * @param {*} [resolveValue]\r\n\t * @returns {Promise}\r\n\t */\r\n\tfunction chain(promiseOrValue, resolver, resolveValue) {\r\n\t\tvar useResolveValue = arguments.length > 2;\r\n\r\n\t\treturn when(promiseOrValue,\r\n\t\t\tfunction(val) {\r\n\t\t\t\tval = useResolveValue ? resolveValue : val;\r\n\t\t\t\tresolver.resolve(val);\r\n\t\t\t\treturn val;\r\n\t\t\t},\r\n\t\t\tfunction(reason) {\r\n\t\t\t\tresolver.reject(reason);\r\n\t\t\t\treturn rejected(reason);\r\n\t\t\t},\r\n\t\t\tresolver.progress\r\n\t\t);\r\n\t}\r\n\r\n\t//\r\n\t// Utility functions\r\n\t//\r\n\r\n\t/**\r\n\t * Apply all functions in queue to value\r\n\t * @param {Array} queue array of functions to execute\r\n\t * @param {*} value argument passed to each function\r\n\t */\r\n\tfunction processQueue(queue, value) {\r\n\t\tvar handler, i = 0;\r\n\r\n\t\twhile (handler = queue[i++]) {\r\n\t\t\thandler(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Helper that checks arrayOfCallbacks to ensure that each element is either\r\n\t * a function, or null or undefined.\r\n\t * @private\r\n\t * @param {number} start index at which to start checking items in arrayOfCallbacks\r\n\t * @param {Array} arrayOfCallbacks array to check\r\n\t * @throws {Error} if any element of arrayOfCallbacks is something other than\r\n\t * a functions, null, or undefined.\r\n\t */\r\n\tfunction checkCallbacks(start, arrayOfCallbacks) {\r\n\t\t// TODO: Promises/A+ update type checking and docs\r\n\t\tvar arg, i = arrayOfCallbacks.length;\r\n\r\n\t\twhile(i > start) {\r\n\t\t\targ = arrayOfCallbacks[--i];\r\n\r\n\t\t\tif (arg != null && typeof arg != 'function') {\r\n\t\t\t\tthrow new Error('arg '+i+' must be a function');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * No-Op function used in method replacement\r\n\t * @private\r\n\t */\r\n\tfunction noop() {}\r\n\r\n\tslice = [].slice;\r\n\r\n\t// ES5 reduce implementation if native not available\r\n\t// See: http://es5.github.com/#x15.4.4.21 as there are many\r\n\t// specifics and edge cases.\r\n\treduceArray = [].reduce ||\r\n\t\tfunction(reduceFunc /*, initialValue */) {\r\n\t\t\t/*jshint maxcomplexity: 7*/\r\n\r\n\t\t\t// ES5 dictates that reduce.length === 1\r\n\r\n\t\t\t// This implementation deviates from ES5 spec in the following ways:\r\n\t\t\t// 1. It does not check if reduceFunc is a Callable\r\n\r\n\t\t\tvar arr, args, reduced, len, i;\r\n\r\n\t\t\ti = 0;\r\n\t\t\t// This generates a jshint warning, despite being valid\r\n\t\t\t// \"Missing 'new' prefix when invoking a constructor.\"\r\n\t\t\t// See https://github.com/jshint/jshint/issues/392\r\n\t\t\tarr = Object(this);\r\n\t\t\tlen = arr.length >>> 0;\r\n\t\t\targs = arguments;\r\n\r\n\t\t\t// If no initialValue, use first item of array (we know length !== 0 here)\r\n\t\t\t// and adjust i to start at second item\r\n\t\t\tif(args.length <= 1) {\r\n\t\t\t\t// Skip to the first real element in the array\r\n\t\t\t\tfor(;;) {\r\n\t\t\t\t\tif(i in arr) {\r\n\t\t\t\t\t\treduced = arr[i++];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// If we reached the end of the array without finding any real\r\n\t\t\t\t\t// elements, it's a TypeError\r\n\t\t\t\t\tif(++i >= len) {\r\n\t\t\t\t\t\tthrow new TypeError();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// If initialValue provided, use it\r\n\t\t\t\treduced = args[1];\r\n\t\t\t}\r\n\r\n\t\t\t// Do the actual reduce\r\n\t\t\tfor(;i < len; ++i) {\r\n\t\t\t\t// Skip holes\r\n\t\t\t\tif(i in arr) {\r\n\t\t\t\t\treduced = reduceFunc(reduced, arr[i], i, arr);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn reduced;\r\n\t\t};\r\n\r\n\tfunction identity(x) {\r\n\t\treturn x;\r\n\t}\r\n\r\nexport default when;\r\n"],"names":[],"mappings":"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"}