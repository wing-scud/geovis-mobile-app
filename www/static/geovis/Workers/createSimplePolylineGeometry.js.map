{"version":3,"file":"createSimplePolylineGeometry.js","sources":["../../../../Source/Core/SimplePolylineGeometry.js","../../../../Source/WorkersES6/createSimplePolylineGeometry.js"],"sourcesContent":["import ArcType from './ArcType.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Color from './Color.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport PolylinePipeline from './PolylinePipeline.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\n\r\n    function interpolateColors(p0, p1, color0, color1, minDistance, array, offset) {\r\n        var numPoints = PolylinePipeline.numberOfPoints(p0, p1, minDistance);\r\n        var i;\r\n\r\n        var r0 = color0.red;\r\n        var g0 = color0.green;\r\n        var b0 = color0.blue;\r\n        var a0 = color0.alpha;\r\n\r\n        var r1 = color1.red;\r\n        var g1 = color1.green;\r\n        var b1 = color1.blue;\r\n        var a1 = color1.alpha;\r\n\r\n        if (Color.equals(color0, color1)) {\r\n            for (i = 0; i < numPoints; i++) {\r\n                array[offset++] = Color.floatToByte(r0);\r\n                array[offset++] = Color.floatToByte(g0);\r\n                array[offset++] = Color.floatToByte(b0);\r\n                array[offset++] = Color.floatToByte(a0);\r\n            }\r\n            return offset;\r\n        }\r\n\r\n        var redPerVertex = (r1 - r0) / numPoints;\r\n        var greenPerVertex = (g1 - g0) / numPoints;\r\n        var bluePerVertex = (b1 - b0) / numPoints;\r\n        var alphaPerVertex = (a1 - a0) / numPoints;\r\n\r\n        var index = offset;\r\n        for (i = 0; i < numPoints; i++) {\r\n            array[index++] = Color.floatToByte(r0 + i * redPerVertex);\r\n            array[index++] = Color.floatToByte(g0 + i * greenPerVertex);\r\n            array[index++] = Color.floatToByte(b0 + i * bluePerVertex);\r\n            array[index++] = Color.floatToByte(a0 + i * alphaPerVertex);\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * A description of a polyline modeled as a line strip; the first two positions define a line segment,\r\n     * and each additional position defines a line segment from the previous position.\r\n     *\r\n     * @alias SimplePolylineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of {@link Cartesian3} defining the positions in the polyline as a line strip.\r\n     * @param {Color[]} [options.colors] An Array of {@link Color} defining the per vertex or per segment colors.\r\n     * @param {Boolean} [options.colorsPerVertex=false] A boolean that determines whether the colors will be flat across each segment of the line or interpolated across the vertices.\r\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polyline segments must follow.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude if options.arcType is not ArcType.NONE. Determines the number of positions in the buffer.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     *\r\n     * @exception {DeveloperError} At least two positions are required.\r\n     * @exception {DeveloperError} colors has an invalid length.\r\n     *\r\n     * @see SimplePolylineGeometry#createGeometry\r\n     *\r\n     * @example\r\n     * // A polyline with two connected line segments\r\n     * var polyline = new Cesium.SimplePolylineGeometry({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n     *     0.0, 0.0,\r\n     *     5.0, 0.0,\r\n     *     5.0, 5.0\r\n     *   ])\r\n     * });\r\n     * var geometry = Cesium.SimplePolylineGeometry.createGeometry(polyline);\r\n     */\r\n    function SimplePolylineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var positions = options.positions;\r\n        var colors = options.colors;\r\n        var colorsPerVertex = defaultValue(options.colorsPerVertex, false);\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if ((!defined(positions)) || (positions.length < 2)) {\r\n            throw new DeveloperError('At least two positions are required.');\r\n        }\r\n        if (defined(colors) && ((colorsPerVertex && colors.length < positions.length) || (!colorsPerVertex && colors.length < positions.length - 1))) {\r\n            throw new DeveloperError('colors has an invalid length.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        this._positions = positions;\r\n        this._colors = colors;\r\n        this._colorsPerVertex = colorsPerVertex;\r\n\r\n        this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\r\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        this._workerName = 'createSimplePolylineGeometry';\r\n\r\n        var numComponents = 1 + positions.length * Cartesian3.packedLength;\r\n        numComponents += defined(colors) ? 1 + colors.length * Color.packedLength : 1;\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = numComponents + Ellipsoid.packedLength + 3;\r\n    }\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {SimplePolylineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    SimplePolylineGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(value)) {\r\n            throw new DeveloperError('value is required');\r\n        }\r\n        if (!defined(array)) {\r\n            throw new DeveloperError('array is required');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var positions = value._positions;\r\n        var length = positions.length;\r\n        array[startingIndex++] = length;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            Cartesian3.pack(positions[i], array, startingIndex);\r\n        }\r\n\r\n        var colors = value._colors;\r\n        length = defined(colors) ? colors.length : 0.0;\r\n        array[startingIndex++] = length;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\r\n            Color.pack(colors[i], array, startingIndex);\r\n        }\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        array[startingIndex++] = value._colorsPerVertex ? 1.0 : 0.0;\r\n        array[startingIndex++] = value._arcType;\r\n        array[startingIndex]   = value._granularity;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {SimplePolylineGeometry} [result] The object into which to store the result.\r\n     * @returns {SimplePolylineGeometry} The modified result parameter or a new SimplePolylineGeometry instance if one was not provided.\r\n     */\r\n    SimplePolylineGeometry.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(array)) {\r\n            throw new DeveloperError('array is required');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var length = array[startingIndex++];\r\n        var positions = new Array(length);\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            positions[i] = Cartesian3.unpack(array, startingIndex);\r\n        }\r\n\r\n        length = array[startingIndex++];\r\n        var colors = length > 0 ? new Array(length) : undefined;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\r\n            colors[i] = Color.unpack(array, startingIndex);\r\n        }\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var colorsPerVertex = array[startingIndex++] === 1.0;\r\n        var arcType = array[startingIndex++];\r\n        var granularity = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            return new SimplePolylineGeometry({\r\n                positions : positions,\r\n                colors : colors,\r\n                ellipsoid : ellipsoid,\r\n                colorsPerVertex : colorsPerVertex,\r\n                arcType : arcType,\r\n                granularity : granularity\r\n            });\r\n        }\r\n\r\n        result._positions = positions;\r\n        result._colors = colors;\r\n        result._ellipsoid = ellipsoid;\r\n        result._colorsPerVertex = colorsPerVertex;\r\n        result._arcType = arcType;\r\n        result._granularity = granularity;\r\n\r\n        return result;\r\n    };\r\n\r\n    var scratchArray1 = new Array(2);\r\n    var scratchArray2 = new Array(2);\r\n    var generateArcOptionsScratch = {\r\n        positions : scratchArray1,\r\n        height: scratchArray2,\r\n        ellipsoid: undefined,\r\n        minDistance : undefined,\r\n        granularity : undefined\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a simple polyline, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {SimplePolylineGeometry} simplePolylineGeometry A description of the polyline.\r\n     * @returns {Geometry} The computed vertices and indices.\r\n     */\r\n    SimplePolylineGeometry.createGeometry = function(simplePolylineGeometry) {\r\n        var positions = simplePolylineGeometry._positions;\r\n        var colors = simplePolylineGeometry._colors;\r\n        var colorsPerVertex = simplePolylineGeometry._colorsPerVertex;\r\n        var arcType = simplePolylineGeometry._arcType;\r\n        var granularity = simplePolylineGeometry._granularity;\r\n        var ellipsoid = simplePolylineGeometry._ellipsoid;\r\n\r\n        var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n        var perSegmentColors = defined(colors) && !colorsPerVertex;\r\n\r\n        var i;\r\n        var length = positions.length;\r\n\r\n        var positionValues;\r\n        var numberOfPositions;\r\n        var colorValues;\r\n        var color;\r\n        var offset = 0;\r\n\r\n        if (arcType === ArcType.GEODESIC || arcType === ArcType.RHUMB) {\r\n            var subdivisionSize;\r\n            var numberOfPointsFunction;\r\n            var generateArcFunction;\r\n            if (arcType === ArcType.GEODESIC) {\r\n                subdivisionSize = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n                numberOfPointsFunction = PolylinePipeline.numberOfPoints;\r\n                generateArcFunction = PolylinePipeline.generateArc;\r\n            } else {\r\n                subdivisionSize = granularity;\r\n                numberOfPointsFunction = PolylinePipeline.numberOfPointsRhumbLine;\r\n                generateArcFunction = PolylinePipeline.generateRhumbArc;\r\n            }\r\n\r\n            var heights = PolylinePipeline.extractHeights(positions, ellipsoid);\r\n\r\n            var generateArcOptions = generateArcOptionsScratch;\r\n            if (arcType === ArcType.GEODESIC) {\r\n                generateArcOptions.minDistance = minDistance;\r\n            } else {\r\n                generateArcOptions.granularity = granularity;\r\n            }\r\n            generateArcOptions.ellipsoid = ellipsoid;\r\n\r\n            if (perSegmentColors) {\r\n                var positionCount = 0;\r\n                for (i = 0; i < length - 1; i++) {\r\n                    positionCount += numberOfPointsFunction(positions[i], positions[i+1], subdivisionSize) + 1;\r\n                }\r\n\r\n                positionValues = new Float64Array(positionCount * 3);\r\n                colorValues = new Uint8Array(positionCount * 4);\r\n\r\n                generateArcOptions.positions = scratchArray1;\r\n                generateArcOptions.height= scratchArray2;\r\n\r\n                var ci = 0;\r\n                for (i = 0; i < length - 1; ++i) {\r\n                    scratchArray1[0] = positions[i];\r\n                    scratchArray1[1] = positions[i + 1];\r\n\r\n                    scratchArray2[0] = heights[i];\r\n                    scratchArray2[1] = heights[i + 1];\r\n\r\n                    var pos = generateArcFunction(generateArcOptions);\r\n\r\n                    if (defined(colors)) {\r\n                        var segLen = pos.length / 3;\r\n                        color = colors[i];\r\n                        for(var k = 0; k < segLen; ++k) {\r\n                            colorValues[ci++] = Color.floatToByte(color.red);\r\n                            colorValues[ci++] = Color.floatToByte(color.green);\r\n                            colorValues[ci++] = Color.floatToByte(color.blue);\r\n                            colorValues[ci++] = Color.floatToByte(color.alpha);\r\n                        }\r\n                    }\r\n\r\n                    positionValues.set(pos, offset);\r\n                    offset += pos.length;\r\n                }\r\n            } else {\r\n                generateArcOptions.positions = positions;\r\n                generateArcOptions.height= heights;\r\n                positionValues = new Float64Array(generateArcFunction(generateArcOptions));\r\n\r\n                if (defined(colors)) {\r\n                    colorValues = new Uint8Array(positionValues.length / 3 * 4);\r\n\r\n                    for (i = 0; i < length - 1; ++i) {\r\n                        var p0 = positions[i];\r\n                        var p1 = positions[i + 1];\r\n                        var c0 = colors[i];\r\n                        var c1 = colors[i + 1];\r\n                        offset = interpolateColors(p0, p1, c0, c1, minDistance, colorValues, offset);\r\n                    }\r\n\r\n                    var lastColor = colors[length - 1];\r\n                    colorValues[offset++] = Color.floatToByte(lastColor.red);\r\n                    colorValues[offset++] = Color.floatToByte(lastColor.green);\r\n                    colorValues[offset++] = Color.floatToByte(lastColor.blue);\r\n                    colorValues[offset++] = Color.floatToByte(lastColor.alpha);\r\n                }\r\n            }\r\n        } else {\r\n            numberOfPositions = perSegmentColors ? length * 2 - 2 : length;\r\n            positionValues = new Float64Array(numberOfPositions * 3);\r\n            colorValues = defined(colors) ? new Uint8Array(numberOfPositions * 4) : undefined;\r\n\r\n            var positionIndex = 0;\r\n            var colorIndex = 0;\r\n\r\n            for (i = 0; i < length; ++i) {\r\n                var p = positions[i];\r\n\r\n                if (perSegmentColors && i > 0) {\r\n                    Cartesian3.pack(p, positionValues, positionIndex);\r\n                    positionIndex += 3;\r\n\r\n                    color = colors[i - 1];\r\n                    colorValues[colorIndex++] = Color.floatToByte(color.red);\r\n                    colorValues[colorIndex++] = Color.floatToByte(color.green);\r\n                    colorValues[colorIndex++] = Color.floatToByte(color.blue);\r\n                    colorValues[colorIndex++] = Color.floatToByte(color.alpha);\r\n                }\r\n\r\n                if (perSegmentColors && i === length - 1) {\r\n                    break;\r\n                }\r\n\r\n                Cartesian3.pack(p, positionValues, positionIndex);\r\n                positionIndex += 3;\r\n\r\n                if (defined(colors)) {\r\n                    color = colors[i];\r\n                    colorValues[colorIndex++] = Color.floatToByte(color.red);\r\n                    colorValues[colorIndex++] = Color.floatToByte(color.green);\r\n                    colorValues[colorIndex++] = Color.floatToByte(color.blue);\r\n                    colorValues[colorIndex++] = Color.floatToByte(color.alpha);\r\n                }\r\n            }\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : positionValues\r\n        });\r\n\r\n        if (defined(colors)) {\r\n            attributes.color = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 4,\r\n                values : colorValues,\r\n                normalize : true\r\n            });\r\n        }\r\n\r\n        numberOfPositions = positionValues.length / 3;\r\n        var numberOfIndices = (numberOfPositions - 1) * 2;\r\n        var indices = IndexDatatype.createTypedArray(numberOfPositions, numberOfIndices);\r\n\r\n        var index = 0;\r\n        for (i = 0; i < numberOfPositions - 1; ++i) {\r\n            indices[index++] = i;\r\n            indices[index++] = i + 1;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.LINES,\r\n            boundingSphere : BoundingSphere.fromPoints(positions)\r\n        });\r\n    };\r\nexport default SimplePolylineGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport SimplePolylineGeometry from '../Core/SimplePolylineGeometry.js';\r\n\r\n    function createSimplePolylineGeometry(simplePolylineGeometry, offset) {\r\n        if (defined(offset)) {\r\n            simplePolylineGeometry = SimplePolylineGeometry.unpack(simplePolylineGeometry, offset);\r\n        }\r\n        simplePolylineGeometry._ellipsoid = Ellipsoid.clone(simplePolylineGeometry._ellipsoid);\r\n        return SimplePolylineGeometry.createGeometry(simplePolylineGeometry);\r\n    }\r\nexport default createSimplePolylineGeometry;\r\n"],"names":["PolylinePipeline","Color","defaultValue","defined","DeveloperError","ArcType","CesiumMath","Ellipsoid","Cartesian3","GeometryAttributes","GeometryAttribute","ComponentDatatype","IndexDatatype","Geometry","PrimitiveType","BoundingSphere"],"mappings":"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"}