{"version":3,"file":"CylinderGeometry-016ce82a.js","sources":["../../../../Source/Core/CylinderGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport CylinderGeometryLibrary from './CylinderGeometryLibrary.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport VertexFormat from './VertexFormat.js';\r\n\r\n    var radiusScratch = new Cartesian2();\r\n    var normalScratch = new Cartesian3();\r\n    var bitangentScratch = new Cartesian3();\r\n    var tangentScratch = new Cartesian3();\r\n    var positionScratch = new Cartesian3();\r\n\r\n    /**\r\n     * A description of a cylinder.\r\n     *\r\n     * @alias CylinderGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Number} options.length The length of the cylinder.\r\n     * @param {Number} options.topRadius The radius of the top of the cylinder.\r\n     * @param {Number} options.bottomRadius The radius of the bottom of the cylinder.\r\n     * @param {Number} [options.slices=128] The number of edges around the perimeter of the cylinder.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     *\r\n     * @exception {DeveloperError} options.slices must be greater than or equal to 3.\r\n     *\r\n     * @see CylinderGeometry.createGeometry\r\n     *\r\n     * @example\r\n     * // create cylinder geometry\r\n     * var cylinder = new Cesium.CylinderGeometry({\r\n     *     length: 200000,\r\n     *     topRadius: 80000,\r\n     *     bottomRadius: 200000,\r\n     * });\r\n     * var geometry = Cesium.CylinderGeometry.createGeometry(cylinder);\r\n     */\r\n    function CylinderGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var length = options.length;\r\n        var topRadius = options.topRadius;\r\n        var bottomRadius = options.bottomRadius;\r\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n        var slices = defaultValue(options.slices, 128);\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(length)) {\r\n            throw new DeveloperError('options.length must be defined.');\r\n        }\r\n        if (!defined(topRadius)) {\r\n            throw new DeveloperError('options.topRadius must be defined.');\r\n        }\r\n        if (!defined(bottomRadius)) {\r\n            throw new DeveloperError('options.bottomRadius must be defined.');\r\n        }\r\n        if (slices < 3) {\r\n            throw new DeveloperError('options.slices must be greater than or equal to 3.');\r\n        }\r\n        if (defined(options.offsetAttribute) && options.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n            throw new DeveloperError('GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        this._length = length;\r\n        this._topRadius = topRadius;\r\n        this._bottomRadius = bottomRadius;\r\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n        this._slices = slices;\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._workerName = 'createCylinderGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    CylinderGeometry.packedLength = VertexFormat.packedLength + 5;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {CylinderGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    CylinderGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(value)) {\r\n            throw new DeveloperError('value is required');\r\n        }\r\n        if (!defined(array)) {\r\n            throw new DeveloperError('array is required');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        array[startingIndex++] = value._length;\r\n        array[startingIndex++] = value._topRadius;\r\n        array[startingIndex++] = value._bottomRadius;\r\n        array[startingIndex++] = value._slices;\r\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchVertexFormat = new VertexFormat();\r\n    var scratchOptions = {\r\n        vertexFormat : scratchVertexFormat,\r\n        length : undefined,\r\n        topRadius : undefined,\r\n        bottomRadius : undefined,\r\n        slices : undefined,\r\n        offsetAttribute : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {CylinderGeometry} [result] The object into which to store the result.\r\n     * @returns {CylinderGeometry} The modified result parameter or a new CylinderGeometry instance if one was not provided.\r\n     */\r\n    CylinderGeometry.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(array)) {\r\n            throw new DeveloperError('array is required');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        var length = array[startingIndex++];\r\n        var topRadius = array[startingIndex++];\r\n        var bottomRadius = array[startingIndex++];\r\n        var slices = array[startingIndex++];\r\n        var offsetAttribute = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.length = length;\r\n            scratchOptions.topRadius = topRadius;\r\n            scratchOptions.bottomRadius = bottomRadius;\r\n            scratchOptions.slices = slices;\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n            return new CylinderGeometry(scratchOptions);\r\n        }\r\n\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._length = length;\r\n        result._topRadius = topRadius;\r\n        result._bottomRadius = bottomRadius;\r\n        result._slices = slices;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a cylinder, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {CylinderGeometry} cylinderGeometry A description of the cylinder.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    CylinderGeometry.createGeometry = function(cylinderGeometry) {\r\n        var length = cylinderGeometry._length;\r\n        var topRadius = cylinderGeometry._topRadius;\r\n        var bottomRadius = cylinderGeometry._bottomRadius;\r\n        var vertexFormat = cylinderGeometry._vertexFormat;\r\n        var slices = cylinderGeometry._slices;\r\n\r\n        if ((length <= 0) || (topRadius < 0) || (bottomRadius < 0) || ((topRadius === 0) && (bottomRadius === 0))) {\r\n            return;\r\n        }\r\n\r\n        var twoSlices = slices + slices;\r\n        var threeSlices = slices + twoSlices;\r\n        var numVertices = twoSlices + twoSlices;\r\n\r\n        var positions = CylinderGeometryLibrary.computePositions(length, topRadius, bottomRadius, slices, true);\r\n\r\n        var st = (vertexFormat.st) ? new Float32Array(numVertices * 2) : undefined;\r\n        var str = (vertexFormat.st) ? new Float32Array(numVertices * 3) : undefined;\r\n        var normals = (vertexFormat.normal) ? new Float32Array(numVertices * 3) : undefined;\r\n        var tangents = (vertexFormat.tangent) ? new Float32Array(numVertices * 3) : undefined;\r\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(numVertices * 3) : undefined;\r\n\r\n        var i;\r\n        var computeNormal = (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent);\r\n\r\n        if (computeNormal) {\r\n            var computeTangent = (vertexFormat.tangent || vertexFormat.bitangent);\r\n\r\n            var normalIndex = 0;\r\n            var tangentIndex = 0;\r\n            var bitangentIndex = 0;\r\n\r\n            var theta = Math.atan2(bottomRadius - topRadius, length);\r\n            var normal = normalScratch;\r\n            normal.z = Math.sin(theta);\r\n            var normalScale = Math.cos(theta);\r\n            var tangent = tangentScratch;\r\n            var bitangent = bitangentScratch;\r\n\r\n            for (i = 0; i < slices; i++) {\r\n                var angle = i / slices * CesiumMath.TWO_PI;\r\n                var x = normalScale * Math.cos(angle);\r\n                var y = normalScale * Math.sin(angle);\r\n                if (computeNormal) {\r\n                    normal.x = x;\r\n                    normal.y = y;\r\n\r\n                    if (computeTangent) {\r\n                        tangent = Cartesian3.normalize(Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent), tangent);\r\n                    }\r\n\r\n                    if (vertexFormat.normal) {\r\n                        normals[normalIndex++] = normal.x;\r\n                        normals[normalIndex++] = normal.y;\r\n                        normals[normalIndex++] = normal.z;\r\n                        normals[normalIndex++] = normal.x;\r\n                        normals[normalIndex++] = normal.y;\r\n                        normals[normalIndex++] = normal.z;\r\n                    }\r\n\r\n                    if (vertexFormat.tangent) {\r\n                        tangents[tangentIndex++] = tangent.x;\r\n                        tangents[tangentIndex++] = tangent.y;\r\n                        tangents[tangentIndex++] = tangent.z;\r\n                        tangents[tangentIndex++] = tangent.x;\r\n                        tangents[tangentIndex++] = tangent.y;\r\n                        tangents[tangentIndex++] = tangent.z;\r\n                    }\r\n\r\n                    if (vertexFormat.bitangent) {\r\n                        bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\r\n                        bitangents[bitangentIndex++] = bitangent.x;\r\n                        bitangents[bitangentIndex++] = bitangent.y;\r\n                        bitangents[bitangentIndex++] = bitangent.z;\r\n                        bitangents[bitangentIndex++] = bitangent.x;\r\n                        bitangents[bitangentIndex++] = bitangent.y;\r\n                        bitangents[bitangentIndex++] = bitangent.z;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (i = 0; i < slices; i++) {\r\n                if (vertexFormat.normal) {\r\n                    normals[normalIndex++] = 0;\r\n                    normals[normalIndex++] = 0;\r\n                    normals[normalIndex++] = -1;\r\n                }\r\n                if (vertexFormat.tangent) {\r\n                    tangents[tangentIndex++] = 1;\r\n                    tangents[tangentIndex++] = 0;\r\n                    tangents[tangentIndex++] = 0;\r\n                }\r\n                if (vertexFormat.bitangent) {\r\n                    bitangents[bitangentIndex++] = 0;\r\n                    bitangents[bitangentIndex++] = -1;\r\n                    bitangents[bitangentIndex++] = 0;\r\n                }\r\n            }\r\n\r\n            for (i = 0; i < slices; i++) {\r\n                if (vertexFormat.normal) {\r\n                    normals[normalIndex++] = 0;\r\n                    normals[normalIndex++] = 0;\r\n                    normals[normalIndex++] = 1;\r\n                }\r\n                if (vertexFormat.tangent) {\r\n                    tangents[tangentIndex++] = 1;\r\n                    tangents[tangentIndex++] = 0;\r\n                    tangents[tangentIndex++] = 0;\r\n                }\r\n                if (vertexFormat.bitangent) {\r\n                    bitangents[bitangentIndex++] = 0;\r\n                    bitangents[bitangentIndex++] = 1;\r\n                    bitangents[bitangentIndex++] = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        var numIndices = 12 * slices - 12;\r\n        var indices = IndexDatatype.createTypedArray(numVertices, numIndices);\r\n        var index = 0;\r\n        var j = 0;\r\n        for (i = 0; i < slices - 1; i++) {\r\n            indices[index++] = j;\r\n            indices[index++] = j + 2;\r\n            indices[index++] = j + 3;\r\n\r\n            indices[index++] = j;\r\n            indices[index++] = j + 3;\r\n            indices[index++] = j + 1;\r\n\r\n            j += 2;\r\n        }\r\n\r\n        indices[index++] = twoSlices - 2;\r\n        indices[index++] = 0;\r\n        indices[index++] = 1;\r\n        indices[index++] = twoSlices - 2;\r\n        indices[index++] = 1;\r\n        indices[index++] = twoSlices - 1;\r\n\r\n        for (i = 1; i < slices - 1; i++) {\r\n            indices[index++] = twoSlices + i + 1;\r\n            indices[index++] = twoSlices + i;\r\n            indices[index++] = twoSlices;\r\n        }\r\n\r\n        for (i = 1; i < slices - 1; i++) {\r\n            indices[index++] = threeSlices;\r\n            indices[index++] = threeSlices + i;\r\n            indices[index++] = threeSlices + i + 1;\r\n        }\r\n\r\n        var textureCoordIndex = 0;\r\n        if (vertexFormat.st) {\r\n            var rad = Math.max(topRadius, bottomRadius);\r\n            for (i = 0; i < numVertices; i++) {\r\n                var position = Cartesian3.fromArray(positions, i * 3, positionScratch);\r\n                st[textureCoordIndex++] = (position.x + rad) / (2.0 * rad);\r\n                st[textureCoordIndex++] = (position.y + rad) / (2.0 * rad);\r\n            }\r\n        }\r\n\r\n        var strindex = 0;\r\n        if (vertexFormat.st) {\r\n            var rad = Math.max(topRadius, bottomRadius);\r\n            for (i = 0; i < numVertices; i++) {\r\n                var position = Cartesian3.fromArray(positions, i * 3, positionScratch);\r\n                str[strindex++] = (position.x + rad) / (2.0 * rad);\r\n                str[strindex++] = (position.y + rad) / (2.0 * rad);\r\n                str[strindex++] = (position.z) / (length);\r\n            }\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n        if (vertexFormat.position) {\r\n            attributes.position = new GeometryAttribute({\r\n                componentDatatype: ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute: 3,\r\n                values: positions\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.normal) {\r\n            attributes.normal = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : normals\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.tangent) {\r\n            attributes.tangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : tangents\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.bitangent) {\r\n            attributes.bitangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : bitangents\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.st) {\r\n            attributes.st = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                values : st\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.st) {\r\n            attributes.str = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : str\r\n            });\r\n        }\r\n\r\n        radiusScratch.x = length * 0.5;\r\n        radiusScratch.y = Math.max(bottomRadius, topRadius);\r\n\r\n        var boundingSphere = new BoundingSphere(Cartesian3.ZERO, Cartesian2.magnitude(radiusScratch));\r\n\r\n        if (defined(cylinderGeometry._offsetAttribute)) {\r\n            length = positions.length;\r\n            var applyOffset = new Uint8Array(length / 3);\r\n            var offsetValue = cylinderGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            arrayFill(applyOffset, offsetValue);\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.TRIANGLES,\r\n            boundingSphere : boundingSphere,\r\n            offsetAttribute : cylinderGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    var unitCylinderGeometry;\r\n\r\n    /**\r\n     * Returns the geometric representation of a unit cylinder, including its vertices, indices, and a bounding sphere.\r\n     * @returns {Geometry} The computed vertices and indices.\r\n     *\r\n     * @private\r\n     */\r\n    CylinderGeometry.getUnitCylinder = function() {\r\n        if (!defined(unitCylinderGeometry)) {\r\n            unitCylinderGeometry = CylinderGeometry.createGeometry(new CylinderGeometry({\r\n                topRadius : 1.0,\r\n                bottomRadius : 1.0,\r\n                length : 1.0,\r\n                vertexFormat : VertexFormat.POSITION_ONLY\r\n            }));\r\n        }\r\n        return unitCylinderGeometry;\r\n    };\r\nexport default CylinderGeometry;\r\n"],"names":["Cartesian2","Cartesian3","defaultValue","VertexFormat","defined","DeveloperError","GeometryOffsetAttribute","CylinderGeometryLibrary","CesiumMath","IndexDatatype","GeometryAttributes","GeometryAttribute","ComponentDatatype","BoundingSphere","arrayFill","Geometry","PrimitiveType"],"mappings":"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"}