{"version":3,"file":"decodeDraco.js","sources":["../../../../Source/WorkersES6/decodeDraco.js"],"sourcesContent":["/* global require */\r\nimport ComponentDatatype from '../Core/ComponentDatatype.js';\r\nimport defined from '../Core/defined.js';\r\nimport IndexDatatype from '../Core/IndexDatatype.js';\r\nimport RuntimeError from '../Core/RuntimeError.js';\r\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\r\n\r\n    var draco;\r\n\r\n    function decodeIndexArray(dracoGeometry, dracoDecoder) {\r\n        var numPoints = dracoGeometry.num_points();\r\n        var numFaces = dracoGeometry.num_faces();\r\n        var faceIndices = new draco.DracoInt32Array();\r\n        var numIndices = numFaces * 3;\r\n        var indexArray = IndexDatatype.createTypedArray(numPoints, numIndices);\r\n\r\n        var offset = 0;\r\n        for (var i = 0; i < numFaces; ++i) {\r\n            dracoDecoder.GetFaceFromMesh(dracoGeometry, i, faceIndices);\r\n\r\n            indexArray[offset + 0] = faceIndices.GetValue(0);\r\n            indexArray[offset + 1] = faceIndices.GetValue(1);\r\n            indexArray[offset + 2] = faceIndices.GetValue(2);\r\n            offset += 3;\r\n        }\r\n\r\n        draco.destroy(faceIndices);\r\n\r\n        return {\r\n            typedArray : indexArray,\r\n            numberOfIndices : numIndices\r\n        };\r\n    }\r\n\r\n    function decodeQuantizedDracoTypedArray(dracoGeometry, dracoDecoder, dracoAttribute, quantization, vertexArrayLength) {\r\n        var vertexArray;\r\n        var attributeData;\r\n        if (quantization.quantizationBits <= 8) {\r\n            attributeData = new draco.DracoUInt8Array();\r\n            vertexArray = new Uint8Array(vertexArrayLength);\r\n            dracoDecoder.GetAttributeUInt8ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n        } else {\r\n            attributeData = new draco.DracoUInt16Array();\r\n            vertexArray = new Uint16Array(vertexArrayLength);\r\n            dracoDecoder.GetAttributeUInt16ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n        }\r\n\r\n        for (var i = 0; i < vertexArrayLength; ++i) {\r\n            vertexArray[i] = attributeData.GetValue(i);\r\n        }\r\n\r\n        draco.destroy(attributeData);\r\n        return vertexArray;\r\n    }\r\n\r\n    function decodeDracoTypedArray(dracoGeometry, dracoDecoder, dracoAttribute, vertexArrayLength) {\r\n        var vertexArray;\r\n        var attributeData;\r\n\r\n        // Some attribute types are casted down to 32 bit since Draco only returns 32 bit values\r\n        switch (dracoAttribute.data_type()) {\r\n            case 1: case 11: // DT_INT8 or DT_BOOL\r\n                attributeData = new draco.DracoInt8Array();\r\n                vertexArray = new Int8Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeInt8ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 2: // DT_UINT8\r\n                attributeData = new draco.DracoUInt8Array();\r\n                vertexArray = new Uint8Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeUInt8ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 3: // DT_INT16\r\n                attributeData = new draco.DracoInt16Array();\r\n                vertexArray = new Int16Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeInt16ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 4: // DT_UINT16\r\n                attributeData = new draco.DracoUInt16Array();\r\n                vertexArray = new Uint16Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeUInt16ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 5: case 7: // DT_INT32 or DT_INT64\r\n                attributeData = new draco.DracoInt32Array();\r\n                vertexArray = new Int32Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeInt32ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 6: case 8: // DT_UINT32 or DT_UINT64\r\n                attributeData = new draco.DracoUInt32Array();\r\n                vertexArray = new Uint32Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeUInt32ForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n            case 9: case 10: // DT_FLOAT32 or DT_FLOAT64\r\n                attributeData = new draco.DracoFloat32Array();\r\n                vertexArray = new Float32Array(vertexArrayLength);\r\n                dracoDecoder.GetAttributeFloatForAllPoints(dracoGeometry, dracoAttribute, attributeData);\r\n                break;\r\n        }\r\n\r\n        for (var i = 0; i < vertexArrayLength; ++i) {\r\n            vertexArray[i] = attributeData.GetValue(i);\r\n        }\r\n\r\n        draco.destroy(attributeData);\r\n        return vertexArray;\r\n    }\r\n\r\n    function decodeAttribute(dracoGeometry, dracoDecoder, dracoAttribute) {\r\n        var numPoints = dracoGeometry.num_points();\r\n        var numComponents = dracoAttribute.num_components();\r\n\r\n        var quantization;\r\n        var transform = new draco.AttributeQuantizationTransform();\r\n        if (transform.InitFromAttribute(dracoAttribute)) {\r\n            var minValues = new Array(numComponents);\r\n            for (var i = 0; i < numComponents; ++i) {\r\n                minValues[i] = transform.min_value(i);\r\n            }\r\n            quantization = {\r\n                quantizationBits : transform.quantization_bits(),\r\n                minValues : minValues,\r\n                range : transform.range(),\r\n                octEncoded : false\r\n            };\r\n        }\r\n        draco.destroy(transform);\r\n\r\n        transform = new draco.AttributeOctahedronTransform();\r\n        if (transform.InitFromAttribute(dracoAttribute)) {\r\n            quantization = {\r\n                quantizationBits : transform.quantization_bits(),\r\n                octEncoded : true\r\n            };\r\n        }\r\n        draco.destroy(transform);\r\n\r\n        var vertexArrayLength = numPoints * numComponents;\r\n        var vertexArray;\r\n        if (defined(quantization)) {\r\n            vertexArray = decodeQuantizedDracoTypedArray(dracoGeometry, dracoDecoder, dracoAttribute, quantization, vertexArrayLength);\r\n        } else {\r\n            vertexArray = decodeDracoTypedArray(dracoGeometry, dracoDecoder, dracoAttribute, vertexArrayLength);\r\n        }\r\n\r\n        var componentDatatype = ComponentDatatype.fromTypedArray(vertexArray);\r\n\r\n        return {\r\n            array : vertexArray,\r\n            data : {\r\n                componentsPerAttribute : numComponents,\r\n                componentDatatype : componentDatatype,\r\n                byteOffset : dracoAttribute.byte_offset(),\r\n                byteStride : ComponentDatatype.getSizeInBytes(componentDatatype) * numComponents,\r\n                normalized : dracoAttribute.normalized(),\r\n                quantization : quantization\r\n            }\r\n        };\r\n    }\r\n\r\n    function decodePointCloud(parameters) {\r\n        var dracoDecoder = new draco.Decoder();\r\n\r\n        if (parameters.dequantizeInShader) {\r\n            dracoDecoder.SkipAttributeTransform(draco.POSITION);\r\n            dracoDecoder.SkipAttributeTransform(draco.NORMAL);\r\n        }\r\n\r\n        var buffer = new draco.DecoderBuffer();\r\n        buffer.Init(parameters.buffer, parameters.buffer.length);\r\n\r\n        var geometryType = dracoDecoder.GetEncodedGeometryType(buffer);\r\n        if (geometryType !== draco.POINT_CLOUD) {\r\n            throw new RuntimeError('Draco geometry type must be POINT_CLOUD.');\r\n        }\r\n\r\n        var dracoPointCloud = new draco.PointCloud();\r\n        var decodingStatus = dracoDecoder.DecodeBufferToPointCloud(buffer, dracoPointCloud);\r\n        if (!decodingStatus.ok() || dracoPointCloud.ptr === 0) {\r\n            throw new RuntimeError('Error decoding draco point cloud: ' + decodingStatus.error_msg());\r\n        }\r\n\r\n        draco.destroy(buffer);\r\n\r\n        var result = {};\r\n\r\n        var properties = parameters.properties;\r\n        for (var propertyName in properties) {\r\n            if (properties.hasOwnProperty(propertyName)) {\r\n                var attributeId = properties[propertyName];\r\n                var dracoAttribute = dracoDecoder.GetAttributeByUniqueId(dracoPointCloud, attributeId);\r\n                result[propertyName] = decodeAttribute(dracoPointCloud, dracoDecoder, dracoAttribute);\r\n            }\r\n        }\r\n\r\n        draco.destroy(dracoPointCloud);\r\n        draco.destroy(dracoDecoder);\r\n\r\n        return result;\r\n    }\r\n\r\n    function decodePrimitive(parameters) {\r\n        var dracoDecoder = new draco.Decoder();\r\n\r\n        // Skip all parameter types except generic\r\n        var attributesToSkip = ['POSITION', 'NORMAL', 'COLOR', 'TEX_COORD'];\r\n        if (parameters.dequantizeInShader) {\r\n            for (var i = 0; i < attributesToSkip.length; ++i) {\r\n                dracoDecoder.SkipAttributeTransform(draco[attributesToSkip[i]]);\r\n            }\r\n        }\r\n\r\n        var bufferView = parameters.bufferView;\r\n        var buffer = new draco.DecoderBuffer();\r\n        buffer.Init(parameters.array, bufferView.byteLength);\r\n\r\n        var geometryType = dracoDecoder.GetEncodedGeometryType(buffer);\r\n        if (geometryType !== draco.TRIANGULAR_MESH) {\r\n            throw new RuntimeError('Unsupported draco mesh geometry type.');\r\n        }\r\n\r\n        var dracoGeometry = new draco.Mesh();\r\n        var decodingStatus = dracoDecoder.DecodeBufferToMesh(buffer, dracoGeometry);\r\n        if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\r\n            throw new RuntimeError('Error decoding draco mesh geometry: ' + decodingStatus.error_msg());\r\n        }\r\n\r\n        draco.destroy(buffer);\r\n\r\n        var attributeData = {};\r\n\r\n        var compressedAttributes = parameters.compressedAttributes;\r\n        for (var attributeName in compressedAttributes) {\r\n            if (compressedAttributes.hasOwnProperty(attributeName)) {\r\n                var compressedAttribute = compressedAttributes[attributeName];\r\n                var dracoAttribute = dracoDecoder.GetAttributeByUniqueId(dracoGeometry, compressedAttribute);\r\n                attributeData[attributeName] = decodeAttribute(dracoGeometry, dracoDecoder, dracoAttribute);\r\n            }\r\n        }\r\n\r\n        var result = {\r\n            indexArray : decodeIndexArray(dracoGeometry, dracoDecoder),\r\n            attributeData : attributeData\r\n        };\r\n\r\n        draco.destroy(dracoGeometry);\r\n        draco.destroy(dracoDecoder);\r\n\r\n        return result;\r\n    }\r\n\r\n    function decode(parameters) {\r\n        if (defined(parameters.primitive)) {\r\n            return decodePrimitive(parameters);\r\n        }\r\n        return decodePointCloud(parameters);\r\n    }\r\n\r\n    function initWorker(dracoModule) {\r\n        draco = dracoModule;\r\n        self.onmessage = createTaskProcessorWorker(decode);\r\n        self.postMessage(true);\r\n    }\r\n\r\n    function decodeDraco(event) {\r\n        var data = event.data;\r\n\r\n        // Expect the first message to be to load a web assembly module\r\n        var wasmConfig = data.webAssemblyConfig;\r\n        if (defined(wasmConfig)) {\r\n            // Require and compile WebAssembly module, or use fallback if not supported\r\n            return require([wasmConfig.modulePath], function(dracoModule) {\r\n                if (defined(wasmConfig.wasmBinaryFile)) {\r\n                    if (!defined(dracoModule)) {\r\n                        dracoModule = self.DracoDecoderModule;\r\n                    }\r\n\r\n                    dracoModule(wasmConfig).then(function (compiledModule) {\r\n                        initWorker(compiledModule);\r\n                    });\r\n                } else {\r\n                    initWorker(dracoModule());\r\n                }\r\n            });\r\n        }\r\n    }\r\nexport default decodeDraco;\r\n"],"names":["IndexDatatype","defined","ComponentDatatype","RuntimeError"],"mappings":"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"}