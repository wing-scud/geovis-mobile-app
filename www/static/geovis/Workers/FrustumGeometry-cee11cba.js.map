{"version":3,"file":"FrustumGeometry-cee11cba.js","sources":["../../../../Source/Core/CullingVolume.js","../../../../Source/Core/OrthographicOffCenterFrustum.js","../../../../Source/Core/OrthographicFrustum.js","../../../../Source/Core/PerspectiveOffCenterFrustum.js","../../../../Source/Core/PerspectiveFrustum.js","../../../../Source/Core/FrustumGeometry.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\r\nimport Cartesian4 from './Cartesian4.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Intersect from './Intersect.js';\r\nimport Plane from './Plane.js';\r\n\r\n    /**\r\n     * The culling volume defined by planes.\r\n     *\r\n     * @alias CullingVolume\r\n     * @constructor\r\n     *\r\n     * @param {Cartesian4[]} [planes] An array of clipping planes.\r\n     */\r\n    function CullingVolume(planes) {\r\n        /**\r\n         * Each plane is represented by a Cartesian4 object, where the x, y, and z components\r\n         * define the unit vector normal to the plane, and the w component is the distance of the\r\n         * plane from the origin.\r\n         * @type {Cartesian4[]}\r\n         * @default []\r\n         */\r\n        this.planes = defaultValue(planes, []);\r\n    }\r\n\r\n    var faces = [new Cartesian3(), new Cartesian3(), new Cartesian3()];\r\n    Cartesian3.clone(Cartesian3.UNIT_X, faces[0]);\r\n    Cartesian3.clone(Cartesian3.UNIT_Y, faces[1]);\r\n    Cartesian3.clone(Cartesian3.UNIT_Z, faces[2]);\r\n\r\n    var scratchPlaneCenter = new Cartesian3();\r\n    var scratchPlaneNormal = new Cartesian3();\r\n    var scratchPlane = new Plane(new Cartesian3(1.0, 0.0, 0.0), 0.0);\r\n\r\n    /**\r\n     * Constructs a culling volume from a bounding sphere. Creates six planes that create a box containing the sphere.\r\n     * The planes are aligned to the x, y, and z axes in world coordinates.\r\n     *\r\n     * @param {BoundingSphere} boundingSphere The bounding sphere used to create the culling volume.\r\n     * @param {CullingVolume} [result] The object onto which to store the result.\r\n     * @returns {CullingVolume} The culling volume created from the bounding sphere.\r\n     */\r\n    CullingVolume.fromBoundingSphere = function(boundingSphere, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(boundingSphere)) {\r\n            throw new DeveloperError('boundingSphere is required.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            result = new CullingVolume();\r\n        }\r\n\r\n        var length = faces.length;\r\n        var planes = result.planes;\r\n        planes.length = 2 * length;\r\n\r\n        var center = boundingSphere.center;\r\n        var radius = boundingSphere.radius;\r\n\r\n        var planeIndex = 0;\r\n\r\n        for (var i = 0; i < length; ++i) {\r\n            var faceNormal = faces[i];\r\n\r\n            var plane0 = planes[planeIndex];\r\n            var plane1 = planes[planeIndex + 1];\r\n\r\n            if (!defined(plane0)) {\r\n                plane0 = planes[planeIndex] = new Cartesian4();\r\n            }\r\n            if (!defined(plane1)) {\r\n                plane1 = planes[planeIndex + 1] = new Cartesian4();\r\n            }\r\n\r\n            Cartesian3.multiplyByScalar(faceNormal, -radius, scratchPlaneCenter);\r\n            Cartesian3.add(center, scratchPlaneCenter, scratchPlaneCenter);\r\n\r\n            plane0.x = faceNormal.x;\r\n            plane0.y = faceNormal.y;\r\n            plane0.z = faceNormal.z;\r\n            plane0.w = -Cartesian3.dot(faceNormal, scratchPlaneCenter);\r\n\r\n            Cartesian3.multiplyByScalar(faceNormal, radius, scratchPlaneCenter);\r\n            Cartesian3.add(center, scratchPlaneCenter, scratchPlaneCenter);\r\n\r\n            plane1.x = -faceNormal.x;\r\n            plane1.y = -faceNormal.y;\r\n            plane1.z = -faceNormal.z;\r\n            plane1.w = -Cartesian3.dot(Cartesian3.negate(faceNormal, scratchPlaneNormal), scratchPlaneCenter);\r\n\r\n            planeIndex += 2;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Determines whether a bounding volume intersects the culling volume.\r\n     *\r\n     * @param {Object} boundingVolume The bounding volume whose intersection with the culling volume is to be tested.\r\n     * @returns {Intersect}  Intersect.OUTSIDE, Intersect.INTERSECTING, or Intersect.INSIDE.\r\n     */\r\n    CullingVolume.prototype.computeVisibility = function(boundingVolume) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(boundingVolume)) {\r\n            throw new DeveloperError('boundingVolume is required.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var planes = this.planes;\r\n        var intersecting = false;\r\n        for (var k = 0, len = planes.length; k < len; ++k) {\r\n            var result = boundingVolume.intersectPlane(Plane.fromCartesian4(planes[k], scratchPlane));\r\n            if (result === Intersect.OUTSIDE) {\r\n                return Intersect.OUTSIDE;\r\n            } else if (result === Intersect.INTERSECTING) {\r\n                intersecting = true;\r\n            }\r\n        }\r\n\r\n        return intersecting ? Intersect.INTERSECTING : Intersect.INSIDE;\r\n    };\r\n\r\n    /**\r\n     * Determines whether a bounding volume intersects the culling volume.\r\n     *\r\n     * @param {Object} boundingVolume The bounding volume whose intersection with the culling volume is to be tested.\r\n     * @param {Number} parentPlaneMask A bit mask from the boundingVolume's parent's check against the same culling\r\n     *                                 volume, such that if (planeMask & (1 << planeIndex) === 0), for k < 31, then\r\n     *                                 the parent (and therefore this) volume is completely inside plane[planeIndex]\r\n     *                                 and that plane check can be skipped.\r\n     * @returns {Number} A plane mask as described above (which can be applied to this boundingVolume's children).\r\n     *\r\n     * @private\r\n     */\r\n    CullingVolume.prototype.computeVisibilityWithPlaneMask = function(boundingVolume, parentPlaneMask) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(boundingVolume)) {\r\n            throw new DeveloperError('boundingVolume is required.');\r\n        }\r\n        if (!defined(parentPlaneMask)) {\r\n            throw new DeveloperError('parentPlaneMask is required.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        if (parentPlaneMask === CullingVolume.MASK_OUTSIDE || parentPlaneMask === CullingVolume.MASK_INSIDE) {\r\n            // parent is completely outside or completely inside, so this child is as well.\r\n            return parentPlaneMask;\r\n        }\r\n\r\n        // Start with MASK_INSIDE (all zeros) so that after the loop, the return value can be compared with MASK_INSIDE.\r\n        // (Because if there are fewer than 31 planes, the upper bits wont be changed.)\r\n        var mask = CullingVolume.MASK_INSIDE;\r\n\r\n        var planes = this.planes;\r\n        for (var k = 0, len = planes.length; k < len; ++k) {\r\n            // For k greater than 31 (since 31 is the maximum number of INSIDE/INTERSECTING bits we can store), skip the optimization.\r\n            var flag = (k < 31) ? (1 << k) : 0;\r\n            if (k < 31 && (parentPlaneMask & flag) === 0) {\r\n                // boundingVolume is known to be INSIDE this plane.\r\n                continue;\r\n            }\r\n\r\n            var result = boundingVolume.intersectPlane(Plane.fromCartesian4(planes[k], scratchPlane));\r\n            if (result === Intersect.OUTSIDE) {\r\n                return CullingVolume.MASK_OUTSIDE;\r\n            } else if (result === Intersect.INTERSECTING) {\r\n                mask |= flag;\r\n            }\r\n        }\r\n\r\n        return mask;\r\n    };\r\n\r\n    /**\r\n     * For plane masks (as used in {@link CullingVolume#computeVisibilityWithPlaneMask}), this special value\r\n     * represents the case where the object bounding volume is entirely outside the culling volume.\r\n     *\r\n     * @type {Number}\r\n     * @private\r\n     */\r\n    CullingVolume.MASK_OUTSIDE = 0xffffffff;\r\n\r\n    /**\r\n     * For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value\r\n     * represents the case where the object bounding volume is entirely inside the culling volume.\r\n     *\r\n     * @type {Number}\r\n     * @private\r\n     */\r\n    CullingVolume.MASK_INSIDE = 0x00000000;\r\n\r\n    /**\r\n     * For plane masks (as used in {@link CullingVolume.prototype.computeVisibilityWithPlaneMask}), this value\r\n     * represents the case where the object bounding volume (may) intersect all planes of the culling volume.\r\n     *\r\n     * @type {Number}\r\n     * @private\r\n     */\r\n    CullingVolume.MASK_INDETERMINATE = 0x7fffffff;\r\nexport default CullingVolume;\r\n","import Cartesian3 from './Cartesian3.js';\r\nimport Cartesian4 from './Cartesian4.js';\r\nimport CullingVolume from './CullingVolume.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix4 from './Matrix4.js';\r\n\r\n    /**\r\n     * The viewing frustum is defined by 6 planes.\r\n     * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\r\n     * define the unit vector normal to the plane, and the w component is the distance of the\r\n     * plane from the origin/camera position.\r\n     *\r\n     * @alias OrthographicOffCenterFrustum\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] An object with the following properties:\r\n     * @param {Number} [options.left] The left clipping plane distance.\r\n     * @param {Number} [options.right] The right clipping plane distance.\r\n     * @param {Number} [options.top] The top clipping plane distance.\r\n     * @param {Number} [options.bottom] The bottom clipping plane distance.\r\n     * @param {Number} [options.near=1.0] The near clipping plane distance.\r\n     * @param {Number} [options.far=500000000.0] The far clipping plane distance.\r\n     *\r\n     * @example\r\n     * var maxRadii = ellipsoid.maximumRadius;\r\n     *\r\n     * var frustum = new Cesium.OrthographicOffCenterFrustum();\r\n     * frustum.right = maxRadii * Cesium.Math.PI;\r\n     * frustum.left = -c.frustum.right;\r\n     * frustum.top = c.frustum.right * (canvas.clientHeight / canvas.clientWidth);\r\n     * frustum.bottom = -c.frustum.top;\r\n     * frustum.near = 0.01 * maxRadii;\r\n     * frustum.far = 50.0 * maxRadii;\r\n     */\r\n    function OrthographicOffCenterFrustum(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        /**\r\n         * The left clipping plane.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.left = options.left;\r\n        this._left = undefined;\r\n\r\n        /**\r\n         * The right clipping plane.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.right = options.right;\r\n        this._right = undefined;\r\n\r\n        /**\r\n         * The top clipping plane.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.top = options.top;\r\n        this._top = undefined;\r\n\r\n        /**\r\n         * The bottom clipping plane.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.bottom = options.bottom;\r\n        this._bottom = undefined;\r\n\r\n        /**\r\n         * The distance of the near plane.\r\n         * @type {Number}\r\n         * @default 1.0\r\n         */\r\n        this.near = defaultValue(options.near, 1.0);\r\n        this._near = this.near;\r\n\r\n        /**\r\n         * The distance of the far plane.\r\n         * @type {Number}\r\n         * @default 500000000.0;\r\n         */\r\n        this.far = defaultValue(options.far, 500000000.0);\r\n        this._far = this.far;\r\n\r\n        this._cullingVolume = new CullingVolume();\r\n        this._orthographicMatrix = new Matrix4();\r\n    }\r\n\r\n    function update(frustum) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(frustum.right) || !defined(frustum.left) ||\r\n            !defined(frustum.top) || !defined(frustum.bottom) ||\r\n            !defined(frustum.near) || !defined(frustum.far)) {\r\n            throw new DeveloperError('right, left, top, bottom, near, or far parameters are not set.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        if (frustum.top !== frustum._top || frustum.bottom !== frustum._bottom ||\r\n            frustum.left !== frustum._left || frustum.right !== frustum._right ||\r\n            frustum.near !== frustum._near || frustum.far !== frustum._far) {\r\n\r\n            //>>includeStart('debug', pragmas.debug);\r\n            if (frustum.left > frustum.right) {\r\n                throw new DeveloperError('right must be greater than left.');\r\n            }\r\n            if (frustum.bottom > frustum.top) {\r\n                throw new DeveloperError('top must be greater than bottom.');\r\n            }\r\n            if (frustum.near <= 0 || frustum.near > frustum.far) {\r\n                throw new DeveloperError('near must be greater than zero and less than far.');\r\n            }\r\n            //>>includeEnd('debug');\r\n\r\n            frustum._left = frustum.left;\r\n            frustum._right = frustum.right;\r\n            frustum._top = frustum.top;\r\n            frustum._bottom = frustum.bottom;\r\n            frustum._near = frustum.near;\r\n            frustum._far = frustum.far;\r\n            frustum._orthographicMatrix = Matrix4.computeOrthographicOffCenter(frustum.left, frustum.right, frustum.bottom, frustum.top, frustum.near, frustum.far, frustum._orthographicMatrix);\r\n        }\r\n    }\r\n\r\n    Object.defineProperties(OrthographicOffCenterFrustum.prototype, {\r\n        /**\r\n         * Gets the orthographic projection matrix computed from the view frustum.\r\n         * @memberof OrthographicOffCenterFrustum.prototype\r\n         * @type {Matrix4}\r\n         * @readonly\r\n         */\r\n        projectionMatrix : {\r\n            get : function() {\r\n                update(this);\r\n                return this._orthographicMatrix;\r\n            }\r\n        }\r\n    });\r\n\r\n    var getPlanesRight = new Cartesian3();\r\n    var getPlanesNearCenter = new Cartesian3();\r\n    var getPlanesPoint = new Cartesian3();\r\n    var negateScratch = new Cartesian3();\r\n\r\n    /**\r\n     * Creates a culling volume for this frustum.\r\n     *\r\n     * @param {Cartesian3} position The eye position.\r\n     * @param {Cartesian3} direction The view direction.\r\n     * @param {Cartesian3} up The up direction.\r\n     * @returns {CullingVolume} A culling volume at the given position and orientation.\r\n     *\r\n     * @example\r\n     * // Check if a bounding volume intersects the frustum.\r\n     * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\r\n     * var intersect = cullingVolume.computeVisibility(boundingVolume);\r\n     */\r\n    OrthographicOffCenterFrustum.prototype.computeCullingVolume = function(position, direction, up) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(position)) {\r\n            throw new DeveloperError('position is required.');\r\n        }\r\n        if (!defined(direction)) {\r\n            throw new DeveloperError('direction is required.');\r\n        }\r\n        if (!defined(up)) {\r\n            throw new DeveloperError('up is required.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var planes = this._cullingVolume.planes;\r\n        var t = this.top;\r\n        var b = this.bottom;\r\n        var r = this.right;\r\n        var l = this.left;\r\n        var n = this.near;\r\n        var f = this.far;\r\n\r\n        var right = Cartesian3.cross(direction, up, getPlanesRight);\r\n        Cartesian3.normalize(right, right);\r\n        var nearCenter = getPlanesNearCenter;\r\n        Cartesian3.multiplyByScalar(direction, n, nearCenter);\r\n        Cartesian3.add(position, nearCenter, nearCenter);\r\n\r\n        var point = getPlanesPoint;\r\n\r\n        // Left plane\r\n        Cartesian3.multiplyByScalar(right, l, point);\r\n        Cartesian3.add(nearCenter, point, point);\r\n\r\n        var plane = planes[0];\r\n        if (!defined(plane)) {\r\n            plane = planes[0] = new Cartesian4();\r\n        }\r\n        plane.x = right.x;\r\n        plane.y = right.y;\r\n        plane.z = right.z;\r\n        plane.w = -Cartesian3.dot(right, point);\r\n\r\n        // Right plane\r\n        Cartesian3.multiplyByScalar(right, r, point);\r\n        Cartesian3.add(nearCenter, point, point);\r\n\r\n        plane = planes[1];\r\n        if (!defined(plane)) {\r\n            plane = planes[1] = new Cartesian4();\r\n        }\r\n        plane.x = -right.x;\r\n        plane.y = -right.y;\r\n        plane.z = -right.z;\r\n        plane.w = -Cartesian3.dot(Cartesian3.negate(right, negateScratch), point);\r\n\r\n        // Bottom plane\r\n        Cartesian3.multiplyByScalar(up, b, point);\r\n        Cartesian3.add(nearCenter, point, point);\r\n\r\n        plane = planes[2];\r\n        if (!defined(plane)) {\r\n            plane = planes[2] = new Cartesian4();\r\n        }\r\n        plane.x = up.x;\r\n        plane.y = up.y;\r\n        plane.z = up.z;\r\n        plane.w = -Cartesian3.dot(up, point);\r\n\r\n        // Top plane\r\n        Cartesian3.multiplyByScalar(up, t, point);\r\n        Cartesian3.add(nearCenter, point, point);\r\n\r\n        plane = planes[3];\r\n        if (!defined(plane)) {\r\n            plane = planes[3] = new Cartesian4();\r\n        }\r\n        plane.x = -up.x;\r\n        plane.y = -up.y;\r\n        plane.z = -up.z;\r\n        plane.w = -Cartesian3.dot(Cartesian3.negate(up, negateScratch), point);\r\n\r\n        // Near plane\r\n        plane = planes[4];\r\n        if (!defined(plane)) {\r\n            plane = planes[4] = new Cartesian4();\r\n        }\r\n        plane.x = direction.x;\r\n        plane.y = direction.y;\r\n        plane.z = direction.z;\r\n        plane.w = -Cartesian3.dot(direction, nearCenter);\r\n\r\n        // Far plane\r\n        Cartesian3.multiplyByScalar(direction, f, point);\r\n        Cartesian3.add(position, point, point);\r\n\r\n        plane = planes[5];\r\n        if (!defined(plane)) {\r\n            plane = planes[5] = new Cartesian4();\r\n        }\r\n        plane.x = -direction.x;\r\n        plane.y = -direction.y;\r\n        plane.z = -direction.z;\r\n        plane.w = -Cartesian3.dot(Cartesian3.negate(direction, negateScratch), point);\r\n\r\n        return this._cullingVolume;\r\n    };\r\n\r\n    /**\r\n     * Returns the pixel's width and height in meters.\r\n     *\r\n     * @param {Number} drawingBufferWidth The width of the drawing buffer.\r\n     * @param {Number} drawingBufferHeight The height of the drawing buffer.\r\n     * @param {Number} distance The distance to the near plane in meters.\r\n     * @param {Number} pixelRatio The scaling factor from pixel space to coordinate space.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\r\n     *\r\n     * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\r\n     * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\r\n     * @exception {DeveloperError} pixelRatio must be greater than zero.\r\n     *\r\n     * @example\r\n     * // Example 1\r\n     * // Get the width and height of a pixel.\r\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 0.0, scene.pixelRatio, new Cesium.Cartesian2());\r\n     */\r\n    OrthographicOffCenterFrustum.prototype.getPixelDimensions = function(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {\r\n        update(this);\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(drawingBufferWidth) || !defined(drawingBufferHeight)) {\r\n            throw new DeveloperError('Both drawingBufferWidth and drawingBufferHeight are required.');\r\n        }\r\n        if (drawingBufferWidth <= 0) {\r\n            throw new DeveloperError('drawingBufferWidth must be greater than zero.');\r\n        }\r\n        if (drawingBufferHeight <= 0) {\r\n            throw new DeveloperError('drawingBufferHeight must be greater than zero.');\r\n        }\r\n        if (!defined(distance)) {\r\n            throw new DeveloperError('distance is required.');\r\n        }\r\n        if (!defined(pixelRatio)) {\r\n            throw new DeveloperError('pixelRatio is required.');\r\n        }\r\n        if (pixelRatio <= 0) {\r\n            throw new DeveloperError('pixelRatio must be greater than zero.');\r\n        }\r\n        if (!defined(result)) {\r\n            throw new DeveloperError('A result object is required.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var frustumWidth = this.right - this.left;\r\n        var frustumHeight = this.top - this.bottom;\r\n        var pixelWidth = pixelRatio * frustumWidth / drawingBufferWidth;\r\n        var pixelHeight = pixelRatio * frustumHeight / drawingBufferHeight;\r\n\r\n        result.x = pixelWidth;\r\n        result.y = pixelHeight;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns a duplicate of a OrthographicOffCenterFrustum instance.\r\n     *\r\n     * @param {OrthographicOffCenterFrustum} [result] The object onto which to store the result.\r\n     * @returns {OrthographicOffCenterFrustum} The modified result parameter or a new OrthographicOffCenterFrustum instance if one was not provided.\r\n     */\r\n    OrthographicOffCenterFrustum.prototype.clone = function(result) {\r\n        if (!defined(result)) {\r\n            result = new OrthographicOffCenterFrustum();\r\n        }\r\n\r\n        result.left = this.left;\r\n        result.right = this.right;\r\n        result.top = this.top;\r\n        result.bottom = this.bottom;\r\n        result.near = this.near;\r\n        result.far = this.far;\r\n\r\n        // force update of clone to compute matrices\r\n        result._left = undefined;\r\n        result._right = undefined;\r\n        result._top = undefined;\r\n        result._bottom = undefined;\r\n        result._near = undefined;\r\n        result._far = undefined;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided OrthographicOffCenterFrustum componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {OrthographicOffCenterFrustum} [other] The right hand side OrthographicOffCenterFrustum.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    OrthographicOffCenterFrustum.prototype.equals = function(other) {\r\n        return (defined(other) && other instanceof OrthographicOffCenterFrustum &&\r\n                this.right === other.right &&\r\n                this.left === other.left &&\r\n                this.top === other.top &&\r\n                this.bottom === other.bottom &&\r\n                this.near === other.near &&\r\n                this.far === other.far);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided OrthographicOffCenterFrustum componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {OrthographicOffCenterFrustum} other The right hand side OrthographicOffCenterFrustum.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    OrthographicOffCenterFrustum.prototype.equalsEpsilon = function(other, relativeEpsilon, absoluteEpsilon) {\r\n        return (other === this) ||\r\n               (defined(other) &&\r\n                other instanceof OrthographicOffCenterFrustum &&\r\n                CesiumMath.equalsEpsilon(this.right, other.right, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.left, other.left, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.top, other.top, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.bottom, other.bottom, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.near, other.near, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.far, other.far, relativeEpsilon, absoluteEpsilon));\r\n    };\r\nexport default OrthographicOffCenterFrustum;\r\n","import Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\nimport OrthographicOffCenterFrustum from './OrthographicOffCenterFrustum.js';\r\n\r\n    /**\r\n     * The viewing frustum is defined by 6 planes.\r\n     * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\r\n     * define the unit vector normal to the plane, and the w component is the distance of the\r\n     * plane from the origin/camera position.\r\n     *\r\n     * @alias OrthographicFrustum\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] An object with the following properties:\r\n     * @param {Number} [options.width] The width of the frustum in meters.\r\n     * @param {Number} [options.aspectRatio] The aspect ratio of the frustum's width to it's height.\r\n     * @param {Number} [options.near=1.0] The distance of the near plane.\r\n     * @param {Number} [options.far=500000000.0] The distance of the far plane.\r\n     *\r\n     * @example\r\n     * var maxRadii = ellipsoid.maximumRadius;\r\n     *\r\n     * var frustum = new Cesium.OrthographicFrustum();\r\n     * frustum.near = 0.01 * maxRadii;\r\n     * frustum.far = 50.0 * maxRadii;\r\n     */\r\n    function OrthographicFrustum(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        this._offCenterFrustum = new OrthographicOffCenterFrustum();\r\n\r\n        /**\r\n         * The horizontal width of the frustum in meters.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.width = options.width;\r\n        this._width = undefined;\r\n\r\n        /**\r\n         * The aspect ratio of the frustum's width to it's height.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.aspectRatio = options.aspectRatio;\r\n        this._aspectRatio = undefined;\r\n\r\n        /**\r\n         * The distance of the near plane.\r\n         * @type {Number}\r\n         * @default 1.0\r\n         */\r\n        this.near = defaultValue(options.near, 1.0);\r\n        this._near = this.near;\r\n\r\n        /**\r\n         * The distance of the far plane.\r\n         * @type {Number}\r\n         * @default 500000000.0;\r\n         */\r\n        this.far = defaultValue(options.far, 500000000.0);\r\n        this._far = this.far;\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    OrthographicFrustum.packedLength = 4;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {OrthographicFrustum} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    OrthographicFrustum.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value.width;\r\n        array[startingIndex++] = value.aspectRatio;\r\n        array[startingIndex++] = value.near;\r\n        array[startingIndex] = value.far;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {OrthographicFrustum} [result] The object into which to store the result.\r\n     * @returns {OrthographicFrustum} The modified result parameter or a new OrthographicFrustum instance if one was not provided.\r\n     */\r\n    OrthographicFrustum.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new OrthographicFrustum();\r\n        }\r\n\r\n        result.width = array[startingIndex++];\r\n        result.aspectRatio = array[startingIndex++];\r\n        result.near = array[startingIndex++];\r\n        result.far = array[startingIndex];\r\n\r\n        return result;\r\n    };\r\n\r\n    function update(frustum) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(frustum.width) || !defined(frustum.aspectRatio) || !defined(frustum.near) || !defined(frustum.far)) {\r\n            throw new DeveloperError('width, aspectRatio, near, or far parameters are not set.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var f = frustum._offCenterFrustum;\r\n\r\n        if (frustum.width !== frustum._width || frustum.aspectRatio !== frustum._aspectRatio ||\r\n            frustum.near !== frustum._near || frustum.far !== frustum._far) {\r\n            //>>includeStart('debug', pragmas.debug);\r\n            if (frustum.aspectRatio < 0) {\r\n                throw new DeveloperError('aspectRatio must be positive.');\r\n            }\r\n            if (frustum.near < 0 || frustum.near > frustum.far) {\r\n                throw new DeveloperError('near must be greater than zero and less than far.');\r\n            }\r\n            //>>includeEnd('debug');\r\n\r\n            frustum._aspectRatio = frustum.aspectRatio;\r\n            frustum._width = frustum.width;\r\n            frustum._near = frustum.near;\r\n            frustum._far = frustum.far;\r\n\r\n            var ratio = 1.0 / frustum.aspectRatio;\r\n            f.right = frustum.width * 0.5;\r\n            f.left = -f.right;\r\n            f.top = ratio * f.right;\r\n            f.bottom = -f.top;\r\n            f.near = frustum.near;\r\n            f.far = frustum.far;\r\n\r\n        }\r\n    }\r\n\r\n    Object.defineProperties(OrthographicFrustum.prototype, {\r\n        /**\r\n         * Gets the orthographic projection matrix computed from the view frustum.\r\n         * @memberof OrthographicFrustum.prototype\r\n         * @type {Matrix4}\r\n         * @readonly\r\n         */\r\n        projectionMatrix : {\r\n            get : function() {\r\n                update(this);\r\n                return this._offCenterFrustum.projectionMatrix;\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    /**\r\n     * Creates a culling volume for this frustum.\r\n     *\r\n     * @param {Cartesian3} position The eye position.\r\n     * @param {Cartesian3} direction The view direction.\r\n     * @param {Cartesian3} up The up direction.\r\n     * @returns {CullingVolume} A culling volume at the given position and orientation.\r\n     *\r\n     * @example\r\n     * // Check if a bounding volume intersects the frustum.\r\n     * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\r\n     * var intersect = cullingVolume.computeVisibility(boundingVolume);\r\n     */\r\n    OrthographicFrustum.prototype.computeCullingVolume = function(position, direction, up) {\r\n        update(this);\r\n        return this._offCenterFrustum.computeCullingVolume(position, direction, up);\r\n    };\r\n\r\n    /**\r\n     * Returns the pixel's width and height in meters.\r\n     *\r\n     * @param {Number} drawingBufferWidth The width of the drawing buffer.\r\n     * @param {Number} drawingBufferHeight The height of the drawing buffer.\r\n     * @param {Number} distance The distance to the near plane in meters.\r\n     * @param {Number} pixelRatio The scaling factor from pixel space to coordinate space.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\r\n     *\r\n     * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\r\n     * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\r\n     * @exception {DeveloperError} pixelRatio must be greater than zero.\r\n     *\r\n     * @example\r\n     * // Example 1\r\n     * // Get the width and height of a pixel.\r\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 0.0, scene.pixelRatio, new Cesium.Cartesian2());\r\n     */\r\n    OrthographicFrustum.prototype.getPixelDimensions = function(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {\r\n        update(this);\r\n        return this._offCenterFrustum.getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result);\r\n    };\r\n\r\n    /**\r\n     * Returns a duplicate of a OrthographicFrustum instance.\r\n     *\r\n     * @param {OrthographicFrustum} [result] The object onto which to store the result.\r\n     * @returns {OrthographicFrustum} The modified result parameter or a new OrthographicFrustum instance if one was not provided.\r\n     */\r\n    OrthographicFrustum.prototype.clone = function(result) {\r\n        if (!defined(result)) {\r\n            result = new OrthographicFrustum();\r\n        }\r\n\r\n        result.aspectRatio = this.aspectRatio;\r\n        result.width = this.width;\r\n        result.near = this.near;\r\n        result.far = this.far;\r\n\r\n        // force update of clone to compute matrices\r\n        result._aspectRatio = undefined;\r\n        result._width = undefined;\r\n        result._near = undefined;\r\n        result._far = undefined;\r\n\r\n        this._offCenterFrustum.clone(result._offCenterFrustum);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided OrthographicFrustum componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {OrthographicFrustum} [other] The right hand side OrthographicFrustum.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    OrthographicFrustum.prototype.equals = function(other) {\r\n        if (!defined(other) || !(other instanceof OrthographicFrustum)) {\r\n            return false;\r\n        }\r\n\r\n        update(this);\r\n        update(other);\r\n\r\n        return (this.width === other.width &&\r\n                this.aspectRatio === other.aspectRatio &&\r\n                this._offCenterFrustum.equals(other._offCenterFrustum));\r\n    };\r\n\r\n    /**\r\n     * Compares the provided OrthographicFrustum componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {OrthographicFrustum} other The right hand side OrthographicFrustum.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    OrthographicFrustum.prototype.equalsEpsilon = function(other, relativeEpsilon, absoluteEpsilon) {\r\n        if (!defined(other) || !(other instanceof OrthographicFrustum)) {\r\n            return false;\r\n        }\r\n\r\n        update(this);\r\n        update(other);\r\n\r\n        return (CesiumMath.equalsEpsilon(this.width, other.width, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.aspectRatio, other.aspectRatio, relativeEpsilon, absoluteEpsilon) &&\r\n                this._offCenterFrustum.equalsEpsilon(other._offCenterFrustum, relativeEpsilon, absoluteEpsilon));\r\n    };\r\nexport default OrthographicFrustum;\r\n","import Cartesian3 from './Cartesian3.js';\r\nimport Cartesian4 from './Cartesian4.js';\r\nimport CullingVolume from './CullingVolume.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix4 from './Matrix4.js';\r\n\r\n    /**\r\n     * The viewing frustum is defined by 6 planes.\r\n     * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\r\n     * define the unit vector normal to the plane, and the w component is the distance of the\r\n     * plane from the origin/camera position.\r\n     *\r\n     * @alias PerspectiveOffCenterFrustum\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] An object with the following properties:\r\n     * @param {Number} [options.left] The left clipping plane distance.\r\n     * @param {Number} [options.right] The right clipping plane distance.\r\n     * @param {Number} [options.top] The top clipping plane distance.\r\n     * @param {Number} [options.bottom] The bottom clipping plane distance.\r\n     * @param {Number} [options.near=1.0] The near clipping plane distance.\r\n     * @param {Number} [options.far=500000000.0] The far clipping plane distance.\r\n     *\r\n     * @example\r\n     * var frustum = new Cesium.PerspectiveOffCenterFrustum({\r\n     *     left : -1.0,\r\n     *     right : 1.0,\r\n     *     top : 1.0,\r\n     *     bottom : -1.0,\r\n     *     near : 1.0,\r\n     *     far : 100.0\r\n     * });\r\n     *\r\n     * @see PerspectiveFrustum\r\n     */\r\n    function PerspectiveOffCenterFrustum(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        /**\r\n         * Defines the left clipping plane.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.left = options.left;\r\n        this._left = undefined;\r\n\r\n        /**\r\n         * Defines the right clipping plane.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.right = options.right;\r\n        this._right = undefined;\r\n\r\n        /**\r\n         * Defines the top clipping plane.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.top = options.top;\r\n        this._top = undefined;\r\n\r\n        /**\r\n         * Defines the bottom clipping plane.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.bottom = options.bottom;\r\n        this._bottom = undefined;\r\n\r\n        /**\r\n         * The distance of the near plane.\r\n         * @type {Number}\r\n         * @default 1.0\r\n         */\r\n        this.near = defaultValue(options.near, 1.0);\r\n        this._near = this.near;\r\n\r\n        /**\r\n         * The distance of the far plane.\r\n         * @type {Number}\r\n         * @default 500000000.0\r\n         */\r\n        this.far = defaultValue(options.far, 500000000.0);\r\n        this._far = this.far;\r\n\r\n        this._cullingVolume = new CullingVolume();\r\n        this._perspectiveMatrix = new Matrix4();\r\n        this._infinitePerspective = new Matrix4();\r\n    }\r\n\r\n    function update(frustum) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(frustum.right) || !defined(frustum.left) ||\r\n            !defined(frustum.top) || !defined(frustum.bottom) ||\r\n            !defined(frustum.near) || !defined(frustum.far)) {\r\n            throw new DeveloperError('right, left, top, bottom, near, or far parameters are not set.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var t = frustum.top;\r\n        var b = frustum.bottom;\r\n        var r = frustum.right;\r\n        var l = frustum.left;\r\n        var n = frustum.near;\r\n        var f = frustum.far;\r\n\r\n        if (t !== frustum._top || b !== frustum._bottom ||\r\n            l !== frustum._left || r !== frustum._right ||\r\n            n !== frustum._near || f !== frustum._far) {\r\n\r\n            //>>includeStart('debug', pragmas.debug);\r\n            if (frustum.near <= 0 || frustum.near > frustum.far) {\r\n                throw new DeveloperError('near must be greater than zero and less than far.');\r\n            }\r\n            //>>includeEnd('debug');\r\n\r\n            frustum._left = l;\r\n            frustum._right = r;\r\n            frustum._top = t;\r\n            frustum._bottom = b;\r\n            frustum._near = n;\r\n            frustum._far = f;\r\n            frustum._perspectiveMatrix = Matrix4.computePerspectiveOffCenter(l, r, b, t, n, f, frustum._perspectiveMatrix);\r\n            frustum._infinitePerspective = Matrix4.computeInfinitePerspectiveOffCenter(l, r, b, t, n, frustum._infinitePerspective);\r\n        }\r\n    }\r\n\r\n    Object.defineProperties(PerspectiveOffCenterFrustum.prototype, {\r\n        /**\r\n         * Gets the perspective projection matrix computed from the view frustum.\r\n         * @memberof PerspectiveOffCenterFrustum.prototype\r\n         * @type {Matrix4}\r\n         * @readonly\r\n         *\r\n         * @see PerspectiveOffCenterFrustum#infiniteProjectionMatrix\r\n         */\r\n        projectionMatrix : {\r\n            get : function() {\r\n                update(this);\r\n                return this._perspectiveMatrix;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the perspective projection matrix computed from the view frustum with an infinite far plane.\r\n         * @memberof PerspectiveOffCenterFrustum.prototype\r\n         * @type {Matrix4}\r\n         * @readonly\r\n         *\r\n         * @see PerspectiveOffCenterFrustum#projectionMatrix\r\n         */\r\n        infiniteProjectionMatrix : {\r\n            get : function() {\r\n                update(this);\r\n                return this._infinitePerspective;\r\n            }\r\n        }\r\n    });\r\n\r\n    var getPlanesRight = new Cartesian3();\r\n    var getPlanesNearCenter = new Cartesian3();\r\n    var getPlanesFarCenter = new Cartesian3();\r\n    var getPlanesNormal = new Cartesian3();\r\n    /**\r\n     * Creates a culling volume for this frustum.\r\n     *\r\n     * @param {Cartesian3} position The eye position.\r\n     * @param {Cartesian3} direction The view direction.\r\n     * @param {Cartesian3} up The up direction.\r\n     * @returns {CullingVolume} A culling volume at the given position and orientation.\r\n     *\r\n     * @example\r\n     * // Check if a bounding volume intersects the frustum.\r\n     * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\r\n     * var intersect = cullingVolume.computeVisibility(boundingVolume);\r\n     */\r\n    PerspectiveOffCenterFrustum.prototype.computeCullingVolume = function(position, direction, up) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(position)) {\r\n            throw new DeveloperError('position is required.');\r\n        }\r\n\r\n        if (!defined(direction)) {\r\n            throw new DeveloperError('direction is required.');\r\n        }\r\n\r\n        if (!defined(up)) {\r\n            throw new DeveloperError('up is required.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var planes = this._cullingVolume.planes;\r\n\r\n        var t = this.top;\r\n        var b = this.bottom;\r\n        var r = this.right;\r\n        var l = this.left;\r\n        var n = this.near;\r\n        var f = this.far;\r\n\r\n        var right = Cartesian3.cross(direction, up, getPlanesRight);\r\n\r\n        var nearCenter = getPlanesNearCenter;\r\n        Cartesian3.multiplyByScalar(direction, n, nearCenter);\r\n        Cartesian3.add(position, nearCenter, nearCenter);\r\n\r\n        var farCenter = getPlanesFarCenter;\r\n        Cartesian3.multiplyByScalar(direction, f, farCenter);\r\n        Cartesian3.add(position, farCenter, farCenter);\r\n\r\n        var normal = getPlanesNormal;\r\n\r\n        //Left plane computation\r\n        Cartesian3.multiplyByScalar(right, l, normal);\r\n        Cartesian3.add(nearCenter, normal, normal);\r\n        Cartesian3.subtract(normal, position, normal);\r\n        Cartesian3.normalize(normal, normal);\r\n        Cartesian3.cross(normal, up, normal);\r\n        Cartesian3.normalize(normal, normal);\r\n\r\n        var plane = planes[0];\r\n        if (!defined(plane)) {\r\n            plane = planes[0] = new Cartesian4();\r\n        }\r\n        plane.x = normal.x;\r\n        plane.y = normal.y;\r\n        plane.z = normal.z;\r\n        plane.w = -Cartesian3.dot(normal, position);\r\n\r\n        //Right plane computation\r\n        Cartesian3.multiplyByScalar(right, r, normal);\r\n        Cartesian3.add(nearCenter, normal, normal);\r\n        Cartesian3.subtract(normal, position, normal);\r\n        Cartesian3.cross(up, normal, normal);\r\n        Cartesian3.normalize(normal, normal);\r\n\r\n        plane = planes[1];\r\n        if (!defined(plane)) {\r\n            plane = planes[1] = new Cartesian4();\r\n        }\r\n        plane.x = normal.x;\r\n        plane.y = normal.y;\r\n        plane.z = normal.z;\r\n        plane.w = -Cartesian3.dot(normal, position);\r\n\r\n        //Bottom plane computation\r\n        Cartesian3.multiplyByScalar(up, b, normal);\r\n        Cartesian3.add(nearCenter, normal, normal);\r\n        Cartesian3.subtract(normal, position, normal);\r\n        Cartesian3.cross(right, normal, normal);\r\n        Cartesian3.normalize(normal, normal);\r\n\r\n        plane = planes[2];\r\n        if (!defined(plane)) {\r\n            plane = planes[2] = new Cartesian4();\r\n        }\r\n        plane.x = normal.x;\r\n        plane.y = normal.y;\r\n        plane.z = normal.z;\r\n        plane.w = -Cartesian3.dot(normal, position);\r\n\r\n        //Top plane computation\r\n        Cartesian3.multiplyByScalar(up, t, normal);\r\n        Cartesian3.add(nearCenter, normal, normal);\r\n        Cartesian3.subtract(normal, position, normal);\r\n        Cartesian3.cross(normal, right, normal);\r\n        Cartesian3.normalize(normal, normal);\r\n\r\n        plane = planes[3];\r\n        if (!defined(plane)) {\r\n            plane = planes[3] = new Cartesian4();\r\n        }\r\n        plane.x = normal.x;\r\n        plane.y = normal.y;\r\n        plane.z = normal.z;\r\n        plane.w = -Cartesian3.dot(normal, position);\r\n\r\n        //Near plane computation\r\n        plane = planes[4];\r\n        if (!defined(plane)) {\r\n            plane = planes[4] = new Cartesian4();\r\n        }\r\n        plane.x = direction.x;\r\n        plane.y = direction.y;\r\n        plane.z = direction.z;\r\n        plane.w = -Cartesian3.dot(direction, nearCenter);\r\n\r\n        //Far plane computation\r\n        Cartesian3.negate(direction, normal);\r\n\r\n        plane = planes[5];\r\n        if (!defined(plane)) {\r\n            plane = planes[5] = new Cartesian4();\r\n        }\r\n        plane.x = normal.x;\r\n        plane.y = normal.y;\r\n        plane.z = normal.z;\r\n        plane.w = -Cartesian3.dot(normal, farCenter);\r\n\r\n        return this._cullingVolume;\r\n    };\r\n\r\n    /**\r\n     * Returns the pixel's width and height in meters.\r\n     *\r\n     * @param {Number} drawingBufferWidth The width of the drawing buffer.\r\n     * @param {Number} drawingBufferHeight The height of the drawing buffer.\r\n     * @param {Number} distance The distance to the near plane in meters.\r\n     * @param {Number} pixelRatio The scaling factor from pixel space to coordinate space.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\r\n     *\r\n     * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\r\n     * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\r\n     * @exception {DeveloperError} pixelRatio must be greater than zero.\r\n     *\r\n     * @example\r\n     * // Example 1\r\n     * // Get the width and height of a pixel.\r\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, scene.pixelRatio, new Cesium.Cartesian2());\r\n     *\r\n     * @example\r\n     * // Example 2\r\n     * // Get the width and height of a pixel if the near plane was set to 'distance'.\r\n     * // For example, get the size of a pixel of an image on a billboard.\r\n     * var position = camera.position;\r\n     * var direction = camera.direction;\r\n     * var toCenter = Cesium.Cartesian3.subtract(primitive.boundingVolume.center, position, new Cesium.Cartesian3());      // vector from camera to a primitive\r\n     * var toCenterProj = Cesium.Cartesian3.multiplyByScalar(direction, Cesium.Cartesian3.dot(direction, toCenter), new Cesium.Cartesian3()); // project vector onto camera direction vector\r\n     * var distance = Cesium.Cartesian3.magnitude(toCenterProj);\r\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, scene.pixelRatio, new Cesium.Cartesian2());\r\n     */\r\n    PerspectiveOffCenterFrustum.prototype.getPixelDimensions = function(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {\r\n        update(this);\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(drawingBufferWidth) || !defined(drawingBufferHeight)) {\r\n            throw new DeveloperError('Both drawingBufferWidth and drawingBufferHeight are required.');\r\n        }\r\n        if (drawingBufferWidth <= 0) {\r\n            throw new DeveloperError('drawingBufferWidth must be greater than zero.');\r\n        }\r\n        if (drawingBufferHeight <= 0) {\r\n            throw new DeveloperError('drawingBufferHeight must be greater than zero.');\r\n        }\r\n        if (!defined(distance)) {\r\n            throw new DeveloperError('distance is required.');\r\n        }\r\n        if (!defined(pixelRatio)) {\r\n            throw new DeveloperError('pixelRatio is required');\r\n        }\r\n        if (pixelRatio <= 0) {\r\n            throw new DeveloperError('pixelRatio must be greater than zero.');\r\n        }\r\n        if (!defined(result)) {\r\n            throw new DeveloperError('A result object is required.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var inverseNear = 1.0 / this.near;\r\n        var tanTheta = this.top * inverseNear;\r\n        var pixelHeight = 2.0 * pixelRatio * distance * tanTheta / drawingBufferHeight;\r\n        tanTheta = this.right * inverseNear;\r\n        var pixelWidth = 2.0 * pixelRatio * distance * tanTheta / drawingBufferWidth;\r\n\r\n        result.x = pixelWidth;\r\n        result.y = pixelHeight;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns a duplicate of a PerspectiveOffCenterFrustum instance.\r\n     *\r\n     * @param {PerspectiveOffCenterFrustum} [result] The object onto which to store the result.\r\n     * @returns {PerspectiveOffCenterFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\r\n     */\r\n    PerspectiveOffCenterFrustum.prototype.clone = function(result) {\r\n        if (!defined(result)) {\r\n            result = new PerspectiveOffCenterFrustum();\r\n        }\r\n\r\n        result.right = this.right;\r\n        result.left = this.left;\r\n        result.top = this.top;\r\n        result.bottom = this.bottom;\r\n        result.near = this.near;\r\n        result.far = this.far;\r\n\r\n        // force update of clone to compute matrices\r\n        result._left = undefined;\r\n        result._right = undefined;\r\n        result._top = undefined;\r\n        result._bottom = undefined;\r\n        result._near = undefined;\r\n        result._far = undefined;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided PerspectiveOffCenterFrustum componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {PerspectiveOffCenterFrustum} [other] The right hand side PerspectiveOffCenterFrustum.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    PerspectiveOffCenterFrustum.prototype.equals = function(other) {\r\n        return (defined(other) && other instanceof PerspectiveOffCenterFrustum &&\r\n                this.right === other.right &&\r\n                this.left === other.left &&\r\n                this.top === other.top &&\r\n                this.bottom === other.bottom &&\r\n                this.near === other.near &&\r\n                this.far === other.far);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided PerspectiveOffCenterFrustum componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {PerspectiveOffCenterFrustum} other The right hand side PerspectiveOffCenterFrustum.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    PerspectiveOffCenterFrustum.prototype.equalsEpsilon = function(other, relativeEpsilon, absoluteEpsilon) {\r\n        return (other === this) ||\r\n               (defined(other) &&\r\n                other instanceof PerspectiveOffCenterFrustum &&\r\n                CesiumMath.equalsEpsilon(this.right, other.right, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.left, other.left, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.top, other.top, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.bottom, other.bottom, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.near, other.near, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.far, other.far, relativeEpsilon, absoluteEpsilon));\r\n    };\r\nexport default PerspectiveOffCenterFrustum;\r\n","import Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\nimport PerspectiveOffCenterFrustum from './PerspectiveOffCenterFrustum.js';\r\n\r\n    /**\r\n     * The viewing frustum is defined by 6 planes.\r\n     * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\r\n     * define the unit vector normal to the plane, and the w component is the distance of the\r\n     * plane from the origin/camera position.\r\n     *\r\n     * @alias PerspectiveFrustum\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] An object with the following properties:\r\n     * @param {Number} [options.fov] The angle of the field of view (FOV), in radians.\r\n     * @param {Number} [options.aspectRatio] The aspect ratio of the frustum's width to it's height.\r\n     * @param {Number} [options.near=1.0] The distance of the near plane.\r\n     * @param {Number} [options.far=500000000.0] The distance of the far plane.\r\n     * @param {Number} [options.xOffset=0.0] The offset in the x direction.\r\n     * @param {Number} [options.yOffset=0.0] The offset in the y direction.\r\n     *\r\n     * @example\r\n     * var frustum = new Cesium.PerspectiveFrustum({\r\n     *     fov : Cesium.Math.PI_OVER_THREE,\r\n     *     aspectRatio : canvas.clientWidth / canvas.clientHeight\r\n     *     near : 1.0,\r\n     *     far : 1000.0\r\n     * });\r\n     *\r\n     * @see PerspectiveOffCenterFrustum\r\n     */\r\n    function PerspectiveFrustum(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        this._offCenterFrustum = new PerspectiveOffCenterFrustum();\r\n\r\n        /**\r\n         * The angle of the field of view (FOV), in radians.  This angle will be used\r\n         * as the horizontal FOV if the width is greater than the height, otherwise\r\n         * it will be the vertical FOV.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.fov = options.fov;\r\n        this._fov = undefined;\r\n        this._fovy = undefined;\r\n\r\n        this._sseDenominator = undefined;\r\n\r\n        /**\r\n         * The aspect ratio of the frustum's width to it's height.\r\n         * @type {Number}\r\n         * @default undefined\r\n         */\r\n        this.aspectRatio = options.aspectRatio;\r\n        this._aspectRatio = undefined;\r\n\r\n        /**\r\n         * The distance of the near plane.\r\n         * @type {Number}\r\n         * @default 1.0\r\n         */\r\n        this.near = defaultValue(options.near, 1.0);\r\n        this._near = this.near;\r\n\r\n        /**\r\n         * The distance of the far plane.\r\n         * @type {Number}\r\n         * @default 500000000.0\r\n         */\r\n        this.far = defaultValue(options.far, 500000000.0);\r\n        this._far = this.far;\r\n\r\n        /**\r\n         * Offsets the frustum in the x direction.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.xOffset = defaultValue(options.xOffset, 0.0);\r\n        this._xOffset = this.xOffset;\r\n\r\n        /**\r\n         * Offsets the frustum in the y direction.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.yOffset = defaultValue(options.yOffset, 0.0);\r\n        this._yOffset = this.yOffset;\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    PerspectiveFrustum.packedLength = 6;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {PerspectiveFrustum} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    PerspectiveFrustum.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value.fov;\r\n        array[startingIndex++] = value.aspectRatio;\r\n        array[startingIndex++] = value.near;\r\n        array[startingIndex++] = value.far;\r\n        array[startingIndex++] = value.xOffset;\r\n        array[startingIndex] = value.yOffset;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {PerspectiveFrustum} [result] The object into which to store the result.\r\n     * @returns {PerspectiveFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\r\n     */\r\n    PerspectiveFrustum.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new PerspectiveFrustum();\r\n        }\r\n\r\n        result.fov = array[startingIndex++];\r\n        result.aspectRatio = array[startingIndex++];\r\n        result.near = array[startingIndex++];\r\n        result.far = array[startingIndex++];\r\n        result.xOffset = array[startingIndex++];\r\n        result.yOffset = array[startingIndex];\r\n\r\n        return result;\r\n    };\r\n\r\n    function update(frustum) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(frustum.fov) || !defined(frustum.aspectRatio) || !defined(frustum.near) || !defined(frustum.far)) {\r\n            throw new DeveloperError('fov, aspectRatio, near, or far parameters are not set.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var f = frustum._offCenterFrustum;\r\n\r\n        if (frustum.fov !== frustum._fov || frustum.aspectRatio !== frustum._aspectRatio ||\r\n            frustum.near !== frustum._near || frustum.far !== frustum._far ||\r\n            frustum.xOffset !== frustum._xOffset || frustum.yOffset !== frustum._yOffset) {\r\n            //>>includeStart('debug', pragmas.debug);\r\n            if (frustum.fov < 0 || frustum.fov >= Math.PI) {\r\n                throw new DeveloperError('fov must be in the range [0, PI).');\r\n            }\r\n\r\n            if (frustum.aspectRatio < 0) {\r\n                throw new DeveloperError('aspectRatio must be positive.');\r\n            }\r\n\r\n            if (frustum.near < 0 || frustum.near > frustum.far) {\r\n                throw new DeveloperError('near must be greater than zero and less than far.');\r\n            }\r\n            //>>includeEnd('debug');\r\n\r\n            frustum._aspectRatio = frustum.aspectRatio;\r\n            frustum._fov = frustum.fov;\r\n            frustum._fovy = (frustum.aspectRatio <= 1) ? frustum.fov : Math.atan(Math.tan(frustum.fov * 0.5) / frustum.aspectRatio) * 2.0;\r\n            frustum._near = frustum.near;\r\n            frustum._far = frustum.far;\r\n            frustum._sseDenominator = 2.0 * Math.tan(0.5 * frustum._fovy);\r\n            frustum._xOffset = frustum.xOffset;\r\n            frustum._yOffset = frustum.yOffset;\r\n\r\n            f.top = frustum.near * Math.tan(0.5 * frustum._fovy);\r\n            f.bottom = -f.top;\r\n            f.right = frustum.aspectRatio * f.top;\r\n            f.left = -f.right;\r\n            f.near = frustum.near;\r\n            f.far = frustum.far;\r\n\r\n            f.right += frustum.xOffset;\r\n            f.left += frustum.xOffset;\r\n            f.top += frustum.yOffset;\r\n            f.bottom += frustum.yOffset;\r\n        }\r\n    }\r\n\r\n    Object.defineProperties(PerspectiveFrustum.prototype, {\r\n        /**\r\n         * Gets the perspective projection matrix computed from the view frustum.\r\n         * @memberof PerspectiveFrustum.prototype\r\n         * @type {Matrix4}\r\n         * @readonly\r\n         *\r\n         * @see PerspectiveFrustum#infiniteProjectionMatrix\r\n         */\r\n        projectionMatrix : {\r\n            get : function() {\r\n                update(this);\r\n                return this._offCenterFrustum.projectionMatrix;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * The perspective projection matrix computed from the view frustum with an infinite far plane.\r\n         * @memberof PerspectiveFrustum.prototype\r\n         * @type {Matrix4}\r\n         * @readonly\r\n         *\r\n         * @see PerspectiveFrustum#projectionMatrix\r\n         */\r\n        infiniteProjectionMatrix : {\r\n            get : function() {\r\n                update(this);\r\n                return this._offCenterFrustum.infiniteProjectionMatrix;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the angle of the vertical field of view, in radians.\r\n         * @memberof PerspectiveFrustum.prototype\r\n         * @type {Number}\r\n         * @readonly\r\n         * @default undefined\r\n         */\r\n        fovy : {\r\n            get : function() {\r\n                update(this);\r\n                return this._fovy;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @readonly\r\n         * @private\r\n         */\r\n        sseDenominator : {\r\n            get : function () {\r\n                update(this);\r\n                return this._sseDenominator;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Creates a culling volume for this frustum.\r\n     *\r\n     * @param {Cartesian3} position The eye position.\r\n     * @param {Cartesian3} direction The view direction.\r\n     * @param {Cartesian3} up The up direction.\r\n     * @returns {CullingVolume} A culling volume at the given position and orientation.\r\n     *\r\n     * @example\r\n     * // Check if a bounding volume intersects the frustum.\r\n     * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\r\n     * var intersect = cullingVolume.computeVisibility(boundingVolume);\r\n     */\r\n    PerspectiveFrustum.prototype.computeCullingVolume = function(position, direction, up) {\r\n        update(this);\r\n        return this._offCenterFrustum.computeCullingVolume(position, direction, up);\r\n    };\r\n\r\n    /**\r\n     * Returns the pixel's width and height in meters.\r\n     *\r\n     * @param {Number} drawingBufferWidth The width of the drawing buffer.\r\n     * @param {Number} drawingBufferHeight The height of the drawing buffer.\r\n     * @param {Number} distance The distance to the near plane in meters.\r\n     * @param {Number} pixelRatio The scaling factor from pixel space to coordinate space.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\r\n     *\r\n     * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\r\n     * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\r\n     * @exception {DeveloperError} pixelRatio must be greater than zero.\r\n     *\r\n     * @example\r\n     * // Example 1\r\n     * // Get the width and height of a pixel.\r\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, scene.pixelRatio, new Cesium.Cartesian2());\r\n     *\r\n     * @example\r\n     * // Example 2\r\n     * // Get the width and height of a pixel if the near plane was set to 'distance'.\r\n     * // For example, get the size of a pixel of an image on a billboard.\r\n     * var position = camera.position;\r\n     * var direction = camera.direction;\r\n     * var toCenter = Cesium.Cartesian3.subtract(primitive.boundingVolume.center, position, new Cesium.Cartesian3());      // vector from camera to a primitive\r\n     * var toCenterProj = Cesium.Cartesian3.multiplyByScalar(direction, Cesium.Cartesian3.dot(direction, toCenter), new Cesium.Cartesian3()); // project vector onto camera direction vector\r\n     * var distance = Cesium.Cartesian3.magnitude(toCenterProj);\r\n     * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, scene.pixelRatio, new Cesium.Cartesian2());\r\n     */\r\n    PerspectiveFrustum.prototype.getPixelDimensions = function(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result) {\r\n        update(this);\r\n        return this._offCenterFrustum.getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, pixelRatio, result);\r\n    };\r\n\r\n    /**\r\n     * Returns a duplicate of a PerspectiveFrustum instance.\r\n     *\r\n     * @param {PerspectiveFrustum} [result] The object onto which to store the result.\r\n     * @returns {PerspectiveFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\r\n     */\r\n    PerspectiveFrustum.prototype.clone = function(result) {\r\n        if (!defined(result)) {\r\n            result = new PerspectiveFrustum();\r\n        }\r\n\r\n        result.aspectRatio = this.aspectRatio;\r\n        result.fov = this.fov;\r\n        result.near = this.near;\r\n        result.far = this.far;\r\n\r\n        // force update of clone to compute matrices\r\n        result._aspectRatio = undefined;\r\n        result._fov = undefined;\r\n        result._near = undefined;\r\n        result._far = undefined;\r\n\r\n        this._offCenterFrustum.clone(result._offCenterFrustum);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided PerspectiveFrustum componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {PerspectiveFrustum} [other] The right hand side PerspectiveFrustum.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    PerspectiveFrustum.prototype.equals = function(other) {\r\n        if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\r\n            return false;\r\n        }\r\n\r\n        update(this);\r\n        update(other);\r\n\r\n        return (this.fov === other.fov &&\r\n                this.aspectRatio === other.aspectRatio &&\r\n                this._offCenterFrustum.equals(other._offCenterFrustum));\r\n    };\r\n\r\n    /**\r\n     * Compares the provided PerspectiveFrustum componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {PerspectiveFrustum} other The right hand side PerspectiveFrustum.\r\n     * @param {Number} relativeEpsilon The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if this and other are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    PerspectiveFrustum.prototype.equalsEpsilon = function(other, relativeEpsilon, absoluteEpsilon) {\r\n        if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\r\n            return false;\r\n        }\r\n\r\n        update(this);\r\n        update(other);\r\n\r\n        return (CesiumMath.equalsEpsilon(this.fov, other.fov, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(this.aspectRatio, other.aspectRatio, relativeEpsilon, absoluteEpsilon) &&\r\n                this._offCenterFrustum.equalsEpsilon(other._offCenterFrustum, relativeEpsilon, absoluteEpsilon));\r\n    };\r\nexport default PerspectiveFrustum;\r\n","import BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartesian4 from './Cartesian4.js';\r\nimport Check from './Check.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport Matrix3 from './Matrix3.js';\r\nimport Matrix4 from './Matrix4.js';\r\nimport OrthographicFrustum from './OrthographicFrustum.js';\r\nimport PerspectiveFrustum from './PerspectiveFrustum.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport Quaternion from './Quaternion.js';\r\nimport VertexFormat from './VertexFormat.js';\r\n\r\n    var PERSPECTIVE = 0;\r\n    var ORTHOGRAPHIC = 1;\r\n\r\n    /**\r\n     * Describes a frustum at the given the origin and orientation.\r\n     *\r\n     * @alias FrustumGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {PerspectiveFrustum|OrthographicFrustum} options.frustum The frustum.\r\n     * @param {Cartesian3} options.origin The origin of the frustum.\r\n     * @param {Quaternion} options.orientation The orientation of the frustum.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     */\r\n    function FrustumGeometry(options) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('options', options);\r\n        Check.typeOf.object('options.frustum', options.frustum);\r\n        Check.typeOf.object('options.origin', options.origin);\r\n        Check.typeOf.object('options.orientation', options.orientation);\r\n        //>>includeEnd('debug');\r\n\r\n        var frustum = options.frustum;\r\n        var orientation = options.orientation;\r\n        var origin = options.origin;\r\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n\r\n        // This is private because it is used by DebugCameraPrimitive to draw a multi-frustum by\r\n        // creating multiple FrustumGeometrys. This way the near plane of one frustum doesn't overlap\r\n        // the far plane of another.\r\n        var drawNearPlane = defaultValue(options._drawNearPlane, true);\r\n\r\n        var frustumType;\r\n        var frustumPackedLength;\r\n        if (frustum instanceof PerspectiveFrustum) {\r\n            frustumType = PERSPECTIVE;\r\n            frustumPackedLength = PerspectiveFrustum.packedLength;\r\n        } else if (frustum instanceof OrthographicFrustum) {\r\n            frustumType = ORTHOGRAPHIC;\r\n            frustumPackedLength = OrthographicFrustum.packedLength;\r\n        }\r\n\r\n        this._frustumType = frustumType;\r\n        this._frustum = frustum.clone();\r\n        this._origin = Cartesian3.clone(origin);\r\n        this._orientation = Quaternion.clone(orientation);\r\n        this._drawNearPlane = drawNearPlane;\r\n        this._vertexFormat = vertexFormat;\r\n        this._workerName = 'createFrustumGeometry';\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = 2 + frustumPackedLength + Cartesian3.packedLength + Quaternion.packedLength + VertexFormat.packedLength;\r\n    }\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {FrustumGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    FrustumGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var frustumType = value._frustumType;\r\n        var frustum = value._frustum;\r\n\r\n        array[startingIndex++] = frustumType;\r\n\r\n        if (frustumType === PERSPECTIVE) {\r\n            PerspectiveFrustum.pack(frustum, array, startingIndex);\r\n            startingIndex += PerspectiveFrustum.packedLength;\r\n        } else {\r\n            OrthographicFrustum.pack(frustum, array, startingIndex);\r\n            startingIndex += OrthographicFrustum.packedLength;\r\n        }\r\n\r\n        Cartesian3.pack(value._origin, array, startingIndex);\r\n        startingIndex += Cartesian3.packedLength;\r\n        Quaternion.pack(value._orientation, array, startingIndex);\r\n        startingIndex += Quaternion.packedLength;\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n        startingIndex += VertexFormat.packedLength;\r\n        array[startingIndex] = value._drawNearPlane ? 1.0 : 0.0;\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchPackPerspective = new PerspectiveFrustum();\r\n    var scratchPackOrthographic = new OrthographicFrustum();\r\n    var scratchPackQuaternion = new Quaternion();\r\n    var scratchPackorigin = new Cartesian3();\r\n    var scratchVertexFormat = new VertexFormat();\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {FrustumGeometry} [result] The object into which to store the result.\r\n     */\r\n    FrustumGeometry.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var frustumType = array[startingIndex++];\r\n\r\n        var frustum;\r\n        if (frustumType === PERSPECTIVE) {\r\n            frustum = PerspectiveFrustum.unpack(array, startingIndex, scratchPackPerspective);\r\n            startingIndex += PerspectiveFrustum.packedLength;\r\n        } else {\r\n            frustum = OrthographicFrustum.unpack(array, startingIndex, scratchPackOrthographic);\r\n            startingIndex += OrthographicFrustum.packedLength;\r\n        }\r\n\r\n        var origin = Cartesian3.unpack(array, startingIndex, scratchPackorigin);\r\n        startingIndex += Cartesian3.packedLength;\r\n        var orientation = Quaternion.unpack(array, startingIndex, scratchPackQuaternion);\r\n        startingIndex += Quaternion.packedLength;\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n        startingIndex += VertexFormat.packedLength;\r\n        var drawNearPlane = array[startingIndex] === 1.0;\r\n\r\n        if (!defined(result)) {\r\n            return new FrustumGeometry({\r\n                frustum : frustum,\r\n                origin : origin,\r\n                orientation : orientation,\r\n                vertexFormat : vertexFormat,\r\n                _drawNearPlane : drawNearPlane\r\n            });\r\n        }\r\n\r\n        var frustumResult = frustumType === result._frustumType ? result._frustum : undefined;\r\n        result._frustum = frustum.clone(frustumResult);\r\n\r\n        result._frustumType = frustumType;\r\n        result._origin = Cartesian3.clone(origin, result._origin);\r\n        result._orientation = Quaternion.clone(orientation, result._orientation);\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._drawNearPlane = drawNearPlane;\r\n\r\n        return result;\r\n    };\r\n\r\n    function getAttributes(offset, normals, tangents, bitangents, st, normal, tangent, bitangent) {\r\n        var stOffset = offset / 3 * 2;\r\n\r\n        for (var i = 0; i < 4; ++i) {\r\n            if (defined(normals)) {\r\n                normals[offset] = normal.x;\r\n                normals[offset + 1] = normal.y;\r\n                normals[offset + 2] = normal.z;\r\n            }\r\n            if (defined(tangents)) {\r\n                tangents[offset] = tangent.x;\r\n                tangents[offset + 1] = tangent.y;\r\n                tangents[offset + 2] = tangent.z;\r\n            }\r\n            if (defined(bitangents)) {\r\n                bitangents[offset] = bitangent.x;\r\n                bitangents[offset + 1] = bitangent.y;\r\n                bitangents[offset + 2] = bitangent.z;\r\n            }\r\n            offset += 3;\r\n        }\r\n\r\n        st[stOffset] = 0.0;\r\n        st[stOffset + 1] = 0.0;\r\n        st[stOffset + 2] = 1.0;\r\n        st[stOffset + 3] = 0.0;\r\n        st[stOffset + 4] = 1.0;\r\n        st[stOffset + 5] = 1.0;\r\n        st[stOffset + 6] = 0.0;\r\n        st[stOffset + 7] = 1.0;\r\n    }\r\n\r\n    var scratchRotationMatrix = new Matrix3();\r\n    var scratchViewMatrix = new Matrix4();\r\n    var scratchInverseMatrix = new Matrix4();\r\n\r\n    var scratchXDirection = new Cartesian3();\r\n    var scratchYDirection = new Cartesian3();\r\n    var scratchZDirection = new Cartesian3();\r\n    var scratchNegativeX = new Cartesian3();\r\n    var scratchNegativeY = new Cartesian3();\r\n    var scratchNegativeZ = new Cartesian3();\r\n\r\n    var frustumSplits = new Array(3);\r\n\r\n    var frustumCornersNDC = new Array(4);\r\n    frustumCornersNDC[0] = new Cartesian4(-1.0, -1.0, 1.0, 1.0);\r\n    frustumCornersNDC[1] = new Cartesian4(1.0, -1.0, 1.0, 1.0);\r\n    frustumCornersNDC[2] = new Cartesian4(1.0, 1.0, 1.0, 1.0);\r\n    frustumCornersNDC[3] = new Cartesian4(-1.0, 1.0, 1.0, 1.0);\r\n\r\n    var scratchFrustumCorners = new Array(4);\r\n    for (var i = 0; i < 4; ++i) {\r\n        scratchFrustumCorners[i] = new Cartesian4();\r\n    }\r\n\r\n    FrustumGeometry._computeNearFarPlanes = function(origin, orientation, frustumType, frustum, positions, xDirection, yDirection, zDirection) {\r\n        var rotationMatrix = Matrix3.fromQuaternion(orientation, scratchRotationMatrix);\r\n        var x = defaultValue(xDirection, scratchXDirection);\r\n        var y = defaultValue(yDirection, scratchYDirection);\r\n        var z = defaultValue(zDirection, scratchZDirection);\r\n\r\n        x = Matrix3.getColumn(rotationMatrix, 0, x);\r\n        y = Matrix3.getColumn(rotationMatrix, 1, y);\r\n        z = Matrix3.getColumn(rotationMatrix, 2, z);\r\n\r\n        Cartesian3.normalize(x, x);\r\n        Cartesian3.normalize(y, y);\r\n        Cartesian3.normalize(z, z);\r\n\r\n        Cartesian3.negate(x, x);\r\n\r\n        var view = Matrix4.computeView(origin, z, y, x, scratchViewMatrix);\r\n\r\n        var inverseView;\r\n        var inverseViewProjection;\r\n        if (frustumType === PERSPECTIVE) {\r\n            var projection = frustum.projectionMatrix;\r\n            var viewProjection = Matrix4.multiply(projection, view, scratchInverseMatrix);\r\n            inverseViewProjection = Matrix4.inverse(viewProjection, scratchInverseMatrix);\r\n        } else {\r\n            inverseView = Matrix4.inverseTransformation(view, scratchInverseMatrix);\r\n        }\r\n\r\n        if (defined(inverseViewProjection)) {\r\n            frustumSplits[0] = frustum.near;\r\n            frustumSplits[1] = frustum.far;\r\n        } else {\r\n            frustumSplits[0] = 0.0;\r\n            frustumSplits[1] = frustum.near;\r\n            frustumSplits[2] = frustum.far;\r\n        }\r\n\r\n        for (var i = 0; i < 2; ++i) {\r\n            for (var j = 0; j < 4; ++j) {\r\n                var corner = Cartesian4.clone(frustumCornersNDC[j], scratchFrustumCorners[j]);\r\n\r\n                if (!defined(inverseViewProjection)) {\r\n                    if (defined(frustum._offCenterFrustum)) {\r\n                        frustum = frustum._offCenterFrustum;\r\n                    }\r\n\r\n                    var near = frustumSplits[i];\r\n                    var far = frustumSplits[i + 1];\r\n\r\n                    corner.x = (corner.x * (frustum.right - frustum.left) + frustum.left + frustum.right) * 0.5;\r\n                    corner.y = (corner.y * (frustum.top - frustum.bottom) + frustum.bottom + frustum.top) * 0.5;\r\n                    corner.z = (corner.z * (near - far) - near - far) * 0.5;\r\n                    corner.w = 1.0;\r\n\r\n                    Matrix4.multiplyByVector(inverseView, corner, corner);\r\n                } else {\r\n                    corner = Matrix4.multiplyByVector(inverseViewProjection, corner, corner);\r\n\r\n                    // Reverse perspective divide\r\n                    var w = 1.0 / corner.w;\r\n                    Cartesian3.multiplyByScalar(corner, w, corner);\r\n\r\n                    Cartesian3.subtract(corner, origin, corner);\r\n                    Cartesian3.normalize(corner, corner);\r\n\r\n                    var fac = Cartesian3.dot(z, corner);\r\n                    Cartesian3.multiplyByScalar(corner, frustumSplits[i] / fac, corner);\r\n                    Cartesian3.add(corner, origin, corner);\r\n                }\r\n\r\n                positions[12 * i + j * 3] = corner.x;\r\n                positions[12 * i + j * 3 + 1] = corner.y;\r\n                positions[12 * i + j * 3 + 2] = corner.z;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a frustum, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {FrustumGeometry} frustumGeometry A description of the frustum.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    FrustumGeometry.createGeometry = function(frustumGeometry) {\r\n        var frustumType = frustumGeometry._frustumType;\r\n        var frustum = frustumGeometry._frustum;\r\n        var origin = frustumGeometry._origin;\r\n        var orientation = frustumGeometry._orientation;\r\n        var drawNearPlane = frustumGeometry._drawNearPlane;\r\n        var vertexFormat = frustumGeometry._vertexFormat;\r\n\r\n        var numberOfPlanes = drawNearPlane ? 6 : 5;\r\n        var positions = new Float64Array(3 * 4 * 6);\r\n        FrustumGeometry._computeNearFarPlanes(origin, orientation, frustumType, frustum, positions);\r\n\r\n        // -x plane\r\n        var offset = 3 * 4 * 2;\r\n        positions[offset]      = positions[3 * 4];\r\n        positions[offset + 1]  = positions[3 * 4 + 1];\r\n        positions[offset + 2]  = positions[3 * 4 + 2];\r\n        positions[offset + 3]  = positions[0];\r\n        positions[offset + 4]  = positions[1];\r\n        positions[offset + 5]  = positions[2];\r\n        positions[offset + 6]  = positions[3 * 3];\r\n        positions[offset + 7]  = positions[3 * 3 + 1];\r\n        positions[offset + 8]  = positions[3 * 3 + 2];\r\n        positions[offset + 9]  = positions[3 * 7];\r\n        positions[offset + 10] = positions[3 * 7 + 1];\r\n        positions[offset + 11] = positions[3 * 7 + 2];\r\n\r\n        // -y plane\r\n        offset += 3 * 4;\r\n        positions[offset]      = positions[3 * 5];\r\n        positions[offset + 1]  = positions[3 * 5 + 1];\r\n        positions[offset + 2]  = positions[3 * 5 + 2];\r\n        positions[offset + 3]  = positions[3];\r\n        positions[offset + 4]  = positions[3 + 1];\r\n        positions[offset + 5]  = positions[3 + 2];\r\n        positions[offset + 6]  = positions[0];\r\n        positions[offset + 7]  = positions[1];\r\n        positions[offset + 8]  = positions[2];\r\n        positions[offset + 9]  = positions[3 * 4];\r\n        positions[offset + 10] = positions[3 * 4 + 1];\r\n        positions[offset + 11] = positions[3 * 4 + 2];\r\n\r\n        // +x plane\r\n        offset += 3 * 4;\r\n        positions[offset]      = positions[3];\r\n        positions[offset + 1]  = positions[3 + 1];\r\n        positions[offset + 2]  = positions[3 + 2];\r\n        positions[offset + 3]  = positions[3 * 5];\r\n        positions[offset + 4]  = positions[3 * 5 + 1];\r\n        positions[offset + 5]  = positions[3 * 5 + 2];\r\n        positions[offset + 6]  = positions[3 * 6];\r\n        positions[offset + 7]  = positions[3 * 6 + 1];\r\n        positions[offset + 8]  = positions[3 * 6 + 2];\r\n        positions[offset + 9]  = positions[3 * 2];\r\n        positions[offset + 10] = positions[3 * 2 + 1];\r\n        positions[offset + 11] = positions[3 * 2 + 2];\r\n\r\n        // +y plane\r\n        offset += 3 * 4;\r\n        positions[offset]      = positions[3 * 2];\r\n        positions[offset + 1]  = positions[3 * 2 + 1];\r\n        positions[offset + 2]  = positions[3 * 2 + 2];\r\n        positions[offset + 3]  = positions[3 * 6];\r\n        positions[offset + 4]  = positions[3 * 6 + 1];\r\n        positions[offset + 5]  = positions[3 * 6 + 2];\r\n        positions[offset + 6]  = positions[3 * 7];\r\n        positions[offset + 7]  = positions[3 * 7 + 1];\r\n        positions[offset + 8]  = positions[3 * 7 + 2];\r\n        positions[offset + 9]  = positions[3 * 3];\r\n        positions[offset + 10] = positions[3 * 3 + 1];\r\n        positions[offset + 11] = positions[3 * 3 + 2];\r\n\r\n        if (!drawNearPlane) {\r\n            positions = positions.subarray(3 * 4);\r\n        }\r\n\r\n        var attributes = new GeometryAttributes({\r\n            position : new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : positions\r\n            })\r\n        });\r\n\r\n        if (defined(vertexFormat.normal) || defined(vertexFormat.tangent) || defined(vertexFormat.bitangent) || defined(vertexFormat.st)) {\r\n            var normals = defined(vertexFormat.normal) ? new Float32Array(3 * 4 * numberOfPlanes) : undefined;\r\n            var tangents = defined(vertexFormat.tangent) ? new Float32Array(3 * 4 * numberOfPlanes) : undefined;\r\n            var bitangents = defined(vertexFormat.bitangent) ? new Float32Array(3 * 4 * numberOfPlanes) : undefined;\r\n            var st = defined(vertexFormat.st) ? new Float32Array(2 * 4 * numberOfPlanes) : undefined;\r\n\r\n            var x = scratchXDirection;\r\n            var y = scratchYDirection;\r\n            var z = scratchZDirection;\r\n\r\n            var negativeX = Cartesian3.negate(x, scratchNegativeX);\r\n            var negativeY = Cartesian3.negate(y, scratchNegativeY);\r\n            var negativeZ = Cartesian3.negate(z, scratchNegativeZ);\r\n\r\n            offset = 0;\r\n            if (drawNearPlane) {\r\n                getAttributes(offset, normals, tangents, bitangents, st, negativeZ, x, y); // near\r\n                offset += 3 * 4;\r\n            }\r\n            getAttributes(offset, normals, tangents, bitangents, st, z, negativeX, y); // far\r\n            offset += 3 * 4;\r\n            getAttributes(offset, normals, tangents, bitangents, st, negativeX, negativeZ, y); // -x\r\n            offset += 3 * 4;\r\n            getAttributes(offset, normals, tangents, bitangents, st, negativeY, negativeZ, negativeX); // -y\r\n            offset += 3 * 4;\r\n            getAttributes(offset, normals, tangents, bitangents, st, x, z, y); // +x\r\n            offset += 3 * 4;\r\n            getAttributes(offset, normals, tangents, bitangents, st, y, z, negativeX); // +y\r\n\r\n            if (defined(normals)) {\r\n                attributes.normal = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : normals\r\n                });\r\n            }\r\n            if (defined(tangents)) {\r\n                attributes.tangent = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : tangents\r\n                });\r\n            }\r\n            if (defined(bitangents)) {\r\n                attributes.bitangent = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : bitangents\r\n                });\r\n            }\r\n            if (defined(st)) {\r\n                attributes.st = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 2,\r\n                    values : st\r\n                });\r\n            }\r\n        }\r\n\r\n        var indices = new Uint16Array(6 * numberOfPlanes);\r\n        for (var i = 0; i < numberOfPlanes; ++i) {\r\n            var indexOffset = i * 6;\r\n            var index = i * 4;\r\n\r\n            indices[indexOffset] = index;\r\n            indices[indexOffset + 1] = index + 1;\r\n            indices[indexOffset + 2] = index + 2;\r\n            indices[indexOffset + 3] = index;\r\n            indices[indexOffset + 4] = index + 2;\r\n            indices[indexOffset + 5] = index + 3;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.TRIANGLES,\r\n            boundingSphere : BoundingSphere.fromVertices(positions)\r\n        });\r\n    };\r\nexport default FrustumGeometry;\r\n"],"names":["defaultValue","Cartesian3","Plane","defined","DeveloperError","Cartesian4","Intersect","Matrix4","CesiumMath","Check","update","getPlanesRight","getPlanesNearCenter","VertexFormat","Quaternion","Matrix3","GeometryAttributes","GeometryAttribute","ComponentDatatype","Geometry","PrimitiveType","BoundingSphere"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAQI;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,aAAa,CAAC,MAAM,EAAE;IACnC;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,MAAM,GAAGA,yBAAY,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IAC/C,KAAK;;IAEL,IAAI,IAAI,KAAK,GAAG,CAAC,IAAIC,qBAAU,EAAE,EAAE,IAAIA,qBAAU,EAAE,EAAE,IAAIA,qBAAU,EAAE,CAAC,CAAC;IACvE,IAAIA,qBAAU,CAAC,KAAK,CAACA,qBAAU,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,IAAIA,qBAAU,CAAC,KAAK,CAACA,qBAAU,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,IAAIA,qBAAU,CAAC,KAAK,CAACA,qBAAU,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;IAElD,IAAI,IAAI,kBAAkB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC9C,IAAI,IAAI,kBAAkB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC9C,IAAI,IAAI,YAAY,GAAG,IAAIC,WAAK,CAAC,IAAID,qBAAU,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;;IAErE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,aAAa,CAAC,kBAAkB,GAAG,SAAS,cAAc,EAAE,MAAM,EAAE;IACxE;IACA,QAAQ,IAAI,CAACE,eAAO,CAAC,cAAc,CAAC,EAAE;IACtC,YAAY,MAAM,IAAIC,oBAAc,CAAC,6BAA6B,CAAC,CAAC;IACpE,SAAS;IACT;;IAEA,QAAQ,IAAI,CAACD,eAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,MAAM,GAAG,IAAI,aAAa,EAAE,CAAC;IACzC,SAAS;;IAET,QAAQ,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IAClC,QAAQ,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IACnC,QAAQ,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,MAAM,CAAC;;IAEnC,QAAQ,IAAI,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC;IAC3C,QAAQ,IAAI,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC;;IAE3C,QAAQ,IAAI,UAAU,GAAG,CAAC,CAAC;;IAE3B,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;IACzC,YAAY,IAAI,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;IAEtC,YAAY,IAAI,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;IAC5C,YAAY,IAAI,MAAM,GAAG,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;;IAEhD,YAAY,IAAI,CAACA,eAAO,CAAC,MAAM,CAAC,EAAE;IAClC,gBAAgB,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IAC/D,aAAa;IACb,YAAY,IAAI,CAACF,eAAO,CAAC,MAAM,CAAC,EAAE;IAClC,gBAAgB,MAAM,GAAG,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IACnE,aAAa;;IAEb,YAAYJ,qBAAU,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;IACjF,YAAYA,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;;IAE3E,YAAY,MAAM,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;IACpC,YAAY,MAAM,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;IACpC,YAAY,MAAM,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;IACpC,YAAY,MAAM,CAAC,CAAC,GAAG,CAACA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC;;IAEvE,YAAYA,qBAAU,CAAC,gBAAgB,CAAC,UAAU,EAAE,MAAM,EAAE,kBAAkB,CAAC,CAAC;IAChF,YAAYA,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;;IAE3E,YAAY,MAAM,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;IACrC,YAAY,MAAM,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;IACrC,YAAY,MAAM,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;IACrC,YAAY,MAAM,CAAC,CAAC,GAAG,CAACA,qBAAU,CAAC,GAAG,CAACA,qBAAU,CAAC,MAAM,CAAC,UAAU,EAAE,kBAAkB,CAAC,EAAE,kBAAkB,CAAC,CAAC;;IAE9G,YAAY,UAAU,IAAI,CAAC,CAAC;IAC5B,SAAS;;IAET,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,aAAa,CAAC,SAAS,CAAC,iBAAiB,GAAG,SAAS,cAAc,EAAE;IACzE;IACA,QAAQ,IAAI,CAACE,eAAO,CAAC,cAAc,CAAC,EAAE;IACtC,YAAY,MAAM,IAAIC,oBAAc,CAAC,6BAA6B,CAAC,CAAC;IACpE,SAAS;IACT;;IAEA,QAAQ,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IACjC,QAAQ,IAAI,YAAY,GAAG,KAAK,CAAC;IACjC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;IAC3D,YAAY,IAAI,MAAM,GAAG,cAAc,CAAC,cAAc,CAACF,WAAK,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC;IACtG,YAAY,IAAI,MAAM,KAAKI,oBAAS,CAAC,OAAO,EAAE;IAC9C,gBAAgB,OAAOA,oBAAS,CAAC,OAAO,CAAC;IACzC,aAAa,MAAM,IAAI,MAAM,KAAKA,oBAAS,CAAC,YAAY,EAAE;IAC1D,gBAAgB,YAAY,GAAG,IAAI,CAAC;IACpC,aAAa;IACb,SAAS;;IAET,QAAQ,OAAO,YAAY,GAAGA,oBAAS,CAAC,YAAY,GAAGA,oBAAS,CAAC,MAAM,CAAC;IACxE,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,aAAa,CAAC,SAAS,CAAC,8BAA8B,GAAG,SAAS,cAAc,EAAE,eAAe,EAAE;IACvG;IACA,QAAQ,IAAI,CAACH,eAAO,CAAC,cAAc,CAAC,EAAE;IACtC,YAAY,MAAM,IAAIC,oBAAc,CAAC,6BAA6B,CAAC,CAAC;IACpE,SAAS;IACT,QAAQ,IAAI,CAACD,eAAO,CAAC,eAAe,CAAC,EAAE;IACvC,YAAY,MAAM,IAAIC,oBAAc,CAAC,8BAA8B,CAAC,CAAC;IACrE,SAAS;IACT;;IAEA,QAAQ,IAAI,eAAe,KAAK,aAAa,CAAC,YAAY,IAAI,eAAe,KAAK,aAAa,CAAC,WAAW,EAAE;IAC7G;IACA,YAAY,OAAO,eAAe,CAAC;IACnC,SAAS;;IAET;IACA;IACA,QAAQ,IAAI,IAAI,GAAG,aAAa,CAAC,WAAW,CAAC;;IAE7C,QAAQ,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IACjC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;IAC3D;IACA,YAAY,IAAI,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/C,YAAY,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,eAAe,GAAG,IAAI,MAAM,CAAC,EAAE;IAC1D;IACA,gBAAgB,SAAS;IACzB,aAAa;;IAEb,YAAY,IAAI,MAAM,GAAG,cAAc,CAAC,cAAc,CAACF,WAAK,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC;IACtG,YAAY,IAAI,MAAM,KAAKI,oBAAS,CAAC,OAAO,EAAE;IAC9C,gBAAgB,OAAO,aAAa,CAAC,YAAY,CAAC;IAClD,aAAa,MAAM,IAAI,MAAM,KAAKA,oBAAS,CAAC,YAAY,EAAE;IAC1D,gBAAgB,IAAI,IAAI,IAAI,CAAC;IAC7B,aAAa;IACb,SAAS;;IAET,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,aAAa,CAAC,YAAY,GAAG,UAAU,CAAC;;IAE5C;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,aAAa,CAAC,WAAW,GAAG,UAAU,CAAC;;IAE3C;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,aAAa,CAAC,kBAAkB,GAAG,UAAU,CAAC;;ICjM9C;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,4BAA4B,CAAC,OAAO,EAAE;IACnD,QAAQ,OAAO,GAAGN,yBAAY,CAAC,OAAO,EAAEA,yBAAY,CAAC,YAAY,CAAC,CAAC;;IAEnE;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IACjC,QAAQ,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;;IAE/B;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;IACnC,QAAQ,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;;IAEhC;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;IAC/B,QAAQ,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;;IAE9B;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IACrC,QAAQ,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;;IAEjC;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,IAAI,GAAGA,yBAAY,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACpD,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;;IAE/B;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,GAAG,GAAGA,yBAAY,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IAC1D,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;;IAE7B,QAAQ,IAAI,CAAC,cAAc,GAAG,IAAI,aAAa,EAAE,CAAC;IAClD,QAAQ,IAAI,CAAC,mBAAmB,GAAG,IAAIO,kBAAO,EAAE,CAAC;IACjD,KAAK;;IAEL,IAAI,SAAS,MAAM,CAAC,OAAO,EAAE;IAC7B;IACA,QAAQ,IAAI,CAACJ,eAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAACA,eAAO,CAAC,OAAO,CAAC,IAAI,CAAC;IAC7D,YAAY,CAACA,eAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAACA,eAAO,CAAC,OAAO,CAAC,MAAM,CAAC;IAC7D,YAAY,CAACA,eAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAACA,eAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;IAC7D,YAAY,MAAM,IAAIC,oBAAc,CAAC,gEAAgE,CAAC,CAAC;IACvG,SAAS;IACT;;IAEA,QAAQ,IAAI,OAAO,CAAC,GAAG,KAAK,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,MAAM,KAAK,OAAO,CAAC,OAAO;IAC9E,YAAY,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,KAAK,OAAO,CAAC,MAAM;IAC9E,YAAY,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,GAAG,KAAK,OAAO,CAAC,IAAI,EAAE;;IAE5E;IACA,YAAY,IAAI,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,EAAE;IAC9C,gBAAgB,MAAM,IAAIA,oBAAc,CAAC,kCAAkC,CAAC,CAAC;IAC7E,aAAa;IACb,YAAY,IAAI,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE;IAC9C,gBAAgB,MAAM,IAAIA,oBAAc,CAAC,kCAAkC,CAAC,CAAC;IAC7E,aAAa;IACb,YAAY,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE;IACjE,gBAAgB,MAAM,IAAIA,oBAAc,CAAC,mDAAmD,CAAC,CAAC;IAC9F,aAAa;IACb;;IAEA,YAAY,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC;IACzC,YAAY,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC;IAC3C,YAAY,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC;IACvC,YAAY,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;IAC7C,YAAY,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC;IACzC,YAAY,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC;IACvC,YAAY,OAAO,CAAC,mBAAmB,GAAGG,kBAAO,CAAC,4BAA4B,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,mBAAmB,CAAC,CAAC;IACjM,SAAS;IACT,KAAK;;IAEL,IAAI,MAAM,CAAC,gBAAgB,CAAC,4BAA4B,CAAC,SAAS,EAAE;IACpE;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,gBAAgB,GAAG;IAC3B,YAAY,GAAG,GAAG,WAAW;IAC7B,gBAAgB,MAAM,CAAC,IAAI,CAAC,CAAC;IAC7B,gBAAgB,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAChD,aAAa;IACb,SAAS;IACT,KAAK,CAAC,CAAC;;IAEP,IAAI,IAAI,cAAc,GAAG,IAAIN,qBAAU,EAAE,CAAC;IAC1C,IAAI,IAAI,mBAAmB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC/C,IAAI,IAAI,cAAc,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC1C,IAAI,IAAI,aAAa,GAAG,IAAIA,qBAAU,EAAE,CAAC;;IAEzC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,4BAA4B,CAAC,SAAS,CAAC,oBAAoB,GAAG,SAAS,QAAQ,EAAE,SAAS,EAAE,EAAE,EAAE;IACpG;IACA,QAAQ,IAAI,CAACE,eAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,YAAY,MAAM,IAAIC,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9D,SAAS;IACT,QAAQ,IAAI,CAACD,eAAO,CAAC,SAAS,CAAC,EAAE;IACjC,YAAY,MAAM,IAAIC,oBAAc,CAAC,wBAAwB,CAAC,CAAC;IAC/D,SAAS;IACT,QAAQ,IAAI,CAACD,eAAO,CAAC,EAAE,CAAC,EAAE;IAC1B,YAAY,MAAM,IAAIC,oBAAc,CAAC,iBAAiB,CAAC,CAAC;IACxD,SAAS;IACT;;IAEA,QAAQ,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;IAChD,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;IACzB,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;IAC5B,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;IAC3B,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;IAC1B,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;IAC1B,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;;IAEzB,QAAQ,IAAI,KAAK,GAAGH,qBAAU,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,EAAE,cAAc,CAAC,CAAC;IACpE,QAAQA,qBAAU,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC3C,QAAQ,IAAI,UAAU,GAAG,mBAAmB,CAAC;IAC7C,QAAQA,qBAAU,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IAC9D,QAAQA,qBAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;;IAEzD,QAAQ,IAAI,KAAK,GAAG,cAAc,CAAC;;IAEnC;IACA,QAAQA,qBAAU,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IACrD,QAAQA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;;IAEjD,QAAQ,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9B,QAAQ,IAAI,CAACE,eAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IACjD,SAAS;IACT,QAAQ,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;IAC1B,QAAQ,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;IAC1B,QAAQ,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;IAC1B,QAAQ,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;;IAEhD;IACA,QAAQA,qBAAU,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IACrD,QAAQA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;;IAEjD,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,QAAQ,IAAI,CAACE,eAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IACjD,SAAS;IACT,QAAQ,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAACA,qBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,CAAC,EAAE,KAAK,CAAC,CAAC;;IAElF;IACA,QAAQA,qBAAU,CAAC,gBAAgB,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IAClD,QAAQA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;;IAEjD,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,QAAQ,IAAI,CAACE,eAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IACjD,SAAS;IACT,QAAQ,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACvB,QAAQ,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACvB,QAAQ,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACvB,QAAQ,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;;IAE7C;IACA,QAAQA,qBAAU,CAAC,gBAAgB,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IAClD,QAAQA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;;IAEjD,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,QAAQ,IAAI,CAACE,eAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IACjD,SAAS;IACT,QAAQ,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IACxB,QAAQ,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IACxB,QAAQ,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IACxB,QAAQ,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAACA,qBAAU,CAAC,MAAM,CAAC,EAAE,EAAE,aAAa,CAAC,EAAE,KAAK,CAAC,CAAC;;IAE/E;IACA,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,QAAQ,IAAI,CAACE,eAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IACjD,SAAS;IACT,QAAQ,KAAK,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC9B,QAAQ,KAAK,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC9B,QAAQ,KAAK,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC9B,QAAQ,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;;IAEzD;IACA,QAAQA,qBAAU,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IACzD,QAAQA,qBAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;;IAE/C,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,QAAQ,IAAI,CAACE,eAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IACjD,SAAS;IACT,QAAQ,KAAK,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;IAC/B,QAAQ,KAAK,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;IAC/B,QAAQ,KAAK,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;IAC/B,QAAQ,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAACA,qBAAU,CAAC,MAAM,CAAC,SAAS,EAAE,aAAa,CAAC,EAAE,KAAK,CAAC,CAAC;;IAEtF,QAAQ,OAAO,IAAI,CAAC,cAAc,CAAC;IACnC,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,4BAA4B,CAAC,SAAS,CAAC,kBAAkB,GAAG,SAAS,kBAAkB,EAAE,mBAAmB,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE;IAChJ,QAAQ,MAAM,CAAC,IAAI,CAAC,CAAC;;IAErB;IACA,QAAQ,IAAI,CAACE,eAAO,CAAC,kBAAkB,CAAC,IAAI,CAACA,eAAO,CAAC,mBAAmB,CAAC,EAAE;IAC3E,YAAY,MAAM,IAAIC,oBAAc,CAAC,+DAA+D,CAAC,CAAC;IACtG,SAAS;IACT,QAAQ,IAAI,kBAAkB,IAAI,CAAC,EAAE;IACrC,YAAY,MAAM,IAAIA,oBAAc,CAAC,+CAA+C,CAAC,CAAC;IACtF,SAAS;IACT,QAAQ,IAAI,mBAAmB,IAAI,CAAC,EAAE;IACtC,YAAY,MAAM,IAAIA,oBAAc,CAAC,gDAAgD,CAAC,CAAC;IACvF,SAAS;IACT,QAAQ,IAAI,CAACD,eAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,YAAY,MAAM,IAAIC,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9D,SAAS;IACT,QAAQ,IAAI,CAACD,eAAO,CAAC,UAAU,CAAC,EAAE;IAClC,YAAY,MAAM,IAAIC,oBAAc,CAAC,yBAAyB,CAAC,CAAC;IAChE,SAAS;IACT,QAAQ,IAAI,UAAU,IAAI,CAAC,EAAE;IAC7B,YAAY,MAAM,IAAIA,oBAAc,CAAC,uCAAuC,CAAC,CAAC;IAC9E,SAAS;IACT,QAAQ,IAAI,CAACD,eAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,MAAM,IAAIC,oBAAc,CAAC,8BAA8B,CAAC,CAAC;IACrE,SAAS;IACT;;IAEA,QAAQ,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;IAClD,QAAQ,IAAI,aAAa,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;IACnD,QAAQ,IAAI,UAAU,GAAG,UAAU,GAAG,YAAY,GAAG,kBAAkB,CAAC;IACxE,QAAQ,IAAI,WAAW,GAAG,UAAU,GAAG,aAAa,GAAG,mBAAmB,CAAC;;IAE3E,QAAQ,MAAM,CAAC,CAAC,GAAG,UAAU,CAAC;IAC9B,QAAQ,MAAM,CAAC,CAAC,GAAG,WAAW,CAAC;IAC/B,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,4BAA4B,CAAC,SAAS,CAAC,KAAK,GAAG,SAAS,MAAM,EAAE;IACpE,QAAQ,IAAI,CAACD,eAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,MAAM,GAAG,IAAI,4BAA4B,EAAE,CAAC;IACxD,SAAS;;IAET,QAAQ,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAChC,QAAQ,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAClC,QAAQ,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;IAC9B,QAAQ,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IACpC,QAAQ,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAChC,QAAQ,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;;IAE9B;IACA,QAAQ,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;IACjC,QAAQ,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC;IAClC,QAAQ,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;IAChC,QAAQ,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC;IACnC,QAAQ,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;IACjC,QAAQ,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;;IAEhC,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,4BAA4B,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,KAAK,EAAE;IACpE,QAAQ,QAAQA,eAAO,CAAC,KAAK,CAAC,IAAI,KAAK,YAAY,4BAA4B;IAC/E,gBAAgB,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK;IAC1C,gBAAgB,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;IACxC,gBAAgB,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG;IACtC,gBAAgB,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM;IAC5C,gBAAgB,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;IACxC,gBAAgB,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,EAAE;IACxC,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,4BAA4B,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,KAAK,EAAE,eAAe,EAAE,eAAe,EAAE;IAC7G,QAAQ,OAAO,CAAC,KAAK,KAAK,IAAI;IAC9B,gBAAgBA,eAAO,CAAC,KAAK,CAAC;IAC9B,gBAAgB,KAAK,YAAY,4BAA4B;IAC7D,gBAAgBK,gBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,eAAe,EAAE,eAAe,CAAC;IACnG,gBAAgBA,gBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,eAAe,EAAE,eAAe,CAAC;IACjG,gBAAgBA,gBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,eAAe,EAAE,eAAe,CAAC;IAC/F,gBAAgBA,gBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,eAAe,EAAE,eAAe,CAAC;IACrG,gBAAgBA,gBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,eAAe,EAAE,eAAe,CAAC;IACjG,gBAAgBA,gBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC,CAAC;IACjG,KAAK,CAAC;;IC9XF;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,mBAAmB,CAAC,OAAO,EAAE;IAC1C,QAAQ,OAAO,GAAGR,yBAAY,CAAC,OAAO,EAAEA,yBAAY,CAAC,YAAY,CAAC,CAAC;;IAEnE,QAAQ,IAAI,CAAC,iBAAiB,GAAG,IAAI,4BAA4B,EAAE,CAAC;;IAEpE;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;IACnC,QAAQ,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;;IAEhC;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;IAC/C,QAAQ,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;;IAEtC;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,IAAI,GAAGA,yBAAY,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACpD,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;;IAE/B;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,GAAG,GAAGA,yBAAY,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IAC1D,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;IAC7B,KAAK;;IAEL;IACA;IACA;IACA;IACA,IAAI,mBAAmB,CAAC,YAAY,GAAG,CAAC,CAAC;;IAEzC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,mBAAmB,CAAC,IAAI,GAAG,SAAS,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE;IACrE;IACA,QAAQS,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC5C,QAAQA,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACtC;;IAEA,QAAQ,aAAa,GAAGT,yBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;;IAEvD,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;IAC7C,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC;IACnD,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC;IAC5C,QAAQ,KAAK,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;;IAEzC,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,mBAAmB,CAAC,MAAM,GAAG,SAAS,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE;IACxE;IACA,QAAQS,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACtC;;IAEA,QAAQ,aAAa,GAAGT,yBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;;IAEvD,QAAQ,IAAI,CAACG,eAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,MAAM,GAAG,IAAI,mBAAmB,EAAE,CAAC;IAC/C,SAAS;;IAET,QAAQ,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAC9C,QAAQ,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IACpD,QAAQ,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAC7C,QAAQ,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC;;IAE1C,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK,CAAC;;IAEN,IAAI,SAASO,QAAM,CAAC,OAAO,EAAE;IAC7B;IACA,QAAQ,IAAI,CAACP,eAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAACA,eAAO,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAACA,eAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAACA,eAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;IACzH,YAAY,MAAM,IAAIC,oBAAc,CAAC,0DAA0D,CAAC,CAAC;IACjG,SAAS;IACT;;IAEA,QAAQ,IAAI,CAAC,GAAG,OAAO,CAAC,iBAAiB,CAAC;;IAE1C,QAAQ,IAAI,OAAO,CAAC,KAAK,KAAK,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,WAAW,KAAK,OAAO,CAAC,YAAY;IAC5F,YAAY,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,GAAG,KAAK,OAAO,CAAC,IAAI,EAAE;IAC5E;IACA,YAAY,IAAI,OAAO,CAAC,WAAW,GAAG,CAAC,EAAE;IACzC,gBAAgB,MAAM,IAAIA,oBAAc,CAAC,+BAA+B,CAAC,CAAC;IAC1E,aAAa;IACb,YAAY,IAAI,OAAO,CAAC,IAAI,GAAG,CAAC,IAAI,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE;IAChE,gBAAgB,MAAM,IAAIA,oBAAc,CAAC,mDAAmD,CAAC,CAAC;IAC9F,aAAa;IACb;;IAEA,YAAY,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC;IACvD,YAAY,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC;IAC3C,YAAY,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC;IACzC,YAAY,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC;;IAEvC,YAAY,IAAI,KAAK,GAAG,GAAG,GAAG,OAAO,CAAC,WAAW,CAAC;IAClD,YAAY,CAAC,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,GAAG,GAAG,CAAC;IAC1C,YAAY,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;IAC9B,YAAY,CAAC,CAAC,GAAG,GAAG,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;IACpC,YAAY,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IAC9B,YAAY,CAAC,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAClC,YAAY,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;;IAEhC,SAAS;IACT,KAAK;;IAEL,IAAI,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,SAAS,EAAE;IAC3D;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,gBAAgB,GAAG;IAC3B,YAAY,GAAG,GAAG,WAAW;IAC7B,gBAAgBM,QAAM,CAAC,IAAI,CAAC,CAAC;IAC7B,gBAAgB,OAAO,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;IAC/D,aAAa;IACb,SAAS;;IAET,KAAK,CAAC,CAAC;;IAEP;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,mBAAmB,CAAC,SAAS,CAAC,oBAAoB,GAAG,SAAS,QAAQ,EAAE,SAAS,EAAE,EAAE,EAAE;IAC3F,QAAQA,QAAM,CAAC,IAAI,CAAC,CAAC;IACrB,QAAQ,OAAO,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,QAAQ,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;IACpF,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,mBAAmB,CAAC,SAAS,CAAC,kBAAkB,GAAG,SAAS,kBAAkB,EAAE,mBAAmB,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE;IACvI,QAAQA,QAAM,CAAC,IAAI,CAAC,CAAC;IACrB,QAAQ,OAAO,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;IAChI,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,mBAAmB,CAAC,SAAS,CAAC,KAAK,GAAG,SAAS,MAAM,EAAE;IAC3D,QAAQ,IAAI,CAACP,eAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,MAAM,GAAG,IAAI,mBAAmB,EAAE,CAAC;IAC/C,SAAS;;IAET,QAAQ,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;IAC9C,QAAQ,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAClC,QAAQ,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAChC,QAAQ,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;;IAE9B;IACA,QAAQ,MAAM,CAAC,YAAY,GAAG,SAAS,CAAC;IACxC,QAAQ,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC;IAClC,QAAQ,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;IACjC,QAAQ,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;;IAEhC,QAAQ,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;;IAE/D,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,mBAAmB,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,KAAK,EAAE;IAC3D,QAAQ,IAAI,CAACA,eAAO,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,YAAY,mBAAmB,CAAC,EAAE;IACxE,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;;IAET,QAAQO,QAAM,CAAC,IAAI,CAAC,CAAC;IACrB,QAAQA,QAAM,CAAC,KAAK,CAAC,CAAC;;IAEtB,QAAQ,QAAQ,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK;IAC1C,gBAAgB,IAAI,CAAC,WAAW,KAAK,KAAK,CAAC,WAAW;IACtD,gBAAgB,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,EAAE;IACxE,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,mBAAmB,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,KAAK,EAAE,eAAe,EAAE,eAAe,EAAE;IACpG,QAAQ,IAAI,CAACP,eAAO,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,YAAY,mBAAmB,CAAC,EAAE;IACxE,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;;IAET,QAAQO,QAAM,CAAC,IAAI,CAAC,CAAC;IACrB,QAAQA,QAAM,CAAC,KAAK,CAAC,CAAC;;IAEtB,QAAQ,QAAQF,gBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,eAAe,EAAE,eAAe,CAAC;IACnG,gBAAgBA,gBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,WAAW,EAAE,eAAe,EAAE,eAAe,CAAC;IAC/G,gBAAgB,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,KAAK,CAAC,iBAAiB,EAAE,eAAe,EAAE,eAAe,CAAC,EAAE;IACjH,KAAK,CAAC;;ICtRF;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,2BAA2B,CAAC,OAAO,EAAE;IAClD,QAAQ,OAAO,GAAGR,yBAAY,CAAC,OAAO,EAAEA,yBAAY,CAAC,YAAY,CAAC,CAAC;;IAEnE;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IACjC,QAAQ,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;;IAE/B;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;IACnC,QAAQ,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;;IAEhC;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;IAC/B,QAAQ,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;;IAE9B;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IACrC,QAAQ,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;;IAEjC;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,IAAI,GAAGA,yBAAY,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACpD,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;;IAE/B;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,GAAG,GAAGA,yBAAY,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IAC1D,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;;IAE7B,QAAQ,IAAI,CAAC,cAAc,GAAG,IAAI,aAAa,EAAE,CAAC;IAClD,QAAQ,IAAI,CAAC,kBAAkB,GAAG,IAAIO,kBAAO,EAAE,CAAC;IAChD,QAAQ,IAAI,CAAC,oBAAoB,GAAG,IAAIA,kBAAO,EAAE,CAAC;IAClD,KAAK;;IAEL,IAAI,SAASG,QAAM,CAAC,OAAO,EAAE;IAC7B;IACA,QAAQ,IAAI,CAACP,eAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAACA,eAAO,CAAC,OAAO,CAAC,IAAI,CAAC;IAC7D,YAAY,CAACA,eAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAACA,eAAO,CAAC,OAAO,CAAC,MAAM,CAAC;IAC7D,YAAY,CAACA,eAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAACA,eAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;IAC7D,YAAY,MAAM,IAAIC,oBAAc,CAAC,gEAAgE,CAAC,CAAC;IACvG,SAAS;IACT;;IAEA,QAAQ,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;IAC5B,QAAQ,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;IAC/B,QAAQ,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC;IAC9B,QAAQ,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;IAC7B,QAAQ,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;IAC7B,QAAQ,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;;IAE5B,QAAQ,IAAI,CAAC,KAAK,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,OAAO,CAAC,OAAO;IACvD,YAAY,CAAC,KAAK,OAAO,CAAC,KAAK,IAAI,CAAC,KAAK,OAAO,CAAC,MAAM;IACvD,YAAY,CAAC,KAAK,OAAO,CAAC,KAAK,IAAI,CAAC,KAAK,OAAO,CAAC,IAAI,EAAE;;IAEvD;IACA,YAAY,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE;IACjE,gBAAgB,MAAM,IAAIA,oBAAc,CAAC,mDAAmD,CAAC,CAAC;IAC9F,aAAa;IACb;;IAEA,YAAY,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;IAC9B,YAAY,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IAC/B,YAAY,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;IAC7B,YAAY,OAAO,CAAC,OAAO,GAAG,CAAC,CAAC;IAChC,YAAY,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;IAC9B,YAAY,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;IAC7B,YAAY,OAAO,CAAC,kBAAkB,GAAGG,kBAAO,CAAC,2BAA2B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,kBAAkB,CAAC,CAAC;IAC3H,YAAY,OAAO,CAAC,oBAAoB,GAAGA,kBAAO,CAAC,mCAAmC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,oBAAoB,CAAC,CAAC;IACpI,SAAS;IACT,KAAK;;IAEL,IAAI,MAAM,CAAC,gBAAgB,CAAC,2BAA2B,CAAC,SAAS,EAAE;IACnE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,gBAAgB,GAAG;IAC3B,YAAY,GAAG,GAAG,WAAW;IAC7B,gBAAgBG,QAAM,CAAC,IAAI,CAAC,CAAC;IAC7B,gBAAgB,OAAO,IAAI,CAAC,kBAAkB,CAAC;IAC/C,aAAa;IACb,SAAS;;IAET;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,wBAAwB,GAAG;IACnC,YAAY,GAAG,GAAG,WAAW;IAC7B,gBAAgBA,QAAM,CAAC,IAAI,CAAC,CAAC;IAC7B,gBAAgB,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACjD,aAAa;IACb,SAAS;IACT,KAAK,CAAC,CAAC;;IAEP,IAAI,IAAIC,gBAAc,GAAG,IAAIV,qBAAU,EAAE,CAAC;IAC1C,IAAI,IAAIW,qBAAmB,GAAG,IAAIX,qBAAU,EAAE,CAAC;IAC/C,IAAI,IAAI,kBAAkB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC9C,IAAI,IAAI,eAAe,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC3C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,2BAA2B,CAAC,SAAS,CAAC,oBAAoB,GAAG,SAAS,QAAQ,EAAE,SAAS,EAAE,EAAE,EAAE;IACnG;IACA,QAAQ,IAAI,CAACE,eAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,YAAY,MAAM,IAAIC,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9D,SAAS;;IAET,QAAQ,IAAI,CAACD,eAAO,CAAC,SAAS,CAAC,EAAE;IACjC,YAAY,MAAM,IAAIC,oBAAc,CAAC,wBAAwB,CAAC,CAAC;IAC/D,SAAS;;IAET,QAAQ,IAAI,CAACD,eAAO,CAAC,EAAE,CAAC,EAAE;IAC1B,YAAY,MAAM,IAAIC,oBAAc,CAAC,iBAAiB,CAAC,CAAC;IACxD,SAAS;IACT;;IAEA,QAAQ,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;;IAEhD,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;IACzB,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;IAC5B,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;IAC3B,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;IAC1B,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;IAC1B,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;;IAEzB,QAAQ,IAAI,KAAK,GAAGH,qBAAU,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,EAAEU,gBAAc,CAAC,CAAC;;IAEpE,QAAQ,IAAI,UAAU,GAAGC,qBAAmB,CAAC;IAC7C,QAAQX,qBAAU,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;IAC9D,QAAQA,qBAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;;IAEzD,QAAQ,IAAI,SAAS,GAAG,kBAAkB,CAAC;IAC3C,QAAQA,qBAAU,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;IAC7D,QAAQA,qBAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;;IAEvD,QAAQ,IAAI,MAAM,GAAG,eAAe,CAAC;;IAErC;IACA,QAAQA,qBAAU,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;IACtD,QAAQA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACnD,QAAQA,qBAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IACtD,QAAQA,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAC7C,QAAQA,qBAAU,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;IAC7C,QAAQA,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;;IAE7C,QAAQ,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9B,QAAQ,IAAI,CAACE,eAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IACjD,SAAS;IACT,QAAQ,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;;IAEpD;IACA,QAAQA,qBAAU,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;IACtD,QAAQA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACnD,QAAQA,qBAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IACtD,QAAQA,qBAAU,CAAC,KAAK,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAC7C,QAAQA,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;;IAE7C,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,QAAQ,IAAI,CAACE,eAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IACjD,SAAS;IACT,QAAQ,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;;IAEpD;IACA,QAAQA,qBAAU,CAAC,gBAAgB,CAAC,EAAE,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;IACnD,QAAQA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACnD,QAAQA,qBAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IACtD,QAAQA,qBAAU,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAChD,QAAQA,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;;IAE7C,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,QAAQ,IAAI,CAACE,eAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IACjD,SAAS;IACT,QAAQ,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;;IAEpD;IACA,QAAQA,qBAAU,CAAC,gBAAgB,CAAC,EAAE,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;IACnD,QAAQA,qBAAU,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACnD,QAAQA,qBAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IACtD,QAAQA,qBAAU,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IAChD,QAAQA,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;;IAE7C,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,QAAQ,IAAI,CAACE,eAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IACjD,SAAS;IACT,QAAQ,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;;IAEpD;IACA,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,QAAQ,IAAI,CAACE,eAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IACjD,SAAS;IACT,QAAQ,KAAK,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC9B,QAAQ,KAAK,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC9B,QAAQ,KAAK,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IAC9B,QAAQ,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;;IAEzD;IACA,QAAQA,qBAAU,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;;IAE7C,QAAQ,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,QAAQ,IAAI,CAACE,eAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAIE,qBAAU,EAAE,CAAC;IACjD,SAAS;IACT,QAAQ,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3B,QAAQ,KAAK,CAAC,CAAC,GAAG,CAACJ,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;;IAErD,QAAQ,OAAO,IAAI,CAAC,cAAc,CAAC;IACnC,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,2BAA2B,CAAC,SAAS,CAAC,kBAAkB,GAAG,SAAS,kBAAkB,EAAE,mBAAmB,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE;IAC/I,QAAQS,QAAM,CAAC,IAAI,CAAC,CAAC;;IAErB;IACA,QAAQ,IAAI,CAACP,eAAO,CAAC,kBAAkB,CAAC,IAAI,CAACA,eAAO,CAAC,mBAAmB,CAAC,EAAE;IAC3E,YAAY,MAAM,IAAIC,oBAAc,CAAC,+DAA+D,CAAC,CAAC;IACtG,SAAS;IACT,QAAQ,IAAI,kBAAkB,IAAI,CAAC,EAAE;IACrC,YAAY,MAAM,IAAIA,oBAAc,CAAC,+CAA+C,CAAC,CAAC;IACtF,SAAS;IACT,QAAQ,IAAI,mBAAmB,IAAI,CAAC,EAAE;IACtC,YAAY,MAAM,IAAIA,oBAAc,CAAC,gDAAgD,CAAC,CAAC;IACvF,SAAS;IACT,QAAQ,IAAI,CAACD,eAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,YAAY,MAAM,IAAIC,oBAAc,CAAC,uBAAuB,CAAC,CAAC;IAC9D,SAAS;IACT,QAAQ,IAAI,CAACD,eAAO,CAAC,UAAU,CAAC,EAAE;IAClC,YAAY,MAAM,IAAIC,oBAAc,CAAC,wBAAwB,CAAC,CAAC;IAC/D,SAAS;IACT,QAAQ,IAAI,UAAU,IAAI,CAAC,EAAE;IAC7B,YAAY,MAAM,IAAIA,oBAAc,CAAC,uCAAuC,CAAC,CAAC;IAC9E,SAAS;IACT,QAAQ,IAAI,CAACD,eAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,MAAM,IAAIC,oBAAc,CAAC,8BAA8B,CAAC,CAAC;IACrE,SAAS;IACT;;IAEA,QAAQ,IAAI,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;IAC1C,QAAQ,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC;IAC9C,QAAQ,IAAI,WAAW,GAAG,GAAG,GAAG,UAAU,GAAG,QAAQ,GAAG,QAAQ,GAAG,mBAAmB,CAAC;IACvF,QAAQ,QAAQ,GAAG,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC;IAC5C,QAAQ,IAAI,UAAU,GAAG,GAAG,GAAG,UAAU,GAAG,QAAQ,GAAG,QAAQ,GAAG,kBAAkB,CAAC;;IAErF,QAAQ,MAAM,CAAC,CAAC,GAAG,UAAU,CAAC;IAC9B,QAAQ,MAAM,CAAC,CAAC,GAAG,WAAW,CAAC;IAC/B,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,2BAA2B,CAAC,SAAS,CAAC,KAAK,GAAG,SAAS,MAAM,EAAE;IACnE,QAAQ,IAAI,CAACD,eAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,MAAM,GAAG,IAAI,2BAA2B,EAAE,CAAC;IACvD,SAAS;;IAET,QAAQ,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAClC,QAAQ,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAChC,QAAQ,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;IAC9B,QAAQ,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IACpC,QAAQ,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAChC,QAAQ,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;;IAE9B;IACA,QAAQ,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;IACjC,QAAQ,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC;IAClC,QAAQ,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;IAChC,QAAQ,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC;IACnC,QAAQ,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;IACjC,QAAQ,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;;IAEhC,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,2BAA2B,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,KAAK,EAAE;IACnE,QAAQ,QAAQA,eAAO,CAAC,KAAK,CAAC,IAAI,KAAK,YAAY,2BAA2B;IAC9E,gBAAgB,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK;IAC1C,gBAAgB,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;IACxC,gBAAgB,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG;IACtC,gBAAgB,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM;IAC5C,gBAAgB,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;IACxC,gBAAgB,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,EAAE;IACxC,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,2BAA2B,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,KAAK,EAAE,eAAe,EAAE,eAAe,EAAE;IAC5G,QAAQ,OAAO,CAAC,KAAK,KAAK,IAAI;IAC9B,gBAAgBA,eAAO,CAAC,KAAK,CAAC;IAC9B,gBAAgB,KAAK,YAAY,2BAA2B;IAC5D,gBAAgBK,gBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,eAAe,EAAE,eAAe,CAAC;IACnG,gBAAgBA,gBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,eAAe,EAAE,eAAe,CAAC;IACjG,gBAAgBA,gBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,eAAe,EAAE,eAAe,CAAC;IAC/F,gBAAgBA,gBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,eAAe,EAAE,eAAe,CAAC;IACrG,gBAAgBA,gBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,eAAe,EAAE,eAAe,CAAC;IACjG,gBAAgBA,gBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC,CAAC;IACjG,KAAK,CAAC;;ICjbF;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,kBAAkB,CAAC,OAAO,EAAE;IACzC,QAAQ,OAAO,GAAGR,yBAAY,CAAC,OAAO,EAAEA,yBAAY,CAAC,YAAY,CAAC,CAAC;;IAEnE,QAAQ,IAAI,CAAC,iBAAiB,GAAG,IAAI,2BAA2B,EAAE,CAAC;;IAEnE;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;IAC/B,QAAQ,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;IAC9B,QAAQ,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;;IAE/B,QAAQ,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;;IAEzC;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;IAC/C,QAAQ,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;;IAEtC;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,IAAI,GAAGA,yBAAY,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACpD,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;;IAE/B;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,GAAG,GAAGA,yBAAY,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IAC1D,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;;IAE7B;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,OAAO,GAAGA,yBAAY,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IAC1D,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;;IAErC;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,OAAO,GAAGA,yBAAY,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IAC1D,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;IACrC,KAAK;;IAEL;IACA;IACA;IACA;IACA,IAAI,kBAAkB,CAAC,YAAY,GAAG,CAAC,CAAC;;IAExC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,kBAAkB,CAAC,IAAI,GAAG,SAAS,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE;IACpE;IACA,QAAQS,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC5C,QAAQA,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACtC;;IAEA,QAAQ,aAAa,GAAGT,yBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;;IAEvD,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;IAC3C,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC;IACnD,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC;IAC5C,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;IAC3C,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC;IAC/C,QAAQ,KAAK,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC;;IAE7C,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,kBAAkB,CAAC,MAAM,GAAG,SAAS,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE;IACvE;IACA,QAAQS,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACtC;;IAEA,QAAQ,aAAa,GAAGT,yBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;;IAEvD,QAAQ,IAAI,CAACG,eAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,MAAM,GAAG,IAAI,kBAAkB,EAAE,CAAC;IAC9C,SAAS;;IAET,QAAQ,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAC5C,QAAQ,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IACpD,QAAQ,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAC7C,QAAQ,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAC5C,QAAQ,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAChD,QAAQ,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC;;IAE9C,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK,CAAC;;IAEN,IAAI,SAASO,QAAM,CAAC,OAAO,EAAE;IAC7B;IACA,QAAQ,IAAI,CAACP,eAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAACA,eAAO,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAACA,eAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAACA,eAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;IACvH,YAAY,MAAM,IAAIC,oBAAc,CAAC,wDAAwD,CAAC,CAAC;IAC/F,SAAS;IACT;;IAEA,QAAQ,IAAI,CAAC,GAAG,OAAO,CAAC,iBAAiB,CAAC;;IAE1C,QAAQ,IAAI,OAAO,CAAC,GAAG,KAAK,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,WAAW,KAAK,OAAO,CAAC,YAAY;IACxF,YAAY,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,GAAG,KAAK,OAAO,CAAC,IAAI;IAC1E,YAAY,OAAO,CAAC,OAAO,KAAK,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,OAAO,KAAK,OAAO,CAAC,QAAQ,EAAE;IAC1F;IACA,YAAY,IAAI,OAAO,CAAC,GAAG,GAAG,CAAC,IAAI,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE,EAAE;IAC3D,gBAAgB,MAAM,IAAIA,oBAAc,CAAC,mCAAmC,CAAC,CAAC;IAC9E,aAAa;;IAEb,YAAY,IAAI,OAAO,CAAC,WAAW,GAAG,CAAC,EAAE;IACzC,gBAAgB,MAAM,IAAIA,oBAAc,CAAC,+BAA+B,CAAC,CAAC;IAC1E,aAAa;;IAEb,YAAY,IAAI,OAAO,CAAC,IAAI,GAAG,CAAC,IAAI,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE;IAChE,gBAAgB,MAAM,IAAIA,oBAAc,CAAC,mDAAmD,CAAC,CAAC;IAC9F,aAAa;IACb;;IAEA,YAAY,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC;IACvD,YAAY,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC;IACvC,YAAY,OAAO,CAAC,KAAK,GAAG,CAAC,OAAO,CAAC,WAAW,IAAI,CAAC,IAAI,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC;IAC1I,YAAY,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC;IACzC,YAAY,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC;IACvC,YAAY,OAAO,CAAC,eAAe,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;IAC1E,YAAY,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC;IAC/C,YAAY,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC;;IAE/C,YAAY,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;IACjE,YAAY,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IAC9B,YAAY,CAAC,CAAC,KAAK,GAAG,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC;IAClD,YAAY,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;IAC9B,YAAY,CAAC,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAClC,YAAY,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;;IAEhC,YAAY,CAAC,CAAC,KAAK,IAAI,OAAO,CAAC,OAAO,CAAC;IACvC,YAAY,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,OAAO,CAAC;IACtC,YAAY,CAAC,CAAC,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC;IACrC,YAAY,CAAC,CAAC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC;IACxC,SAAS;IACT,KAAK;;IAEL,IAAI,MAAM,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,EAAE;IAC1D;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,gBAAgB,GAAG;IAC3B,YAAY,GAAG,GAAG,WAAW;IAC7B,gBAAgBM,QAAM,CAAC,IAAI,CAAC,CAAC;IAC7B,gBAAgB,OAAO,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;IAC/D,aAAa;IACb,SAAS;;IAET;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,wBAAwB,GAAG;IACnC,YAAY,GAAG,GAAG,WAAW;IAC7B,gBAAgBA,QAAM,CAAC,IAAI,CAAC,CAAC;IAC7B,gBAAgB,OAAO,IAAI,CAAC,iBAAiB,CAAC,wBAAwB,CAAC;IACvE,aAAa;IACb,SAAS;;IAET;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,GAAG;IACf,YAAY,GAAG,GAAG,WAAW;IAC7B,gBAAgBA,QAAM,CAAC,IAAI,CAAC,CAAC;IAC7B,gBAAgB,OAAO,IAAI,CAAC,KAAK,CAAC;IAClC,aAAa;IACb,SAAS;;IAET;IACA;IACA;IACA;IACA,QAAQ,cAAc,GAAG;IACzB,YAAY,GAAG,GAAG,YAAY;IAC9B,gBAAgBA,QAAM,CAAC,IAAI,CAAC,CAAC;IAC7B,gBAAgB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC5C,aAAa;IACb,SAAS;IACT,KAAK,CAAC,CAAC;;IAEP;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,kBAAkB,CAAC,SAAS,CAAC,oBAAoB,GAAG,SAAS,QAAQ,EAAE,SAAS,EAAE,EAAE,EAAE;IAC1F,QAAQA,QAAM,CAAC,IAAI,CAAC,CAAC;IACrB,QAAQ,OAAO,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,QAAQ,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;IACpF,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,kBAAkB,CAAC,SAAS,CAAC,kBAAkB,GAAG,SAAS,kBAAkB,EAAE,mBAAmB,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE;IACtI,QAAQA,QAAM,CAAC,IAAI,CAAC,CAAC;IACrB,QAAQ,OAAO,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;IAChI,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,kBAAkB,CAAC,SAAS,CAAC,KAAK,GAAG,SAAS,MAAM,EAAE;IAC1D,QAAQ,IAAI,CAACP,eAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,MAAM,GAAG,IAAI,kBAAkB,EAAE,CAAC;IAC9C,SAAS;;IAET,QAAQ,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;IAC9C,QAAQ,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;IAC9B,QAAQ,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAChC,QAAQ,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;;IAE9B;IACA,QAAQ,MAAM,CAAC,YAAY,GAAG,SAAS,CAAC;IACxC,QAAQ,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;IAChC,QAAQ,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;IACjC,QAAQ,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;;IAEhC,QAAQ,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;;IAE/D,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,kBAAkB,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,KAAK,EAAE;IAC1D,QAAQ,IAAI,CAACA,eAAO,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,YAAY,kBAAkB,CAAC,EAAE;IACvE,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;;IAET,QAAQO,QAAM,CAAC,IAAI,CAAC,CAAC;IACrB,QAAQA,QAAM,CAAC,KAAK,CAAC,CAAC;;IAEtB,QAAQ,QAAQ,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG;IACtC,gBAAgB,IAAI,CAAC,WAAW,KAAK,KAAK,CAAC,WAAW;IACtD,gBAAgB,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,EAAE;IACxE,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,kBAAkB,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,KAAK,EAAE,eAAe,EAAE,eAAe,EAAE;IACnG,QAAQ,IAAI,CAACP,eAAO,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,YAAY,kBAAkB,CAAC,EAAE;IACvE,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;;IAET,QAAQO,QAAM,CAAC,IAAI,CAAC,CAAC;IACrB,QAAQA,QAAM,CAAC,KAAK,CAAC,CAAC;;IAEtB,QAAQ,QAAQF,gBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,eAAe,EAAE,eAAe,CAAC;IAC/F,gBAAgBA,gBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,WAAW,EAAE,eAAe,EAAE,eAAe,CAAC;IAC/G,gBAAgB,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,KAAK,CAAC,iBAAiB,EAAE,eAAe,EAAE,eAAe,CAAC,EAAE;IACjH,KAAK,CAAC;;IC5WF,IAAI,WAAW,GAAG,CAAC,CAAC;IACxB,IAAI,IAAI,YAAY,GAAG,CAAC,CAAC;;IAEzB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,eAAe,CAAC,OAAO,EAAE;IACtC;IACA,QAAQC,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAChD,QAAQA,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;IAChE,QAAQA,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;IAC9D,QAAQA,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,qBAAqB,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;IACxE;;IAEA,QAAQ,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IACtC,QAAQ,IAAI,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;IAC9C,QAAQ,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,QAAQ,IAAI,YAAY,GAAGT,yBAAY,CAAC,OAAO,CAAC,YAAY,EAAEa,yBAAY,CAAC,OAAO,CAAC,CAAC;;IAEpF;IACA;IACA;IACA,QAAQ,IAAI,aAAa,GAAGb,yBAAY,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;;IAEvE,QAAQ,IAAI,WAAW,CAAC;IACxB,QAAQ,IAAI,mBAAmB,CAAC;IAChC,QAAQ,IAAI,OAAO,YAAY,kBAAkB,EAAE;IACnD,YAAY,WAAW,GAAG,WAAW,CAAC;IACtC,YAAY,mBAAmB,GAAG,kBAAkB,CAAC,YAAY,CAAC;IAClE,SAAS,MAAM,IAAI,OAAO,YAAY,mBAAmB,EAAE;IAC3D,YAAY,WAAW,GAAG,YAAY,CAAC;IACvC,YAAY,mBAAmB,GAAG,mBAAmB,CAAC,YAAY,CAAC;IACnE,SAAS;;IAET,QAAQ,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACxC,QAAQ,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;IACxC,QAAQ,IAAI,CAAC,OAAO,GAAGC,qBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAChD,QAAQ,IAAI,CAAC,YAAY,GAAGa,qBAAU,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAC1D,QAAQ,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IAC5C,QAAQ,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IAC1C,QAAQ,IAAI,CAAC,WAAW,GAAG,uBAAuB,CAAC;;IAEnD;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,YAAY,GAAG,CAAC,GAAG,mBAAmB,GAAGb,qBAAU,CAAC,YAAY,GAAGa,qBAAU,CAAC,YAAY,GAAGD,yBAAY,CAAC,YAAY,CAAC;IACpI,KAAK;;IAEL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,IAAI,GAAG,SAAS,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE;IACjE;IACA,QAAQJ,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC5C,QAAQA,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACtC;;IAEA,QAAQ,aAAa,GAAGT,yBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;;IAEvD,QAAQ,IAAI,WAAW,GAAG,KAAK,CAAC,YAAY,CAAC;IAC7C,QAAQ,IAAI,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC;;IAErC,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,WAAW,CAAC;;IAE7C,QAAQ,IAAI,WAAW,KAAK,WAAW,EAAE;IACzC,YAAY,kBAAkB,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IACnE,YAAY,aAAa,IAAI,kBAAkB,CAAC,YAAY,CAAC;IAC7D,SAAS,MAAM;IACf,YAAY,mBAAmB,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IACpE,YAAY,aAAa,IAAI,mBAAmB,CAAC,YAAY,CAAC;IAC9D,SAAS;;IAET,QAAQC,qBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IAC7D,QAAQ,aAAa,IAAIA,qBAAU,CAAC,YAAY,CAAC;IACjD,QAAQa,qBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IAClE,QAAQ,aAAa,IAAIA,qBAAU,CAAC,YAAY,CAAC;IACjD,QAAQD,yBAAY,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IACrE,QAAQ,aAAa,IAAIA,yBAAY,CAAC,YAAY,CAAC;IACnD,QAAQ,KAAK,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC,cAAc,GAAG,GAAG,GAAG,GAAG,CAAC;;IAEhE,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK,CAAC;;IAEN,IAAI,IAAI,sBAAsB,GAAG,IAAI,kBAAkB,EAAE,CAAC;IAC1D,IAAI,IAAI,uBAAuB,GAAG,IAAI,mBAAmB,EAAE,CAAC;IAC5D,IAAI,IAAI,qBAAqB,GAAG,IAAIC,qBAAU,EAAE,CAAC;IACjD,IAAI,IAAI,iBAAiB,GAAG,IAAIb,qBAAU,EAAE,CAAC;IAC7C,IAAI,IAAI,mBAAmB,GAAG,IAAIY,yBAAY,EAAE,CAAC;;IAEjD;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,MAAM,GAAG,SAAS,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE;IACpE;IACA,QAAQJ,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACtC;;IAEA,QAAQ,aAAa,GAAGT,yBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;;IAEvD,QAAQ,IAAI,WAAW,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;;IAEjD,QAAQ,IAAI,OAAO,CAAC;IACpB,QAAQ,IAAI,WAAW,KAAK,WAAW,EAAE;IACzC,YAAY,OAAO,GAAG,kBAAkB,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,sBAAsB,CAAC,CAAC;IAC9F,YAAY,aAAa,IAAI,kBAAkB,CAAC,YAAY,CAAC;IAC7D,SAAS,MAAM;IACf,YAAY,OAAO,GAAG,mBAAmB,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,uBAAuB,CAAC,CAAC;IAChG,YAAY,aAAa,IAAI,mBAAmB,CAAC,YAAY,CAAC;IAC9D,SAAS;;IAET,QAAQ,IAAI,MAAM,GAAGC,qBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;IAChF,QAAQ,aAAa,IAAIA,qBAAU,CAAC,YAAY,CAAC;IACjD,QAAQ,IAAI,WAAW,GAAGa,qBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,qBAAqB,CAAC,CAAC;IACzF,QAAQ,aAAa,IAAIA,qBAAU,CAAC,YAAY,CAAC;IACjD,QAAQ,IAAI,YAAY,GAAGD,yBAAY,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,mBAAmB,CAAC,CAAC;IAC1F,QAAQ,aAAa,IAAIA,yBAAY,CAAC,YAAY,CAAC;IACnD,QAAQ,IAAI,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC,KAAK,GAAG,CAAC;;IAEzD,QAAQ,IAAI,CAACV,eAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,OAAO,IAAI,eAAe,CAAC;IACvC,gBAAgB,OAAO,GAAG,OAAO;IACjC,gBAAgB,MAAM,GAAG,MAAM;IAC/B,gBAAgB,WAAW,GAAG,WAAW;IACzC,gBAAgB,YAAY,GAAG,YAAY;IAC3C,gBAAgB,cAAc,GAAG,aAAa;IAC9C,aAAa,CAAC,CAAC;IACf,SAAS;;IAET,QAAQ,IAAI,aAAa,GAAG,WAAW,KAAK,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC,QAAQ,GAAG,SAAS,CAAC;IAC9F,QAAQ,MAAM,CAAC,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;;IAEvD,QAAQ,MAAM,CAAC,YAAY,GAAG,WAAW,CAAC;IAC1C,QAAQ,MAAM,CAAC,OAAO,GAAGF,qBAAU,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IAClE,QAAQ,MAAM,CAAC,YAAY,GAAGa,qBAAU,CAAC,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC;IACjF,QAAQ,MAAM,CAAC,aAAa,GAAGD,yBAAY,CAAC,KAAK,CAAC,YAAY,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC;IACtF,QAAQ,MAAM,CAAC,cAAc,GAAG,aAAa,CAAC;;IAE9C,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK,CAAC;;IAEN,IAAI,SAAS,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE;IAClG,QAAQ,IAAI,QAAQ,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;;IAEtC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IACpC,YAAY,IAAIV,eAAO,CAAC,OAAO,CAAC,EAAE;IAClC,gBAAgB,OAAO,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3C,gBAAgB,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC/C,gBAAgB,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC/C,aAAa;IACb,YAAY,IAAIA,eAAO,CAAC,QAAQ,CAAC,EAAE;IACnC,gBAAgB,QAAQ,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IAC7C,gBAAgB,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IACjD,gBAAgB,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IACjD,aAAa;IACb,YAAY,IAAIA,eAAO,CAAC,UAAU,CAAC,EAAE;IACrC,gBAAgB,UAAU,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IACjD,gBAAgB,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IACrD,gBAAgB,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;IACrD,aAAa;IACb,YAAY,MAAM,IAAI,CAAC,CAAC;IACxB,SAAS;;IAET,QAAQ,EAAE,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC;IAC3B,QAAQ,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IAC/B,QAAQ,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IAC/B,QAAQ,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IAC/B,QAAQ,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IAC/B,QAAQ,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IAC/B,QAAQ,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IAC/B,QAAQ,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IAC/B,KAAK;;IAEL,IAAI,IAAI,qBAAqB,GAAG,IAAIY,kBAAO,EAAE,CAAC;IAC9C,IAAI,IAAI,iBAAiB,GAAG,IAAIR,kBAAO,EAAE,CAAC;IAC1C,IAAI,IAAI,oBAAoB,GAAG,IAAIA,kBAAO,EAAE,CAAC;;IAE7C,IAAI,IAAI,iBAAiB,GAAG,IAAIN,qBAAU,EAAE,CAAC;IAC7C,IAAI,IAAI,iBAAiB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC7C,IAAI,IAAI,iBAAiB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC7C,IAAI,IAAI,gBAAgB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC5C,IAAI,IAAI,gBAAgB,GAAG,IAAIA,qBAAU,EAAE,CAAC;IAC5C,IAAI,IAAI,gBAAgB,GAAG,IAAIA,qBAAU,EAAE,CAAC;;IAE5C,IAAI,IAAI,aAAa,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;;IAErC,IAAI,IAAI,iBAAiB,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;IACzC,IAAI,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAII,qBAAU,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAChE,IAAI,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAIA,qBAAU,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC/D,IAAI,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAIA,qBAAU,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC9D,IAAI,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAIA,qBAAU,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;;IAE/D,IAAI,IAAI,qBAAqB,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7C,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAChC,QAAQ,qBAAqB,CAAC,CAAC,CAAC,GAAG,IAAIA,qBAAU,EAAE,CAAC;IACpD,KAAK;;IAEL,IAAI,eAAe,CAAC,qBAAqB,GAAG,SAAS,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE;IAC/I,QAAQ,IAAI,cAAc,GAAGU,kBAAO,CAAC,cAAc,CAAC,WAAW,EAAE,qBAAqB,CAAC,CAAC;IACxF,QAAQ,IAAI,CAAC,GAAGf,yBAAY,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;IAC5D,QAAQ,IAAI,CAAC,GAAGA,yBAAY,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;IAC5D,QAAQ,IAAI,CAAC,GAAGA,yBAAY,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;;IAE5D,QAAQ,CAAC,GAAGe,kBAAO,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACpD,QAAQ,CAAC,GAAGA,kBAAO,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACpD,QAAQ,CAAC,GAAGA,kBAAO,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEpD,QAAQd,qBAAU,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnC,QAAQA,qBAAU,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnC,QAAQA,qBAAU,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEnC,QAAQA,qBAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEhC,QAAQ,IAAI,IAAI,GAAGM,kBAAO,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,iBAAiB,CAAC,CAAC;;IAE3E,QAAQ,IAAI,WAAW,CAAC;IACxB,QAAQ,IAAI,qBAAqB,CAAC;IAClC,QAAQ,IAAI,WAAW,KAAK,WAAW,EAAE;IACzC,YAAY,IAAI,UAAU,GAAG,OAAO,CAAC,gBAAgB,CAAC;IACtD,YAAY,IAAI,cAAc,GAAGA,kBAAO,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,EAAE,oBAAoB,CAAC,CAAC;IAC1F,YAAY,qBAAqB,GAAGA,kBAAO,CAAC,OAAO,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAC;IAC1F,SAAS,MAAM;IACf,YAAY,WAAW,GAAGA,kBAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;IACpF,SAAS;;IAET,QAAQ,IAAIJ,eAAO,CAAC,qBAAqB,CAAC,EAAE;IAC5C,YAAY,aAAa,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;IAC5C,YAAY,aAAa,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;IAC3C,SAAS,MAAM;IACf,YAAY,aAAa,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IACnC,YAAY,aAAa,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;IAC5C,YAAY,aAAa,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;IAC3C,SAAS;;IAET,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IACpC,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IACxC,gBAAgB,IAAI,MAAM,GAAGE,qBAAU,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE9F,gBAAgB,IAAI,CAACF,eAAO,CAAC,qBAAqB,CAAC,EAAE;IACrD,oBAAoB,IAAIA,eAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE;IAC5D,wBAAwB,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC;IAC5D,qBAAqB;;IAErB,oBAAoB,IAAI,IAAI,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;IAChD,oBAAoB,IAAI,GAAG,GAAG,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;;IAEnD,oBAAoB,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,IAAI,GAAG,CAAC;IAChH,oBAAoB,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC;IAChH,oBAAoB,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI,GAAG,GAAG,CAAC,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC;IAC5E,oBAAoB,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;;IAEnC,oBAAoBI,kBAAO,CAAC,gBAAgB,CAAC,WAAW,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAC1E,iBAAiB,MAAM;IACvB,oBAAoB,MAAM,GAAGA,kBAAO,CAAC,gBAAgB,CAAC,qBAAqB,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;;IAE7F;IACA,oBAAoB,IAAI,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC;IAC3C,oBAAoBN,qBAAU,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;;IAEnE,oBAAoBA,qBAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAChE,oBAAoBA,qBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;;IAEzD,oBAAoB,IAAI,GAAG,GAAGA,qBAAU,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IACxD,oBAAoBA,qBAAU,CAAC,gBAAgB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,MAAM,CAAC,CAAC;IACxF,oBAAoBA,qBAAU,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAC3D,iBAAiB;;IAEjB,gBAAgB,SAAS,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACrD,gBAAgB,SAAS,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACzD,gBAAgB,SAAS,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACzD,aAAa;IACb,SAAS;IACT,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,cAAc,GAAG,SAAS,eAAe,EAAE;IAC/D,QAAQ,IAAI,WAAW,GAAG,eAAe,CAAC,YAAY,CAAC;IACvD,QAAQ,IAAI,OAAO,GAAG,eAAe,CAAC,QAAQ,CAAC;IAC/C,QAAQ,IAAI,MAAM,GAAG,eAAe,CAAC,OAAO,CAAC;IAC7C,QAAQ,IAAI,WAAW,GAAG,eAAe,CAAC,YAAY,CAAC;IACvD,QAAQ,IAAI,aAAa,GAAG,eAAe,CAAC,cAAc,CAAC;IAC3D,QAAQ,IAAI,YAAY,GAAG,eAAe,CAAC,aAAa,CAAC;;IAEzD,QAAQ,IAAI,cAAc,GAAG,aAAa,GAAG,CAAC,GAAG,CAAC,CAAC;IACnD,QAAQ,IAAI,SAAS,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACpD,QAAQ,eAAe,CAAC,qBAAqB,CAAC,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;;IAEpG;IACA,QAAQ,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC/B,QAAQ,SAAS,CAAC,MAAM,CAAC,QAAQ,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;IAC9C,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;IAC9C,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;IAC9C,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,QAAQ,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;;IAEtD;IACA,QAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,QAAQ,SAAS,CAAC,MAAM,CAAC,QAAQ,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;IAC9C,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;IAC9C,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;IAC9C,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;IAC9C,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,QAAQ,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;;IAEtD;IACA,QAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,QAAQ,SAAS,CAAC,MAAM,CAAC,QAAQ,SAAS,CAAC,CAAC,CAAC,CAAC;IAC9C,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,QAAQ,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;;IAEtD;IACA,QAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,QAAQ,SAAS,CAAC,MAAM,CAAC,QAAQ,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,QAAQ,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;;IAEtD,QAAQ,IAAI,CAAC,aAAa,EAAE;IAC5B,YAAY,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,SAAS;;IAET,QAAQ,IAAI,UAAU,GAAG,IAAIe,qCAAkB,CAAC;IAChD,YAAY,QAAQ,GAAG,IAAIC,mCAAiB,CAAC;IAC7C,gBAAgB,iBAAiB,GAAGC,mCAAiB,CAAC,MAAM;IAC5D,gBAAgB,sBAAsB,GAAG,CAAC;IAC1C,gBAAgB,MAAM,GAAG,SAAS;IAClC,aAAa,CAAC;IACd,SAAS,CAAC,CAAC;;IAEX,QAAQ,IAAIf,eAAO,CAAC,YAAY,CAAC,MAAM,CAAC,IAAIA,eAAO,CAAC,YAAY,CAAC,OAAO,CAAC,IAAIA,eAAO,CAAC,YAAY,CAAC,SAAS,CAAC,IAAIA,eAAO,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE;IAC1I,YAAY,IAAI,OAAO,GAAGA,eAAO,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC,GAAG,SAAS,CAAC;IAC9G,YAAY,IAAI,QAAQ,GAAGA,eAAO,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC,GAAG,SAAS,CAAC;IAChH,YAAY,IAAI,UAAU,GAAGA,eAAO,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC,GAAG,SAAS,CAAC;IACpH,YAAY,IAAI,EAAE,GAAGA,eAAO,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC,GAAG,SAAS,CAAC;;IAErG,YAAY,IAAI,CAAC,GAAG,iBAAiB,CAAC;IACtC,YAAY,IAAI,CAAC,GAAG,iBAAiB,CAAC;IACtC,YAAY,IAAI,CAAC,GAAG,iBAAiB,CAAC;;IAEtC,YAAY,IAAI,SAAS,GAAGF,qBAAU,CAAC,MAAM,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;IACnE,YAAY,IAAI,SAAS,GAAGA,qBAAU,CAAC,MAAM,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;IACnE,YAAY,IAAI,SAAS,GAAGA,qBAAU,CAAC,MAAM,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;;IAEnE,YAAY,MAAM,GAAG,CAAC,CAAC;IACvB,YAAY,IAAI,aAAa,EAAE;IAC/B,gBAAgB,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1F,gBAAgB,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IAChC,aAAa;IACb,YAAY,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;IACtF,YAAY,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5B,YAAY,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;IAC9F,YAAY,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5B,YAAY,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IACtG,YAAY,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5B,YAAY,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9E,YAAY,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5B,YAAY,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;;IAEtF,YAAY,IAAIE,eAAO,CAAC,OAAO,CAAC,EAAE;IAClC,gBAAgB,UAAU,CAAC,MAAM,GAAG,IAAIc,mCAAiB,CAAC;IAC1D,oBAAoB,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IAC/D,oBAAoB,sBAAsB,GAAG,CAAC;IAC9C,oBAAoB,MAAM,GAAG,OAAO;IACpC,iBAAiB,CAAC,CAAC;IACnB,aAAa;IACb,YAAY,IAAIf,eAAO,CAAC,QAAQ,CAAC,EAAE;IACnC,gBAAgB,UAAU,CAAC,OAAO,GAAG,IAAIc,mCAAiB,CAAC;IAC3D,oBAAoB,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IAC/D,oBAAoB,sBAAsB,GAAG,CAAC;IAC9C,oBAAoB,MAAM,GAAG,QAAQ;IACrC,iBAAiB,CAAC,CAAC;IACnB,aAAa;IACb,YAAY,IAAIf,eAAO,CAAC,UAAU,CAAC,EAAE;IACrC,gBAAgB,UAAU,CAAC,SAAS,GAAG,IAAIc,mCAAiB,CAAC;IAC7D,oBAAoB,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IAC/D,oBAAoB,sBAAsB,GAAG,CAAC;IAC9C,oBAAoB,MAAM,GAAG,UAAU;IACvC,iBAAiB,CAAC,CAAC;IACnB,aAAa;IACb,YAAY,IAAIf,eAAO,CAAC,EAAE,CAAC,EAAE;IAC7B,gBAAgB,UAAU,CAAC,EAAE,GAAG,IAAIc,mCAAiB,CAAC;IACtD,oBAAoB,iBAAiB,GAAGC,mCAAiB,CAAC,KAAK;IAC/D,oBAAoB,sBAAsB,GAAG,CAAC;IAC9C,oBAAoB,MAAM,GAAG,EAAE;IAC/B,iBAAiB,CAAC,CAAC;IACnB,aAAa;IACb,SAAS;;IAET,QAAQ,IAAI,OAAO,GAAG,IAAI,WAAW,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC;IAC1D,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,EAAE,CAAC,EAAE;IACjD,YAAY,IAAI,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC;IACpC,YAAY,IAAI,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;;IAE9B,YAAY,OAAO,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC;IACzC,YAAY,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;IACjD,YAAY,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;IACjD,YAAY,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;IAC7C,YAAY,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;IACjD,YAAY,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;IACjD,SAAS;;IAET,QAAQ,OAAO,IAAIC,0BAAQ,CAAC;IAC5B,YAAY,UAAU,GAAG,UAAU;IACnC,YAAY,OAAO,GAAG,OAAO;IAC7B,YAAY,aAAa,GAAGC,+BAAa,CAAC,SAAS;IACnD,YAAY,cAAc,GAAGC,yBAAc,CAAC,YAAY,CAAC,SAAS,CAAC;IACnE,SAAS,CAAC,CAAC;IACX,KAAK,CAAC;;;;;;;;;;"}