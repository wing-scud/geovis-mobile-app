{"version":3,"file":"createRectangleOutlineGeometry.js","sources":["../../../../Source/Core/RectangleOutlineGeometry.js","../../../../Source/WorkersES6/createRectangleOutlineGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport PolygonPipeline from './PolygonPipeline.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport Rectangle from './Rectangle.js';\r\nimport RectangleGeometryLibrary from './RectangleGeometryLibrary.js';\r\n\r\n    var bottomBoundingSphere = new BoundingSphere();\r\n    var topBoundingSphere = new BoundingSphere();\r\n    var positionScratch = new Cartesian3();\r\n    var rectangleScratch = new Rectangle();\r\n\r\n    function constructRectangle(geometry, computedOptions) {\r\n        var ellipsoid = geometry._ellipsoid;\r\n        var height = computedOptions.height;\r\n        var width = computedOptions.width;\r\n        var northCap = computedOptions.northCap;\r\n        var southCap = computedOptions.southCap;\r\n\r\n        var rowHeight = height;\r\n        var widthMultiplier = 2;\r\n        var size = 0;\r\n        var corners = 4;\r\n        if (northCap) {\r\n            widthMultiplier -= 1;\r\n            rowHeight -= 1;\r\n            size += 1;\r\n            corners -= 2;\r\n        }\r\n        if (southCap) {\r\n            widthMultiplier -= 1;\r\n            rowHeight -= 1;\r\n            size += 1;\r\n            corners -= 2;\r\n        }\r\n        size += (widthMultiplier * width + 2 * rowHeight - corners);\r\n\r\n        var positions = new Float64Array(size * 3);\r\n\r\n        var posIndex = 0;\r\n        var row = 0;\r\n        var col;\r\n        var position = positionScratch;\r\n        if (northCap) {\r\n            RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, row, 0, position);\r\n            positions[posIndex++] = position.x;\r\n            positions[posIndex++] = position.y;\r\n            positions[posIndex++] = position.z;\r\n        } else {\r\n            for (col = 0; col < width; col++) {\r\n                RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, row, col, position);\r\n                positions[posIndex++] = position.x;\r\n                positions[posIndex++] = position.y;\r\n                positions[posIndex++] = position.z;\r\n            }\r\n        }\r\n\r\n        col = width - 1;\r\n        for (row = 1; row < height; row++) {\r\n            RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, row, col, position);\r\n            positions[posIndex++] = position.x;\r\n            positions[posIndex++] = position.y;\r\n            positions[posIndex++] = position.z;\r\n        }\r\n\r\n        row = height - 1;\r\n        if (!southCap) {  // if southCap is true, we dont need to add any more points because the south pole point was added by the iteration above\r\n            for (col = width - 2; col >= 0; col--) {\r\n                RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, row, col, position);\r\n                positions[posIndex++] = position.x;\r\n                positions[posIndex++] = position.y;\r\n                positions[posIndex++] = position.z;\r\n            }\r\n        }\r\n\r\n        col = 0;\r\n        for (row = height - 2; row > 0; row--) {\r\n            RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, row, col, position);\r\n            positions[posIndex++] = position.x;\r\n            positions[posIndex++] = position.y;\r\n            positions[posIndex++] = position.z;\r\n        }\r\n\r\n        var indicesSize = positions.length / 3 * 2;\r\n        var indices = IndexDatatype.createTypedArray(positions.length / 3, indicesSize);\r\n\r\n        var index = 0;\r\n        for (var i = 0; i < (positions.length / 3) - 1; i++) {\r\n            indices[index++] = i;\r\n            indices[index++] = i + 1;\r\n        }\r\n        indices[index++] = (positions.length / 3) - 1;\r\n        indices[index++] = 0;\r\n\r\n        var geo = new Geometry({\r\n            attributes : new GeometryAttributes(),\r\n            primitiveType : PrimitiveType.LINES\r\n        });\r\n\r\n        geo.attributes.position = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : positions\r\n        });\r\n        geo.indices = indices;\r\n\r\n        return geo;\r\n    }\r\n\r\n    function constructExtrudedRectangle(rectangleGeometry, computedOptions) {\r\n        var surfaceHeight = rectangleGeometry._surfaceHeight;\r\n        var extrudedHeight = rectangleGeometry._extrudedHeight;\r\n        var ellipsoid = rectangleGeometry._ellipsoid;\r\n        var minHeight = extrudedHeight;\r\n        var maxHeight = surfaceHeight;\r\n        var geo = constructRectangle(rectangleGeometry, computedOptions);\r\n\r\n        var height = computedOptions.height;\r\n        var width = computedOptions.width;\r\n\r\n        var topPositions = PolygonPipeline.scaleToGeodeticHeight(geo.attributes.position.values, maxHeight, ellipsoid, false);\r\n        var length = topPositions.length;\r\n        var positions = new Float64Array(length * 2);\r\n        positions.set(topPositions);\r\n        var bottomPositions = PolygonPipeline.scaleToGeodeticHeight(geo.attributes.position.values, minHeight, ellipsoid);\r\n        positions.set(bottomPositions, length);\r\n        geo.attributes.position.values = positions;\r\n\r\n        var northCap = computedOptions.northCap;\r\n        var southCap = computedOptions.southCap;\r\n        var corners = 4;\r\n        if (northCap) {\r\n            corners -= 1;\r\n        }\r\n        if (southCap) {\r\n            corners -= 1;\r\n        }\r\n\r\n        var indicesSize = (positions.length / 3 + corners) * 2;\r\n        var indices = IndexDatatype.createTypedArray(positions.length / 3, indicesSize);\r\n        length = positions.length / 6;\r\n        var index = 0;\r\n        for (var i = 0; i < length - 1; i++) {\r\n            indices[index++] = i;\r\n            indices[index++] = i + 1;\r\n            indices[index++] = i + length;\r\n            indices[index++] = i + length + 1;\r\n        }\r\n        indices[index++] = length - 1;\r\n        indices[index++] = 0;\r\n        indices[index++] = length + length - 1;\r\n        indices[index++] = length;\r\n\r\n        indices[index++] = 0;\r\n        indices[index++] = length;\r\n\r\n        var bottomCorner;\r\n        if (northCap) {\r\n            bottomCorner = height - 1;\r\n        } else {\r\n            var topRightCorner = width - 1;\r\n            indices[index++] = topRightCorner;\r\n            indices[index++] = topRightCorner + length;\r\n            bottomCorner = width + height - 2;\r\n        }\r\n\r\n        indices[index++] = bottomCorner;\r\n        indices[index++] = bottomCorner + length;\r\n\r\n        if (!southCap) {\r\n            var bottomLeftCorner = width + bottomCorner - 1;\r\n            indices[index++] = bottomLeftCorner;\r\n            indices[index] = bottomLeftCorner + length;\r\n        }\r\n\r\n        geo.indices = indices;\r\n\r\n        return geo;\r\n    }\r\n\r\n    /**\r\n     * A description of the outline of a a cartographic rectangle on an ellipsoid centered at the origin.\r\n     *\r\n     * @alias RectangleOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Rectangle} options.rectangle A cartographic rectangle with north, south, east and west properties in radians.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the rectangle lies.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Number} [options.height=0.0] The distance in meters between the rectangle and the ellipsoid surface.\r\n     * @param {Number} [options.rotation=0.0] The rotation of the rectangle, in radians. A positive rotation is counter-clockwise.\r\n     * @param {Number} [options.extrudedHeight] The distance in meters between the rectangle's extruded face and the ellipsoid surface.\r\n     *\r\n     * @exception {DeveloperError} <code>options.rectangle.north</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n     * @exception {DeveloperError} <code>options.rectangle.south</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n     * @exception {DeveloperError} <code>options.rectangle.east</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n     * @exception {DeveloperError} <code>options.rectangle.west</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n     * @exception {DeveloperError} <code>options.rectangle.north</code> must be greater than <code>rectangle.south</code>.\r\n     *\r\n     * @see RectangleOutlineGeometry#createGeometry\r\n     *\r\n     * @example\r\n     * var rectangle = new Cesium.RectangleOutlineGeometry({\r\n     *   ellipsoid : Cesium.Ellipsoid.WGS84,\r\n     *   rectangle : Cesium.Rectangle.fromDegrees(-80.0, 39.0, -74.0, 42.0),\r\n     *   height : 10000.0\r\n     * });\r\n     * var geometry = Cesium.RectangleOutlineGeometry.createGeometry(rectangle);\r\n     */\r\n    function RectangleOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var rectangle = options.rectangle;\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        var rotation = defaultValue(options.rotation, 0.0);\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(rectangle)) {\r\n            throw new DeveloperError('rectangle is required.');\r\n        }\r\n        Rectangle.validate(rectangle);\r\n        if (rectangle.north < rectangle.south) {\r\n            throw new DeveloperError('options.rectangle.north must be greater than options.rectangle.south');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var height = defaultValue(options.height, 0.0);\r\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n        this._rectangle = Rectangle.clone(rectangle);\r\n        this._granularity = granularity;\r\n        this._ellipsoid = ellipsoid;\r\n        this._surfaceHeight = Math.max(height, extrudedHeight);\r\n        this._rotation = rotation;\r\n        this._extrudedHeight = Math.min(height, extrudedHeight);\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._workerName = 'createRectangleOutlineGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    RectangleOutlineGeometry.packedLength = Rectangle.packedLength + Ellipsoid.packedLength + 5;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {RectangleOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    RectangleOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(value)) {\r\n            throw new DeveloperError('value is required');\r\n        }\r\n\r\n        if (!defined(array)) {\r\n            throw new DeveloperError('array is required');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        Rectangle.pack(value._rectangle, array, startingIndex);\r\n        startingIndex += Rectangle.packedLength;\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        array[startingIndex++] = value._granularity;\r\n        array[startingIndex++] = value._surfaceHeight;\r\n        array[startingIndex++] = value._rotation;\r\n        array[startingIndex++] = value._extrudedHeight;\r\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchRectangle = new Rectangle();\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var scratchOptions = {\r\n        rectangle : scratchRectangle,\r\n        ellipsoid : scratchEllipsoid,\r\n        granularity : undefined,\r\n        height : undefined,\r\n        rotation : undefined,\r\n        extrudedHeight : undefined,\r\n        offsetAttribute : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {RectangleOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {RectangleOutlineGeometry} The modified result parameter or a new Quaternion instance if one was not provided.\r\n     */\r\n    RectangleOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(array)) {\r\n            throw new DeveloperError('array is required');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var rectangle = Rectangle.unpack(array, startingIndex, scratchRectangle);\r\n        startingIndex += Rectangle.packedLength;\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var granularity = array[startingIndex++];\r\n        var height = array[startingIndex++];\r\n        var rotation = array[startingIndex++];\r\n        var extrudedHeight = array[startingIndex++];\r\n        var offsetAttribute = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.granularity = granularity;\r\n            scratchOptions.height = height;\r\n            scratchOptions.rotation = rotation;\r\n            scratchOptions.extrudedHeight = extrudedHeight;\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n            return new RectangleOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        result._rectangle = Rectangle.clone(rectangle, result._rectangle);\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._surfaceHeight = height;\r\n        result._rotation = rotation;\r\n        result._extrudedHeight = extrudedHeight;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    var nwScratch = new Cartographic();\r\n    /**\r\n     * Computes the geometric representation of an outline of a rectangle, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {RectangleOutlineGeometry} rectangleGeometry A description of the rectangle outline.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     *\r\n     * @exception {DeveloperError} Rotated rectangle is invalid.\r\n     */\r\n    RectangleOutlineGeometry.createGeometry = function(rectangleGeometry) {\r\n        var rectangle = rectangleGeometry._rectangle;\r\n        var ellipsoid = rectangleGeometry._ellipsoid;\r\n        var computedOptions = RectangleGeometryLibrary.computeOptions(rectangle, rectangleGeometry._granularity, rectangleGeometry._rotation, 0, rectangleScratch, nwScratch);\r\n\r\n        var geometry;\r\n        var boundingSphere;\r\n\r\n        if ((CesiumMath.equalsEpsilon(rectangle.north, rectangle.south, CesiumMath.EPSILON10) ||\r\n             (CesiumMath.equalsEpsilon(rectangle.east, rectangle.west, CesiumMath.EPSILON10)))) {\r\n            return undefined;\r\n        }\r\n\r\n        var surfaceHeight = rectangleGeometry._surfaceHeight;\r\n        var extrudedHeight = rectangleGeometry._extrudedHeight;\r\n        var extrude = !CesiumMath.equalsEpsilon(surfaceHeight, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n        var offsetValue;\r\n        if (extrude) {\r\n            geometry = constructExtrudedRectangle(rectangleGeometry, computedOptions);\r\n            if (defined(rectangleGeometry._offsetAttribute)) {\r\n                var size = geometry.attributes.position.values.length / 3;\r\n                var offsetAttribute = new Uint8Array(size);\r\n                if (rectangleGeometry._offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n                    offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n                } else {\r\n                    offsetValue = rectangleGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                    offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n                }\r\n\r\n                geometry.attributes.applyOffset = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                    componentsPerAttribute : 1,\r\n                    values : offsetAttribute\r\n                });\r\n            }\r\n            var topBS = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, surfaceHeight, topBoundingSphere);\r\n            var bottomBS = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, extrudedHeight, bottomBoundingSphere);\r\n            boundingSphere = BoundingSphere.union(topBS, bottomBS);\r\n        } else {\r\n            geometry = constructRectangle(rectangleGeometry, computedOptions);\r\n            geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(geometry.attributes.position.values, surfaceHeight, ellipsoid, false);\r\n\r\n            if (defined(rectangleGeometry._offsetAttribute)) {\r\n                var length = geometry.attributes.position.values.length;\r\n                var applyOffset = new Uint8Array(length / 3);\r\n                offsetValue = rectangleGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                arrayFill(applyOffset, offsetValue);\r\n                geometry.attributes.applyOffset = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                    componentsPerAttribute : 1,\r\n                    values : applyOffset\r\n                });\r\n            }\r\n\r\n            boundingSphere = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, surfaceHeight);\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : geometry.attributes,\r\n            indices : geometry.indices,\r\n            primitiveType : PrimitiveType.LINES,\r\n            boundingSphere : boundingSphere,\r\n            offsetAttribute : rectangleGeometry._offsetAttribute\r\n        });\r\n    };\r\nexport default RectangleOutlineGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport Rectangle from '../Core/Rectangle.js';\r\nimport RectangleOutlineGeometry from '../Core/RectangleOutlineGeometry.js';\r\n\r\n    function createRectangleOutlineGeometry(rectangleGeometry, offset) {\r\n        if (defined(offset)) {\r\n            rectangleGeometry = RectangleOutlineGeometry.unpack(rectangleGeometry, offset);\r\n        }\r\n        rectangleGeometry._ellipsoid = Ellipsoid.clone(rectangleGeometry._ellipsoid);\r\n        rectangleGeometry._rectangle = Rectangle.clone(rectangleGeometry._rectangle);\r\n        return RectangleOutlineGeometry.createGeometry(rectangleGeometry);\r\n    }\r\nexport default createRectangleOutlineGeometry;\r\n"],"names":["BoundingSphere","Cartesian3","Rectangle","RectangleGeometryLibrary","IndexDatatype","Geometry","GeometryAttributes","PrimitiveType","GeometryAttribute","ComponentDatatype","PolygonPipeline","defaultValue","CesiumMath","Ellipsoid","defined","DeveloperError","Cartographic","GeometryOffsetAttribute","arrayFill"],"mappings":"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"}