{"version":3,"file":"Check-f06c0389.js","sources":["../../../../Source/Core/DeveloperError.js","../../../../Source/Core/Check.js"],"sourcesContent":["import defined from './defined.js';\r\n\r\n    /**\r\n     * Constructs an exception object that is thrown due to a developer error, e.g., invalid argument,\r\n     * argument out of range, etc.  This exception should only be thrown during development;\r\n     * it usually indicates a bug in the calling code.  This exception should never be\r\n     * caught; instead the calling code should strive not to generate it.\r\n     * <br /><br />\r\n     * On the other hand, a {@link RuntimeError} indicates an exception that may\r\n     * be thrown at runtime, e.g., out of memory, that the calling code should be prepared\r\n     * to catch.\r\n     *\r\n     * @alias DeveloperError\r\n     * @constructor\r\n     * @extends Error\r\n     *\r\n     * @param {String} [message] The error message for this exception.\r\n     *\r\n     * @see RuntimeError\r\n     */\r\n    function DeveloperError(message) {\r\n        /**\r\n         * 'DeveloperError' indicating that this exception was thrown due to a developer error.\r\n         * @type {String}\r\n         * @readonly\r\n         */\r\n        this.name = 'DeveloperError';\r\n\r\n        /**\r\n         * The explanation for why this exception was thrown.\r\n         * @type {String}\r\n         * @readonly\r\n         */\r\n        this.message = message;\r\n\r\n        //Browsers such as IE don't have a stack property until you actually throw the error.\r\n        var stack;\r\n        try {\r\n            throw new Error();\r\n        } catch (e) {\r\n            stack = e.stack;\r\n        }\r\n\r\n        /**\r\n         * The stack trace of this exception, if available.\r\n         * @type {String}\r\n         * @readonly\r\n         */\r\n        this.stack = stack;\r\n    }\r\n\r\n    if (defined(Object.create)) {\r\n        DeveloperError.prototype = Object.create(Error.prototype);\r\n        DeveloperError.prototype.constructor = DeveloperError;\r\n    }\r\n\r\n    DeveloperError.prototype.toString = function() {\r\n        var str = this.name + ': ' + this.message;\r\n\r\n        if (defined(this.stack)) {\r\n            str += '\\n' + this.stack.toString();\r\n        }\r\n\r\n        return str;\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    DeveloperError.throwInstantiationError = function() {\r\n        throw new DeveloperError('This function defines an interface and should not be called directly.');\r\n    };\r\nexport default DeveloperError;\r\n","import defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\n\r\n    /**\r\n     * Contains functions for checking that supplied arguments are of a specified type\r\n     * or meet specified conditions\r\n     * @private\r\n     */\r\n    var Check = {};\r\n\r\n    /**\r\n     * Contains type checking functions, all using the typeof operator\r\n     */\r\n    Check.typeOf = {};\r\n\r\n    function getUndefinedErrorMessage(name) {\r\n        return name + ' is required, actual value was undefined';\r\n    }\r\n\r\n    function getFailedTypeErrorMessage(actual, expected, name) {\r\n        return 'Expected ' + name + ' to be typeof ' + expected + ', actual typeof was ' + actual;\r\n    }\r\n\r\n    /**\r\n     * Throws if test is not defined\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value that is to be checked\r\n     * @exception {DeveloperError} test must be defined\r\n     */\r\n    Check.defined = function (name, test) {\r\n        if (!defined(test)) {\r\n            throw new DeveloperError(getUndefinedErrorMessage(name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'function'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'function'\r\n     */\r\n    Check.typeOf.func = function (name, test) {\r\n        if (typeof test !== 'function') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'function', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'string'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'string'\r\n     */\r\n    Check.typeOf.string = function (name, test) {\r\n        if (typeof test !== 'string') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'string', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'number'\r\n     */\r\n    Check.typeOf.number = function (name, test) {\r\n        if (typeof test !== 'number') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'number', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number' and less than limit\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @param {Number} limit The limit value to compare against\r\n     * @exception {DeveloperError} test must be typeof 'number' and less than limit\r\n     */\r\n    Check.typeOf.number.lessThan = function (name, test, limit) {\r\n        Check.typeOf.number(name, test);\r\n        if (test >= limit) {\r\n            throw new DeveloperError('Expected ' + name + ' to be less than ' + limit + ', actual value was ' + test);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number' and less than or equal to limit\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @param {Number} limit The limit value to compare against\r\n     * @exception {DeveloperError} test must be typeof 'number' and less than or equal to limit\r\n     */\r\n    Check.typeOf.number.lessThanOrEquals = function (name, test, limit) {\r\n        Check.typeOf.number(name, test);\r\n        if (test > limit) {\r\n            throw new DeveloperError('Expected ' + name + ' to be less than or equal to ' + limit + ', actual value was ' + test);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number' and greater than limit\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @param {Number} limit The limit value to compare against\r\n     * @exception {DeveloperError} test must be typeof 'number' and greater than limit\r\n     */\r\n    Check.typeOf.number.greaterThan = function (name, test, limit) {\r\n        Check.typeOf.number(name, test);\r\n        if (test <= limit) {\r\n            throw new DeveloperError('Expected ' + name + ' to be greater than ' + limit + ', actual value was ' + test);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number' and greater than or equal to limit\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @param {Number} limit The limit value to compare against\r\n     * @exception {DeveloperError} test must be typeof 'number' and greater than or equal to limit\r\n     */\r\n    Check.typeOf.number.greaterThanOrEquals = function (name, test, limit) {\r\n        Check.typeOf.number(name, test);\r\n        if (test < limit) {\r\n            throw new DeveloperError('Expected ' + name + ' to be greater than or equal to' + limit + ', actual value was ' + test);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'object'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'object'\r\n     */\r\n    Check.typeOf.object = function (name, test) {\r\n        if (typeof test !== 'object') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'object', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'boolean'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'boolean'\r\n     */\r\n    Check.typeOf.bool = function (name, test) {\r\n        if (typeof test !== 'boolean') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'boolean', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test1 and test2 is not typeof 'number' and not equal in value\r\n     *\r\n     * @param {String} name1 The name of the first variable being tested\r\n     * @param {String} name2 The name of the second variable being tested against\r\n     * @param {*} test1 The value to test\r\n     * @param {*} test2 The value to test against\r\n     * @exception {DeveloperError} test1 and test2 should be type of 'number' and be equal in value\r\n     */\r\n    Check.typeOf.number.equals = function (name1, name2, test1, test2) {\r\n        Check.typeOf.number(name1, test1);\r\n        Check.typeOf.number(name2, test2);\r\n        if (test1 !== test2) {\r\n            throw new DeveloperError(name1 + ' must be equal to ' + name2 + ', the actual values are ' + test1 + ' and ' + test2);\r\n        }\r\n    };\r\nexport default Check;\r\n"],"names":["defined"],"mappings":"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"}