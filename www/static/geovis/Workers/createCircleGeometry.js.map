{"version":3,"file":"createCircleGeometry.js","sources":["../../../../Source/Core/CircleGeometry.js","../../../../Source/WorkersES6/createCircleGeometry.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport EllipseGeometry from './EllipseGeometry.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport VertexFormat from './VertexFormat.js';\r\n\r\n    /**\r\n     * A description of a circle on the ellipsoid. Circle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n     *\r\n     * @alias CircleGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3} options.center The circle's center point in the fixed frame.\r\n     * @param {Number} options.radius The radius in meters.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\r\n     * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\r\n     * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\r\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n     *\r\n     * @exception {DeveloperError} radius must be greater than zero.\r\n     * @exception {DeveloperError} granularity must be greater than zero.\r\n     *\r\n     * @see CircleGeometry.createGeometry\r\n     * @see Packable\r\n     *\r\n     * @example\r\n     * // Create a circle.\r\n     * var circle = new Cesium.CircleGeometry({\r\n     *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\r\n     *   radius : 100000.0\r\n     * });\r\n     * var geometry = Cesium.CircleGeometry.createGeometry(circle);\r\n     */\r\n    function CircleGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var radius = options.radius;\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('radius', radius);\r\n        //>>includeEnd('debug');\r\n\r\n        var ellipseGeometryOptions = {\r\n            center : options.center,\r\n            semiMajorAxis : radius,\r\n            semiMinorAxis : radius,\r\n            ellipsoid : options.ellipsoid,\r\n            height : options.height,\r\n            extrudedHeight : options.extrudedHeight,\r\n            granularity : options.granularity,\r\n            vertexFormat : options.vertexFormat,\r\n            stRotation : options.stRotation,\r\n            shadowVolume: options.shadowVolume\r\n        };\r\n        this._ellipseGeometry = new EllipseGeometry(ellipseGeometryOptions);\r\n        this._workerName = 'createCircleGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    CircleGeometry.packedLength = EllipseGeometry.packedLength;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {CircleGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    CircleGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        //>>includeEnd('debug');\r\n        return EllipseGeometry.pack(value._ellipseGeometry, array, startingIndex);\r\n    };\r\n\r\n    var scratchEllipseGeometry = new EllipseGeometry({\r\n        center : new Cartesian3(),\r\n        semiMajorAxis : 1.0,\r\n        semiMinorAxis : 1.0\r\n    });\r\n    var scratchOptions = {\r\n        center : new Cartesian3(),\r\n        radius : undefined,\r\n        ellipsoid : Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\r\n        height : undefined,\r\n        extrudedHeight : undefined,\r\n        granularity : undefined,\r\n        vertexFormat : new VertexFormat(),\r\n        stRotation : undefined,\r\n        semiMajorAxis : undefined,\r\n        semiMinorAxis : undefined,\r\n        shadowVolume: undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {CircleGeometry} [result] The object into which to store the result.\r\n     * @returns {CircleGeometry} The modified result parameter or a new CircleGeometry instance if one was not provided.\r\n     */\r\n    CircleGeometry.unpack = function(array, startingIndex, result) {\r\n        var ellipseGeometry = EllipseGeometry.unpack(array, startingIndex, scratchEllipseGeometry);\r\n        scratchOptions.center = Cartesian3.clone(ellipseGeometry._center, scratchOptions.center);\r\n        scratchOptions.ellipsoid = Ellipsoid.clone(ellipseGeometry._ellipsoid, scratchOptions.ellipsoid);\r\n        scratchOptions.height = ellipseGeometry._height;\r\n        scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\r\n        scratchOptions.granularity = ellipseGeometry._granularity;\r\n        scratchOptions.vertexFormat = VertexFormat.clone(ellipseGeometry._vertexFormat, scratchOptions.vertexFormat);\r\n        scratchOptions.stRotation = ellipseGeometry._stRotation;\r\n        scratchOptions.shadowVolume = ellipseGeometry._shadowVolume;\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.radius = ellipseGeometry._semiMajorAxis;\r\n            return new CircleGeometry(scratchOptions);\r\n        }\r\n\r\n        scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\r\n        scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\r\n        result._ellipseGeometry = new EllipseGeometry(scratchOptions);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {CircleGeometry} circleGeometry A description of the circle.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    CircleGeometry.createGeometry = function(circleGeometry) {\r\n        return EllipseGeometry.createGeometry(circleGeometry._ellipseGeometry);\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    CircleGeometry.createShadowVolume = function(circleGeometry, minHeightFunc, maxHeightFunc) {\r\n        var granularity = circleGeometry._ellipseGeometry._granularity;\r\n        var ellipsoid = circleGeometry._ellipseGeometry._ellipsoid;\r\n\r\n        var minHeight = minHeightFunc(granularity, ellipsoid);\r\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\r\n\r\n        return new CircleGeometry({\r\n            center : circleGeometry._ellipseGeometry._center,\r\n            radius : circleGeometry._ellipseGeometry._semiMajorAxis,\r\n            ellipsoid : ellipsoid,\r\n            stRotation : circleGeometry._ellipseGeometry._stRotation,\r\n            granularity : granularity,\r\n            extrudedHeight : minHeight,\r\n            height : maxHeight,\r\n            vertexFormat : VertexFormat.POSITION_ONLY,\r\n            shadowVolume: true\r\n        });\r\n    };\r\n\r\n    Object.defineProperties(CircleGeometry.prototype, {\r\n        /**\r\n         * @private\r\n         */\r\n        rectangle : {\r\n            get : function() {\r\n                return this._ellipseGeometry.rectangle;\r\n            }\r\n        },\r\n        /**\r\n         * For remapping texture coordinates when rendering CircleGeometries as GroundPrimitives.\r\n         * @private\r\n         */\r\n        textureCoordinateRotationPoints : {\r\n            get : function() {\r\n                return this._ellipseGeometry.textureCoordinateRotationPoints;\r\n            }\r\n        }\r\n    });\r\nexport default CircleGeometry;\r\n","import Cartesian3 from '../Core/Cartesian3.js';\r\nimport CircleGeometry from '../Core/CircleGeometry.js';\r\nimport defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\n\r\n    function createCircleGeometry(circleGeometry, offset) {\r\n        if (defined(offset)) {\r\n            circleGeometry = CircleGeometry.unpack(circleGeometry, offset);\r\n        }\r\n        circleGeometry._ellipseGeometry._center = Cartesian3.clone(circleGeometry._ellipseGeometry._center);\r\n        circleGeometry._ellipseGeometry._ellipsoid = Ellipsoid.clone(circleGeometry._ellipseGeometry._ellipsoid);\r\n        return CircleGeometry.createGeometry(circleGeometry);\r\n    }\r\nexport default createCircleGeometry;\r\n"],"names":["defaultValue","Check","EllipseGeometry","Cartesian3","Ellipsoid","VertexFormat","defined"],"mappings":"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"}