{"version":3,"file":"PolygonGeometryLibrary-c49741d2.js","sources":["../../../../Source/Core/Queue.js","../../../../Source/Core/PolygonGeometryLibrary.js"],"sourcesContent":["\r\n    /**\r\n     * A queue that can enqueue items at the end, and dequeue items from the front.\r\n     *\r\n     * @alias Queue\r\n     * @constructor\r\n     */\r\n    function Queue() {\r\n        this._array = [];\r\n        this._offset = 0;\r\n        this._length = 0;\r\n    }\r\n\r\n    Object.defineProperties(Queue.prototype, {\r\n        /**\r\n         * The length of the queue.\r\n         *\r\n         * @memberof Queue.prototype\r\n         *\r\n         * @type {Number}\r\n         * @readonly\r\n         */\r\n        length : {\r\n            get : function() {\r\n                return this._length;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Enqueues the specified item.\r\n     *\r\n     * @param {*} item The item to enqueue.\r\n     */\r\n    Queue.prototype.enqueue = function(item) {\r\n        this._array.push(item);\r\n        this._length++;\r\n    };\r\n\r\n    /**\r\n     * Dequeues an item.  Returns undefined if the queue is empty.\r\n     *\r\n     * @returns {*} The the dequeued item.\r\n     */\r\n    Queue.prototype.dequeue = function() {\r\n        if (this._length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        var array = this._array;\r\n        var offset = this._offset;\r\n        var item = array[offset];\r\n        array[offset] = undefined;\r\n\r\n        offset++;\r\n        if ((offset > 10) && (offset * 2 > array.length)) {\r\n            //compact array\r\n            this._array = array.slice(offset);\r\n            offset = 0;\r\n        }\r\n\r\n        this._offset = offset;\r\n        this._length--;\r\n\r\n        return item;\r\n    };\r\n\r\n    /**\r\n     * Returns the item at the front of the queue.  Returns undefined if the queue is empty.\r\n     *\r\n     * @returns {*} The item at the front of the queue.\r\n     */\r\n    Queue.prototype.peek = function() {\r\n        if (this._length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        return this._array[this._offset];\r\n    };\r\n\r\n    /**\r\n     * Check whether this queue contains the specified item.\r\n     *\r\n     * @param {*} item The item to search for.\r\n     */\r\n    Queue.prototype.contains = function(item) {\r\n        return this._array.indexOf(item) !== -1;\r\n    };\r\n\r\n    /**\r\n     * Remove all items from the queue.\r\n     */\r\n    Queue.prototype.clear = function() {\r\n        this._array.length = this._offset = this._length = 0;\r\n    };\r\n\r\n    /**\r\n     * Sort the items in the queue in-place.\r\n     *\r\n     * @param {Queue~Comparator} compareFunction A function that defines the sort order.\r\n     */\r\n    Queue.prototype.sort = function(compareFunction) {\r\n        if (this._offset > 0) {\r\n            //compact array\r\n            this._array = this._array.slice(this._offset);\r\n            this._offset = 0;\r\n        }\r\n\r\n        this._array.sort(compareFunction);\r\n    };\r\n\r\n    /**\r\n     * A function used to compare two items while sorting a queue.\r\n     * @callback Queue~Comparator\r\n     *\r\n     * @param {*} a An item in the array.\r\n     * @param {*} b An item in the array.\r\n     * @returns {Number} Returns a negative value if <code>a</code> is less than <code>b</code>,\r\n     *          a positive value if <code>a</code> is greater than <code>b</code>, or\r\n     *          0 if <code>a</code> is equal to <code>b</code>.\r\n     *\r\n     * @example\r\n     * function compareNumbers(a, b) {\r\n     *     return a - b;\r\n     * }\r\n     */\r\nexport default Queue;\r\n","import ArcType from './ArcType.js';\r\nimport arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\r\nimport Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport EllipsoidRhumbLine from './EllipsoidRhumbLine.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryPipeline from './GeometryPipeline.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix3 from './Matrix3.js';\r\nimport PolygonPipeline from './PolygonPipeline.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport Quaternion from './Quaternion.js';\r\nimport Queue from './Queue.js';\r\nimport WindingOrder from './WindingOrder.js';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    var PolygonGeometryLibrary = {};\r\n\r\n    PolygonGeometryLibrary.computeHierarchyPackedLength = function(polygonHierarchy) {\r\n        var numComponents = 0;\r\n        var stack = [polygonHierarchy];\r\n        while (stack.length > 0) {\r\n            var hierarchy = stack.pop();\r\n            if (!defined(hierarchy)) {\r\n                continue;\r\n            }\r\n\r\n            numComponents += 2;\r\n\r\n            var positions = hierarchy.positions;\r\n            var holes = hierarchy.holes;\r\n\r\n            if (defined(positions)) {\r\n                numComponents += positions.length * Cartesian3.packedLength;\r\n            }\r\n\r\n            if (defined(holes)) {\r\n                var length = holes.length;\r\n                for (var i = 0; i < length; ++i) {\r\n                    stack.push(holes[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return numComponents;\r\n    };\r\n\r\n    PolygonGeometryLibrary.packPolygonHierarchy = function(polygonHierarchy, array, startingIndex) {\r\n        var stack = [polygonHierarchy];\r\n        while (stack.length > 0) {\r\n            var hierarchy = stack.pop();\r\n            if (!defined(hierarchy)) {\r\n                continue;\r\n            }\r\n\r\n            var positions = hierarchy.positions;\r\n            var holes = hierarchy.holes;\r\n\r\n            array[startingIndex++] = defined(positions) ? positions.length : 0;\r\n            array[startingIndex++] = defined(holes) ? holes.length : 0;\r\n\r\n            if (defined(positions)) {\r\n                var positionsLength = positions.length;\r\n                for (var i = 0; i < positionsLength; ++i, startingIndex += 3) {\r\n                    Cartesian3.pack(positions[i], array, startingIndex);\r\n                }\r\n            }\r\n\r\n            if (defined(holes)) {\r\n                var holesLength = holes.length;\r\n                for (var j = 0; j < holesLength; ++j) {\r\n                    stack.push(holes[j]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return startingIndex;\r\n    };\r\n\r\n    PolygonGeometryLibrary.unpackPolygonHierarchy = function(array, startingIndex) {\r\n        var positionsLength = array[startingIndex++];\r\n        var holesLength = array[startingIndex++];\r\n\r\n        var positions = new Array(positionsLength);\r\n        var holes = holesLength > 0 ? new Array(holesLength) : undefined;\r\n\r\n        for (var i = 0; i < positionsLength; ++i, startingIndex += Cartesian3.packedLength) {\r\n            positions[i] = Cartesian3.unpack(array, startingIndex);\r\n        }\r\n\r\n        for (var j = 0; j < holesLength; ++j) {\r\n            holes[j] = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\r\n            startingIndex = holes[j].startingIndex;\r\n            delete holes[j].startingIndex;\r\n        }\r\n\r\n        return {\r\n            positions : positions,\r\n            holes : holes,\r\n            startingIndex : startingIndex\r\n        };\r\n    };\r\n\r\n    var distanceScratch = new Cartesian3();\r\n    function getPointAtDistance(p0, p1, distance, length) {\r\n        Cartesian3.subtract(p1, p0, distanceScratch);\r\n        Cartesian3.multiplyByScalar(distanceScratch, distance / length, distanceScratch);\r\n        Cartesian3.add(p0, distanceScratch, distanceScratch);\r\n        return [distanceScratch.x, distanceScratch.y, distanceScratch.z];\r\n    }\r\n\r\n    PolygonGeometryLibrary.subdivideLineCount = function(p0, p1, minDistance) {\r\n        var distance = Cartesian3.distance(p0, p1);\r\n        var n = distance / minDistance;\r\n        var countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\r\n        return Math.pow(2, countDivide);\r\n    };\r\n\r\n    var scratchCartographic0 = new Cartographic();\r\n    var scratchCartographic1 = new Cartographic();\r\n    var scratchCartographic2 = new Cartographic();\r\n    var scratchCartesian0 = new Cartesian3();\r\n    PolygonGeometryLibrary.subdivideRhumbLineCount = function(ellipsoid, p0, p1, minDistance) {\r\n        var c0 = ellipsoid.cartesianToCartographic(p0, scratchCartographic0);\r\n        var c1 = ellipsoid.cartesianToCartographic(p1, scratchCartographic1);\r\n        var rhumb = new EllipsoidRhumbLine(c0, c1, ellipsoid);\r\n        var n = rhumb.surfaceDistance / minDistance;\r\n        var countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\r\n        return Math.pow(2, countDivide);\r\n    };\r\n\r\n    PolygonGeometryLibrary.subdivideLine = function(p0, p1, minDistance, result) {\r\n        var numVertices = PolygonGeometryLibrary.subdivideLineCount(p0, p1, minDistance);\r\n        var length = Cartesian3.distance(p0, p1);\r\n        var distanceBetweenVertices = length / numVertices;\r\n\r\n        if (!defined(result)) {\r\n            result = [];\r\n        }\r\n\r\n        var positions = result;\r\n        positions.length = numVertices * 3;\r\n\r\n        var index = 0;\r\n        for ( var i = 0; i < numVertices; i++) {\r\n            var p = getPointAtDistance(p0, p1, i * distanceBetweenVertices, length);\r\n            positions[index++] = p[0];\r\n            positions[index++] = p[1];\r\n            positions[index++] = p[2];\r\n        }\r\n\r\n        return positions;\r\n    };\r\n\r\n    PolygonGeometryLibrary.subdivideRhumbLine = function(ellipsoid, p0, p1, minDistance, result) {\r\n        var c0 = ellipsoid.cartesianToCartographic(p0, scratchCartographic0);\r\n        var c1 = ellipsoid.cartesianToCartographic(p1, scratchCartographic1);\r\n        var rhumb = new EllipsoidRhumbLine(c0, c1, ellipsoid);\r\n\r\n        var n = rhumb.surfaceDistance / minDistance;\r\n        var countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\r\n        var numVertices = Math.pow(2, countDivide);\r\n        var distanceBetweenVertices = rhumb.surfaceDistance / numVertices;\r\n\r\n        if (!defined(result)) {\r\n            result = [];\r\n        }\r\n\r\n        var positions = result;\r\n        positions.length = numVertices * 3;\r\n\r\n        var index = 0;\r\n        for ( var i = 0; i < numVertices; i++) {\r\n            var c = rhumb.interpolateUsingSurfaceDistance(i * distanceBetweenVertices, scratchCartographic2);\r\n            var p = ellipsoid.cartographicToCartesian(c, scratchCartesian0);\r\n            positions[index++] = p.x;\r\n            positions[index++] = p.y;\r\n            positions[index++] = p.z;\r\n        }\r\n\r\n        return positions;\r\n    };\r\n\r\n    var scaleToGeodeticHeightN1 = new Cartesian3();\r\n    var scaleToGeodeticHeightN2 = new Cartesian3();\r\n    var scaleToGeodeticHeightP1 = new Cartesian3();\r\n    var scaleToGeodeticHeightP2 = new Cartesian3();\r\n\r\n    PolygonGeometryLibrary.scaleToGeodeticHeightExtruded = function(geometry, maxHeight, minHeight, ellipsoid, perPositionHeight) {\r\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n\r\n        var n1 = scaleToGeodeticHeightN1;\r\n        var n2 = scaleToGeodeticHeightN2;\r\n        var p = scaleToGeodeticHeightP1;\r\n        var p2 = scaleToGeodeticHeightP2;\r\n\r\n        if (defined(geometry) && defined(geometry.attributes) && defined(geometry.attributes.position)) {\r\n            var positions = geometry.attributes.position.values;\r\n            var length = positions.length / 2;\r\n\r\n            for ( var i = 0; i < length; i += 3) {\r\n                Cartesian3.fromArray(positions, i, p);\r\n\r\n                ellipsoid.geodeticSurfaceNormal(p, n1);\r\n                p2 = ellipsoid.scaleToGeodeticSurface(p, p2);\r\n                n2 = Cartesian3.multiplyByScalar(n1, minHeight, n2);\r\n                n2 = Cartesian3.add(p2, n2, n2);\r\n                positions[i + length] = n2.x;\r\n                positions[i + 1 + length] = n2.y;\r\n                positions[i + 2 + length] = n2.z;\r\n\r\n                if (perPositionHeight) {\r\n                    p2 = Cartesian3.clone(p, p2);\r\n                }\r\n                n2 = Cartesian3.multiplyByScalar(n1, maxHeight, n2);\r\n                n2 = Cartesian3.add(p2, n2, n2);\r\n                positions[i] = n2.x;\r\n                positions[i + 1] = n2.y;\r\n                positions[i + 2] = n2.z;\r\n            }\r\n        }\r\n        return geometry;\r\n    };\r\n\r\n    PolygonGeometryLibrary.polygonOutlinesFromHierarchy = function(polygonHierarchy, scaleToEllipsoidSurface, ellipsoid) {\r\n        // create from a polygon hierarchy\r\n        // Algorithm adapted from http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\r\n        var polygons = [];\r\n        var queue = new Queue();\r\n        queue.enqueue(polygonHierarchy);\r\n        var i;\r\n        var j;\r\n        var length;\r\n        while (queue.length !== 0) {\r\n            var outerNode = queue.dequeue();\r\n            var outerRing = outerNode.positions;\r\n            if (scaleToEllipsoidSurface) {\r\n                length = outerRing.length;\r\n                for (i = 0; i < length; i++) {\r\n                    ellipsoid.scaleToGeodeticSurface(outerRing[i], outerRing[i]);\r\n                }\r\n            }\r\n            outerRing = arrayRemoveDuplicates(outerRing, Cartesian3.equalsEpsilon, true);\r\n            if (outerRing.length < 3) {\r\n                continue;\r\n            }\r\n\r\n            var numChildren = outerNode.holes ? outerNode.holes.length : 0;\r\n            // The outer polygon contains inner polygons\r\n            for (i = 0; i < numChildren; i++) {\r\n                var hole = outerNode.holes[i];\r\n                var holePositions = hole.positions;\r\n                if (scaleToEllipsoidSurface) {\r\n                    length = holePositions.length;\r\n                    for (j = 0; j < length; ++j) {\r\n                        ellipsoid.scaleToGeodeticSurface(holePositions[j], holePositions[j]);\r\n                    }\r\n                }\r\n                holePositions = arrayRemoveDuplicates(holePositions, Cartesian3.equalsEpsilon, true);\r\n                if (holePositions.length < 3) {\r\n                    continue;\r\n                }\r\n                polygons.push(holePositions);\r\n\r\n                var numGrandchildren = 0;\r\n                if (defined(hole.holes)) {\r\n                    numGrandchildren = hole.holes.length;\r\n                }\r\n\r\n                for (j = 0; j < numGrandchildren; j++) {\r\n                    queue.enqueue(hole.holes[j]);\r\n                }\r\n            }\r\n\r\n            polygons.push(outerRing);\r\n        }\r\n\r\n        return polygons;\r\n    };\r\n\r\n    PolygonGeometryLibrary.polygonsFromHierarchy = function(polygonHierarchy, projectPointsTo2D, scaleToEllipsoidSurface, ellipsoid) {\r\n        // create from a polygon hierarchy\r\n        // Algorithm adapted from http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\r\n        var hierarchy = [];\r\n        var polygons = [];\r\n\r\n        var queue = new Queue();\r\n        queue.enqueue(polygonHierarchy);\r\n\r\n        while (queue.length !== 0) {\r\n            var outerNode = queue.dequeue();\r\n            var outerRing = outerNode.positions;\r\n            var holes = outerNode.holes;\r\n\r\n            var i;\r\n            var length;\r\n            if (scaleToEllipsoidSurface) {\r\n                length = outerRing.length;\r\n                for (i = 0; i < length; i++) {\r\n                    ellipsoid.scaleToGeodeticSurface(outerRing[i], outerRing[i]);\r\n                }\r\n            }\r\n\r\n            outerRing = arrayRemoveDuplicates(outerRing, Cartesian3.equalsEpsilon, true);\r\n            if (outerRing.length < 3) {\r\n                continue;\r\n            }\r\n\r\n            var positions2D = projectPointsTo2D(outerRing);\r\n            if (!defined(positions2D)) {\r\n                continue;\r\n            }\r\n            var holeIndices = [];\r\n\r\n            var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\r\n            if (originalWindingOrder === WindingOrder.CLOCKWISE) {\r\n                positions2D.reverse();\r\n                outerRing = outerRing.slice().reverse();\r\n            }\r\n\r\n            var positions = outerRing.slice();\r\n            var numChildren = defined(holes) ? holes.length : 0;\r\n            var polygonHoles = [];\r\n            var j;\r\n\r\n            for (i = 0; i < numChildren; i++) {\r\n                var hole = holes[i];\r\n                var holePositions = hole.positions;\r\n                if (scaleToEllipsoidSurface) {\r\n                    length = holePositions.length;\r\n                    for (j = 0; j < length; ++j) {\r\n                        ellipsoid.scaleToGeodeticSurface(holePositions[j], holePositions[j]);\r\n                    }\r\n                }\r\n\r\n                holePositions = arrayRemoveDuplicates(holePositions, Cartesian3.equalsEpsilon, true);\r\n                if (holePositions.length < 3) {\r\n                    continue;\r\n                }\r\n\r\n                var holePositions2D = projectPointsTo2D(holePositions);\r\n                if (!defined(holePositions2D)) {\r\n                    continue;\r\n                }\r\n\r\n                originalWindingOrder = PolygonPipeline.computeWindingOrder2D(holePositions2D);\r\n                if (originalWindingOrder === WindingOrder.CLOCKWISE) {\r\n                    holePositions2D.reverse();\r\n                    holePositions = holePositions.slice().reverse();\r\n                }\r\n\r\n                polygonHoles.push(holePositions);\r\n                holeIndices.push(positions.length);\r\n                positions = positions.concat(holePositions);\r\n                positions2D = positions2D.concat(holePositions2D);\r\n\r\n                var numGrandchildren = 0;\r\n                if (defined(hole.holes)) {\r\n                    numGrandchildren = hole.holes.length;\r\n                }\r\n\r\n                for (j = 0; j < numGrandchildren; j++) {\r\n                    queue.enqueue(hole.holes[j]);\r\n                }\r\n            }\r\n\r\n            hierarchy.push({\r\n                outerRing : outerRing,\r\n                holes : polygonHoles\r\n            });\r\n            polygons.push({\r\n                positions : positions,\r\n                positions2D : positions2D,\r\n                holes : holeIndices\r\n            });\r\n        }\r\n\r\n        return {\r\n            hierarchy : hierarchy,\r\n            polygons : polygons\r\n        };\r\n    };\r\n\r\n    var computeBoundingRectangleCartesian2 = new Cartesian2();\r\n    var computeBoundingRectangleCartesian3 = new Cartesian3();\r\n    var computeBoundingRectangleQuaternion = new Quaternion();\r\n    var computeBoundingRectangleMatrix3 = new Matrix3();\r\n    PolygonGeometryLibrary.computeBoundingRectangle = function (planeNormal, projectPointTo2D, positions, angle, result) {\r\n        var rotation = Quaternion.fromAxisAngle(planeNormal, angle, computeBoundingRectangleQuaternion);\r\n        var textureMatrix = Matrix3.fromQuaternion(rotation, computeBoundingRectangleMatrix3);\r\n\r\n        var minX = Number.POSITIVE_INFINITY;\r\n        var maxX = Number.NEGATIVE_INFINITY;\r\n        var minY = Number.POSITIVE_INFINITY;\r\n        var maxY = Number.NEGATIVE_INFINITY;\r\n\r\n        var length = positions.length;\r\n        for ( var i = 0; i < length; ++i) {\r\n            var p = Cartesian3.clone(positions[i], computeBoundingRectangleCartesian3);\r\n            Matrix3.multiplyByVector(textureMatrix, p, p);\r\n            var st = projectPointTo2D(p, computeBoundingRectangleCartesian2);\r\n\r\n            if (defined(st)) {\r\n                minX = Math.min(minX, st.x);\r\n                maxX = Math.max(maxX, st.x);\r\n\r\n                minY = Math.min(minY, st.y);\r\n                maxY = Math.max(maxY, st.y);\r\n            }\r\n        }\r\n\r\n        result.x = minX;\r\n        result.y = minY;\r\n        result.width = maxX - minX;\r\n        result.height = maxY - minY;\r\n        return result;\r\n    };\r\n\r\n    PolygonGeometryLibrary.createGeometryFromPositions = function(ellipsoid, polygon, granularity, perPositionHeight, vertexFormat, arcType) {\r\n        var indices = PolygonPipeline.triangulate(polygon.positions2D, polygon.holes);\r\n\r\n        /* If polygon is completely unrenderable, just use the first three vertices */\r\n        if (indices.length < 3) {\r\n            indices = [0, 1, 2];\r\n        }\r\n\r\n        var positions = polygon.positions;\r\n\r\n        if (perPositionHeight) {\r\n            var length = positions.length;\r\n            var flattenedPositions = new Array(length * 3);\r\n            var index = 0;\r\n            for ( var i = 0; i < length; i++) {\r\n                var p = positions[i];\r\n                flattenedPositions[index++] = p.x;\r\n                flattenedPositions[index++] = p.y;\r\n                flattenedPositions[index++] = p.z;\r\n            }\r\n            var geometry = new Geometry({\r\n                attributes : {\r\n                    position : new GeometryAttribute({\r\n                        componentDatatype : ComponentDatatype.DOUBLE,\r\n                        componentsPerAttribute : 3,\r\n                        values : flattenedPositions\r\n                    })\r\n                },\r\n                indices : indices,\r\n                primitiveType : PrimitiveType.TRIANGLES\r\n            });\r\n\r\n            if (vertexFormat.normal) {\r\n                return GeometryPipeline.computeNormal(geometry);\r\n            }\r\n\r\n            return geometry;\r\n        }\r\n\r\n        if (arcType === ArcType.GEODESIC) {\r\n            return PolygonPipeline.computeSubdivision(ellipsoid, positions, indices, granularity);\r\n        } else if (arcType === ArcType.RHUMB) {\r\n            return PolygonPipeline.computeRhumbLineSubdivision(ellipsoid, positions, indices, granularity);\r\n        }\r\n    };\r\n\r\n    var computeWallIndicesSubdivided = [];\r\n    var p1Scratch = new Cartesian3();\r\n    var p2Scratch = new Cartesian3();\r\n\r\n    PolygonGeometryLibrary.computeWallGeometry = function(positions, ellipsoid, granularity, perPositionHeight, arcType) {\r\n        var edgePositions;\r\n        var topEdgeLength;\r\n        var i;\r\n        var p1;\r\n        var p2;\r\n\r\n        var length = positions.length;\r\n        var index = 0;\r\n\r\n        if (!perPositionHeight) {\r\n            var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n\r\n            var numVertices = 0;\r\n            if (arcType === ArcType.GEODESIC) {\r\n                for (i = 0; i < length; i++) {\r\n                    numVertices += PolygonGeometryLibrary.subdivideLineCount(positions[i], positions[(i + 1) % length], minDistance);\r\n                }\r\n            } else if (arcType === ArcType.RHUMB) {\r\n                for (i = 0; i < length; i++) {\r\n                    numVertices += PolygonGeometryLibrary.subdivideRhumbLineCount(ellipsoid, positions[i], positions[(i + 1) % length], minDistance);\r\n                }\r\n            }\r\n\r\n            topEdgeLength = (numVertices + length) * 3;\r\n            edgePositions = new Array(topEdgeLength * 2);\r\n            for (i = 0; i < length; i++) {\r\n                p1 = positions[i];\r\n                p2 = positions[(i + 1) % length];\r\n\r\n                var tempPositions;\r\n                if (arcType === ArcType.GEODESIC) {\r\n                    tempPositions = PolygonGeometryLibrary.subdivideLine(p1, p2, minDistance, computeWallIndicesSubdivided);\r\n                } else if (arcType === ArcType.RHUMB) {\r\n                    tempPositions = PolygonGeometryLibrary.subdivideRhumbLine(ellipsoid, p1, p2, minDistance, computeWallIndicesSubdivided);\r\n                }\r\n                var tempPositionsLength = tempPositions.length;\r\n                for (var j = 0; j < tempPositionsLength; ++j, ++index) {\r\n                    edgePositions[index] = tempPositions[j];\r\n                    edgePositions[index + topEdgeLength] = tempPositions[j];\r\n                }\r\n\r\n                edgePositions[index] = p2.x;\r\n                edgePositions[index + topEdgeLength] = p2.x;\r\n                ++index;\r\n\r\n                edgePositions[index] = p2.y;\r\n                edgePositions[index + topEdgeLength] = p2.y;\r\n                ++index;\r\n\r\n                edgePositions[index] = p2.z;\r\n                edgePositions[index + topEdgeLength] = p2.z;\r\n                ++index;\r\n            }\r\n        } else {\r\n            topEdgeLength = length * 3 * 2;\r\n            edgePositions = new Array(topEdgeLength * 2);\r\n            for (i = 0; i < length; i++) {\r\n                p1 = positions[i];\r\n                p2 = positions[(i + 1) % length];\r\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p1.x;\r\n                ++index;\r\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p1.y;\r\n                ++index;\r\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p1.z;\r\n                ++index;\r\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p2.x;\r\n                ++index;\r\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p2.y;\r\n                ++index;\r\n                edgePositions[index] = edgePositions[index + topEdgeLength] = p2.z;\r\n                ++index;\r\n            }\r\n        }\r\n\r\n        length = edgePositions.length;\r\n        var indices = IndexDatatype.createTypedArray(length / 3, length - positions.length * 6);\r\n        var edgeIndex = 0;\r\n        length /= 6;\r\n\r\n        for (i = 0; i < length; i++) {\r\n            var UL = i;\r\n            var UR = UL + 1;\r\n            var LL = UL + length;\r\n            var LR = LL + 1;\r\n\r\n            p1 = Cartesian3.fromArray(edgePositions, UL * 3, p1Scratch);\r\n            p2 = Cartesian3.fromArray(edgePositions, UR * 3, p2Scratch);\r\n            if (Cartesian3.equalsEpsilon(p1, p2, CesiumMath.EPSILON10, CesiumMath.EPSILON10)) {\r\n                //skip corner\r\n                continue;\r\n            }\r\n\r\n            indices[edgeIndex++] = UL;\r\n            indices[edgeIndex++] = LL;\r\n            indices[edgeIndex++] = UR;\r\n            indices[edgeIndex++] = UR;\r\n            indices[edgeIndex++] = LL;\r\n            indices[edgeIndex++] = LR;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : new GeometryAttributes({\r\n                position : new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.DOUBLE,\r\n                    componentsPerAttribute : 3,\r\n                    values : edgePositions\r\n                })\r\n            }),\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.TRIANGLES\r\n        });\r\n    };\r\nexport default PolygonGeometryLibrary;\r\n"],"names":["defined","Cartesian3","CesiumMath","Cartographic","EllipsoidRhumbLine","defaultValue","Ellipsoid","arrayRemoveDuplicates","PolygonPipeline","WindingOrder","Cartesian2","Quaternion","Matrix3","Geometry","GeometryAttribute","ComponentDatatype","PrimitiveType","GeometryPipeline","ArcType","IndexDatatype","GeometryAttributes"],"mappings":"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"}