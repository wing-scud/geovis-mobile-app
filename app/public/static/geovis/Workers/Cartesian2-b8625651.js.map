{"version":3,"file":"Cartesian2-b8625651.js","sources":["../../../../Source/Core/Cartesian3.js","../../../../Source/Core/scaleToGeodeticSurface.js","../../../../Source/Core/Cartographic.js","../../../../Source/Core/Ellipsoid.js","../../../../Source/Core/Rectangle.js","../../../../Source/Core/Cartesian2.js"],"sourcesContent":["import Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\n\r\n    /**\r\n     * A 3D Cartesian point.\r\n     * @alias Cartesian3\r\n     * @constructor\r\n     *\r\n     * @param {Number} [x=0.0] The X component.\r\n     * @param {Number} [y=0.0] The Y component.\r\n     * @param {Number} [z=0.0] The Z component.\r\n     *\r\n     * @see Cartesian2\r\n     * @see Cartesian4\r\n     * @see Packable\r\n     */\r\n    function Cartesian3(x, y, z) {\r\n        /**\r\n         * The X component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.x = defaultValue(x, 0.0);\r\n\r\n        /**\r\n         * The Y component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.y = defaultValue(y, 0.0);\r\n\r\n        /**\r\n         * The Z component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.z = defaultValue(z, 0.0);\r\n    }\r\n\r\n    /**\r\n     * Converts the provided Spherical into Cartesian3 coordinates.\r\n     *\r\n     * @param {Spherical} spherical The Spherical to be converted to Cartesian3.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n     */\r\n    Cartesian3.fromSpherical = function(spherical, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('spherical', spherical);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        var clock = spherical.clock;\r\n        var cone = spherical.cone;\r\n        var magnitude = defaultValue(spherical.magnitude, 1.0);\r\n        var radial = magnitude * Math.sin(cone);\r\n        result.x = radial * Math.cos(clock);\r\n        result.y = radial * Math.sin(clock);\r\n        result.z = magnitude * Math.cos(cone);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Cartesian3 instance from x, y and z coordinates.\r\n     *\r\n     * @param {Number} x The x coordinate.\r\n     * @param {Number} y The y coordinate.\r\n     * @param {Number} z The z coordinate.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n     */\r\n    Cartesian3.fromElements = function(x, y, z, result) {\r\n        if (!defined(result)) {\r\n            return new Cartesian3(x, y, z);\r\n        }\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Cartesian3 instance.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian to duplicate.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided. (Returns undefined if cartesian is undefined)\r\n     */\r\n    Cartesian3.clone = function(cartesian, result) {\r\n        if (!defined(cartesian)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new Cartesian3(cartesian.x, cartesian.y, cartesian.z);\r\n        }\r\n\r\n        result.x = cartesian.x;\r\n        result.y = cartesian.y;\r\n        result.z = cartesian.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Cartesian3 instance from an existing Cartesian4.  This simply takes the\r\n     * x, y, and z properties of the Cartesian4 and drops w.\r\n     * @function\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian4 instance to create a Cartesian3 instance from.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n     */\r\n    Cartesian3.fromCartesian4 = Cartesian3.clone;\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Cartesian3.packedLength = 3;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Cartesian3} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Cartesian3.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value.x;\r\n        array[startingIndex++] = value.y;\r\n        array[startingIndex] = value.z;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Cartesian3} [result] The object into which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n     */\r\n    Cartesian3.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n        result.x = array[startingIndex++];\r\n        result.y = array[startingIndex++];\r\n        result.z = array[startingIndex];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Flattens an array of Cartesian3s into an array of components.\r\n     *\r\n     * @param {Cartesian3[]} array The array of cartesians to pack.\r\n     * @param {Number[]} [result] The array onto which to store the result. If this is a typed array, it must have array.length * 3 components, else a {@link DeveloperError} will be thrown. If it is a regular array, it will be resized to have (array.length * 3) elements.\r\n     * @returns {Number[]} The packed array.\r\n     */\r\n    Cartesian3.packArray = function(array, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        var length = array.length;\r\n        var resultLength = length * 3;\r\n        if (!defined(result)) {\r\n            result = new Array(resultLength);\r\n        } else if (!Array.isArray(result) && result.length !== resultLength) {\r\n            throw new DeveloperError('If result is a typed array, it must have exactly array.length * 3 elements');\r\n        } else if (result.length !== resultLength) {\r\n            result.length = resultLength;\r\n        }\r\n\r\n        for (var i = 0; i < length; ++i) {\r\n            Cartesian3.pack(array[i], result, i * 3);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Unpacks an array of cartesian components into an array of Cartesian3s.\r\n     *\r\n     * @param {Number[]} array The array of components to unpack.\r\n     * @param {Cartesian3[]} [result] The array onto which to store the result.\r\n     * @returns {Cartesian3[]} The unpacked array.\r\n     */\r\n    Cartesian3.unpackArray = function(array, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        Check.typeOf.number.greaterThanOrEquals('array.length', array.length, 3);\r\n        if (array.length % 3 !== 0) {\r\n            throw new DeveloperError('array length must be a multiple of 3.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var length = array.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length / 3);\r\n        } else {\r\n            result.length = length / 3;\r\n        }\r\n\r\n        for (var i = 0; i < length; i += 3) {\r\n            var index = i / 3;\r\n            result[index] = Cartesian3.unpack(array, i, result[index]);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Cartesian3 from three consecutive elements in an array.\r\n     * @function\r\n     *\r\n     * @param {Number[]} array The array whose three consecutive elements correspond to the x, y, and z components, respectively.\r\n     * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to the x component.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Create a Cartesian3 with (1.0, 2.0, 3.0)\r\n     * var v = [1.0, 2.0, 3.0];\r\n     * var p = Cesium.Cartesian3.fromArray(v);\r\n     *\r\n     * // Create a Cartesian3 with (1.0, 2.0, 3.0) using an offset into an array\r\n     * var v2 = [0.0, 0.0, 1.0, 2.0, 3.0];\r\n     * var p2 = Cesium.Cartesian3.fromArray(v2, 2);\r\n     */\r\n    Cartesian3.fromArray = Cartesian3.unpack;\r\n\r\n    /**\r\n     * Computes the value of the maximum component for the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian3} cartesian The cartesian to use.\r\n     * @returns {Number} The value of the maximum component.\r\n     */\r\n    Cartesian3.maximumComponent = function(cartesian) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        //>>includeEnd('debug');\r\n\r\n        return Math.max(cartesian.x, cartesian.y, cartesian.z);\r\n    };\r\n\r\n    /**\r\n     * Computes the value of the minimum component for the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian3} cartesian The cartesian to use.\r\n     * @returns {Number} The value of the minimum component.\r\n     */\r\n    Cartesian3.minimumComponent = function(cartesian) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        //>>includeEnd('debug');\r\n\r\n        return Math.min(cartesian.x, cartesian.y, cartesian.z);\r\n    };\r\n\r\n    /**\r\n     * Compares two Cartesians and computes a Cartesian which contains the minimum components of the supplied Cartesians.\r\n     *\r\n     * @param {Cartesian3} first A cartesian to compare.\r\n     * @param {Cartesian3} second A cartesian to compare.\r\n     * @param {Cartesian3} result The object into which to store the result.\r\n     * @returns {Cartesian3} A cartesian with the minimum components.\r\n     */\r\n    Cartesian3.minimumByComponent = function(first, second, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('first', first);\r\n        Check.typeOf.object('second', second);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = Math.min(first.x, second.x);\r\n        result.y = Math.min(first.y, second.y);\r\n        result.z = Math.min(first.z, second.z);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares two Cartesians and computes a Cartesian which contains the maximum components of the supplied Cartesians.\r\n     *\r\n     * @param {Cartesian3} first A cartesian to compare.\r\n     * @param {Cartesian3} second A cartesian to compare.\r\n     * @param {Cartesian3} result The object into which to store the result.\r\n     * @returns {Cartesian3} A cartesian with the maximum components.\r\n     */\r\n    Cartesian3.maximumByComponent = function(first, second, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('first', first);\r\n        Check.typeOf.object('second', second);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = Math.max(first.x, second.x);\r\n        result.y = Math.max(first.y, second.y);\r\n        result.z = Math.max(first.z, second.z);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the provided Cartesian's squared magnitude.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian instance whose squared magnitude is to be computed.\r\n     * @returns {Number} The squared magnitude.\r\n     */\r\n    Cartesian3.magnitudeSquared = function(cartesian) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        //>>includeEnd('debug');\r\n\r\n        return cartesian.x * cartesian.x + cartesian.y * cartesian.y + cartesian.z * cartesian.z;\r\n    };\r\n\r\n    /**\r\n     * Computes the Cartesian's magnitude (length).\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian instance whose magnitude is to be computed.\r\n     * @returns {Number} The magnitude.\r\n     */\r\n    Cartesian3.magnitude = function(cartesian) {\r\n        return Math.sqrt(Cartesian3.magnitudeSquared(cartesian));\r\n    };\r\n\r\n    var distanceScratch = new Cartesian3();\r\n\r\n    /**\r\n     * Computes the distance between two points.\r\n     *\r\n     * @param {Cartesian3} left The first point to compute the distance from.\r\n     * @param {Cartesian3} right The second point to compute the distance to.\r\n     * @returns {Number} The distance between two points.\r\n     *\r\n     * @example\r\n     * // Returns 1.0\r\n     * var d = Cesium.Cartesian3.distance(new Cesium.Cartesian3(1.0, 0.0, 0.0), new Cesium.Cartesian3(2.0, 0.0, 0.0));\r\n     */\r\n    Cartesian3.distance = function(left, right) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        //>>includeEnd('debug');\r\n\r\n        Cartesian3.subtract(left, right, distanceScratch);\r\n        return Cartesian3.magnitude(distanceScratch);\r\n    };\r\n\r\n    /**\r\n     * Computes the squared distance between two points.  Comparing squared distances\r\n     * using this function is more efficient than comparing distances using {@link Cartesian3#distance}.\r\n     *\r\n     * @param {Cartesian3} left The first point to compute the distance from.\r\n     * @param {Cartesian3} right The second point to compute the distance to.\r\n     * @returns {Number} The distance between two points.\r\n     *\r\n     * @example\r\n     * // Returns 4.0, not 2.0\r\n     * var d = Cesium.Cartesian3.distanceSquared(new Cesium.Cartesian3(1.0, 0.0, 0.0), new Cesium.Cartesian3(3.0, 0.0, 0.0));\r\n     */\r\n    Cartesian3.distanceSquared = function(left, right) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        //>>includeEnd('debug');\r\n\r\n        Cartesian3.subtract(left, right, distanceScratch);\r\n        return Cartesian3.magnitudeSquared(distanceScratch);\r\n    };\r\n\r\n    /**\r\n     * Computes the normalized form of the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian to be normalized.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.normalize = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var magnitude = Cartesian3.magnitude(cartesian);\r\n\r\n        result.x = cartesian.x / magnitude;\r\n        result.y = cartesian.y / magnitude;\r\n        result.z = cartesian.z / magnitude;\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (isNaN(result.x) || isNaN(result.y) || isNaN(result.z)) {\r\n            throw new DeveloperError('normalized result is not a number');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the dot (scalar) product of two Cartesians.\r\n     *\r\n     * @param {Cartesian3} left The first Cartesian.\r\n     * @param {Cartesian3} right The second Cartesian.\r\n     * @returns {Number} The dot product.\r\n     */\r\n    Cartesian3.dot = function(left, right) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        //>>includeEnd('debug');\r\n\r\n        return left.x * right.x + left.y * right.y + left.z * right.z;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise product of two Cartesians.\r\n     *\r\n     * @param {Cartesian3} left The first Cartesian.\r\n     * @param {Cartesian3} right The second Cartesian.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.multiplyComponents = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = left.x * right.x;\r\n        result.y = left.y * right.y;\r\n        result.z = left.z * right.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise quotient of two Cartesians.\r\n     *\r\n     * @param {Cartesian3} left The first Cartesian.\r\n     * @param {Cartesian3} right The second Cartesian.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.divideComponents = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = left.x / right.x;\r\n        result.y = left.y / right.y;\r\n        result.z = left.z / right.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise sum of two Cartesians.\r\n     *\r\n     * @param {Cartesian3} left The first Cartesian.\r\n     * @param {Cartesian3} right The second Cartesian.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.add = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = left.x + right.x;\r\n        result.y = left.y + right.y;\r\n        result.z = left.z + right.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise difference of two Cartesians.\r\n     *\r\n     * @param {Cartesian3} left The first Cartesian.\r\n     * @param {Cartesian3} right The second Cartesian.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.subtract = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = left.x - right.x;\r\n        result.y = left.y - right.y;\r\n        result.z = left.z - right.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Multiplies the provided Cartesian componentwise by the provided scalar.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian to be scaled.\r\n     * @param {Number} scalar The scalar to multiply with.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.multiplyByScalar = function(cartesian, scalar, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.number('scalar', scalar);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = cartesian.x * scalar;\r\n        result.y = cartesian.y * scalar;\r\n        result.z = cartesian.z * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Divides the provided Cartesian componentwise by the provided scalar.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian to be divided.\r\n     * @param {Number} scalar The scalar to divide by.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.divideByScalar = function(cartesian, scalar, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.number('scalar', scalar);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = cartesian.x / scalar;\r\n        result.y = cartesian.y / scalar;\r\n        result.z = cartesian.z / scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Negates the provided Cartesian.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian to be negated.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.negate = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = -cartesian.x;\r\n        result.y = -cartesian.y;\r\n        result.z = -cartesian.z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the absolute value of the provided Cartesian.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian whose absolute value is to be computed.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.abs = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = Math.abs(cartesian.x);\r\n        result.y = Math.abs(cartesian.y);\r\n        result.z = Math.abs(cartesian.z);\r\n        return result;\r\n    };\r\n\r\n    var lerpScratch = new Cartesian3();\r\n    /**\r\n     * Computes the linear interpolation or extrapolation at t using the provided cartesians.\r\n     *\r\n     * @param {Cartesian3} start The value corresponding to t at 0.0.\r\n     * @param {Cartesian3} end The value corresponding to t at 1.0.\r\n     * @param {Number} t The point along t at which to interpolate.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter.\r\n     */\r\n    Cartesian3.lerp = function(start, end, t, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('start', start);\r\n        Check.typeOf.object('end', end);\r\n        Check.typeOf.number('t', t);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        Cartesian3.multiplyByScalar(end, t, lerpScratch);\r\n        result = Cartesian3.multiplyByScalar(start, 1.0 - t, result);\r\n        return Cartesian3.add(lerpScratch, result, result);\r\n    };\r\n\r\n    var angleBetweenScratch = new Cartesian3();\r\n    var angleBetweenScratch2 = new Cartesian3();\r\n    /**\r\n     * Returns the angle, in radians, between the provided Cartesians.\r\n     *\r\n     * @param {Cartesian3} left The first Cartesian.\r\n     * @param {Cartesian3} right The second Cartesian.\r\n     * @returns {Number} The angle between the Cartesians.\r\n     */\r\n    Cartesian3.angleBetween = function(left, right) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        //>>includeEnd('debug');\r\n\r\n        Cartesian3.normalize(left, angleBetweenScratch);\r\n        Cartesian3.normalize(right, angleBetweenScratch2);\r\n        var cosine = Cartesian3.dot(angleBetweenScratch, angleBetweenScratch2);\r\n        var sine = Cartesian3.magnitude(Cartesian3.cross(angleBetweenScratch, angleBetweenScratch2, angleBetweenScratch));\r\n        return Math.atan2(sine, cosine);\r\n    };\r\n\r\n    var mostOrthogonalAxisScratch = new Cartesian3();\r\n    /**\r\n     * Returns the axis that is most orthogonal to the provided Cartesian.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian on which to find the most orthogonal axis.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The most orthogonal axis.\r\n     */\r\n    Cartesian3.mostOrthogonalAxis = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var f = Cartesian3.normalize(cartesian, mostOrthogonalAxisScratch);\r\n        Cartesian3.abs(f, f);\r\n\r\n        if (f.x <= f.y) {\r\n            if (f.x <= f.z) {\r\n                result = Cartesian3.clone(Cartesian3.UNIT_X, result);\r\n            } else {\r\n                result = Cartesian3.clone(Cartesian3.UNIT_Z, result);\r\n            }\r\n        } else if (f.y <= f.z) {\r\n            result = Cartesian3.clone(Cartesian3.UNIT_Y, result);\r\n        } else {\r\n            result = Cartesian3.clone(Cartesian3.UNIT_Z, result);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Projects vector a onto vector b\r\n     * @param {Cartesian3} a The vector that needs projecting\r\n     * @param {Cartesian3} b The vector to project onto\r\n     * @param {Cartesian3} result The result cartesian\r\n     * @returns {Cartesian3} The modified result parameter\r\n     */\r\n    Cartesian3.projectVector = function(a, b, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('a', a);\r\n        Check.defined('b', b);\r\n        Check.defined('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var scalar = Cartesian3.dot(a, b) / Cartesian3.dot(b, b);\r\n        return Cartesian3.multiplyByScalar(b, scalar, result);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Cartesians componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian3} [left] The first Cartesian.\r\n     * @param {Cartesian3} [right] The second Cartesian.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartesian3.equals = function(left, right) {\r\n            return (left === right) ||\r\n              ((defined(left)) &&\r\n               (defined(right)) &&\r\n               (left.x === right.x) &&\r\n               (left.y === right.y) &&\r\n               (left.z === right.z));\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Cartesian3.equalsArray = function(cartesian, array, offset) {\r\n        return cartesian.x === array[offset] &&\r\n               cartesian.y === array[offset + 1] &&\r\n               cartesian.z === array[offset + 2];\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Cartesians componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian3} [left] The first Cartesian.\r\n     * @param {Cartesian3} [right] The second Cartesian.\r\n     * @param {Number} [relativeEpsilon] The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartesian3.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                CesiumMath.equalsEpsilon(left.x, right.x, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(left.y, right.y, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(left.z, right.z, relativeEpsilon, absoluteEpsilon));\r\n    };\r\n\r\n    /**\r\n     * Computes the cross (outer) product of two Cartesians.\r\n     *\r\n     * @param {Cartesian3} left The first Cartesian.\r\n     * @param {Cartesian3} right The second Cartesian.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The cross product.\r\n     */\r\n    Cartesian3.cross = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var leftX = left.x;\r\n        var leftY = left.y;\r\n        var leftZ = left.z;\r\n        var rightX = right.x;\r\n        var rightY = right.y;\r\n        var rightZ = right.z;\r\n\r\n        var x = leftY * rightZ - leftZ * rightY;\r\n        var y = leftZ * rightX - leftX * rightZ;\r\n        var z = leftX * rightY - leftY * rightX;\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the midpoint between the right and left Cartesian.\r\n     * @param {Cartesian3} left The first Cartesian.\r\n     * @param {Cartesian3} right The second Cartesian.\r\n     * @param {Cartesian3} result The object onto which to store the result.\r\n     * @returns {Cartesian3} The midpoint.\r\n     */\r\n    Cartesian3.midpoint = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = (left.x + right.x) * 0.5;\r\n        result.y = (left.y + right.y) * 0.5;\r\n        result.z = (left.z + right.z) * 0.5;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns a Cartesian3 position from longitude and latitude values given in degrees.\r\n     *\r\n     * @param {Number} longitude The longitude, in degrees\r\n     * @param {Number} latitude The latitude, in degrees\r\n     * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The position\r\n     *\r\n     * @example\r\n     * var position = Cesium.Cartesian3.fromDegrees(-115.0, 37.0);\r\n     */\r\n    Cartesian3.fromDegrees = function(longitude, latitude, height, ellipsoid, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('longitude', longitude);\r\n        Check.typeOf.number('latitude', latitude);\r\n        //>>includeEnd('debug');\r\n\r\n        longitude = CesiumMath.toRadians(longitude);\r\n        latitude = CesiumMath.toRadians(latitude);\r\n        return Cartesian3.fromRadians(longitude, latitude, height, ellipsoid, result);\r\n    };\r\n\r\n    var scratchN = new Cartesian3();\r\n    var scratchK = new Cartesian3();\r\n    var wgs84RadiiSquared = new Cartesian3(6378137.0 * 6378137.0, 6378137.0 * 6378137.0, 6356752.3142451793 * 6356752.3142451793);\r\n\r\n    /**\r\n     * Returns a Cartesian3 position from longitude and latitude values given in radians.\r\n     *\r\n     * @param {Number} longitude The longitude, in radians\r\n     * @param {Number} latitude The latitude, in radians\r\n     * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The position\r\n     *\r\n     * @example\r\n     * var position = Cesium.Cartesian3.fromRadians(-2.007, 0.645);\r\n     */\r\n    Cartesian3.fromRadians = function(longitude, latitude, height, ellipsoid, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('longitude', longitude);\r\n        Check.typeOf.number('latitude', latitude);\r\n        //>>includeEnd('debug');\r\n\r\n        height = defaultValue(height, 0.0);\r\n        var radiiSquared = defined(ellipsoid) ? ellipsoid.radiiSquared : wgs84RadiiSquared;\r\n\r\n        var cosLatitude = Math.cos(latitude);\r\n        scratchN.x = cosLatitude * Math.cos(longitude);\r\n        scratchN.y = cosLatitude * Math.sin(longitude);\r\n        scratchN.z = Math.sin(latitude);\r\n        scratchN = Cartesian3.normalize(scratchN, scratchN);\r\n\r\n        Cartesian3.multiplyComponents(radiiSquared, scratchN, scratchK);\r\n        var gamma = Math.sqrt(Cartesian3.dot(scratchN, scratchK));\r\n        scratchK = Cartesian3.divideByScalar(scratchK, gamma, scratchK);\r\n        scratchN = Cartesian3.multiplyByScalar(scratchN, height, scratchN);\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n        return Cartesian3.add(scratchK, scratchN, result);\r\n    };\r\n\r\n    /**\r\n     * Returns an array of Cartesian3 positions given an array of longitude and latitude values given in degrees.\r\n     *\r\n     * @param {Number[]} coordinates A list of longitude and latitude values. Values alternate [longitude, latitude, longitude, latitude...].\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the coordinates lie.\r\n     * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\r\n     * @returns {Cartesian3[]} The array of positions.\r\n     *\r\n     * @example\r\n     * var positions = Cesium.Cartesian3.fromDegreesArray([-115.0, 37.0, -107.0, 33.0]);\r\n     */\r\n    Cartesian3.fromDegreesArray = function(coordinates, ellipsoid, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('coordinates', coordinates);\r\n        if (coordinates.length < 2 || coordinates.length % 2 !== 0) {\r\n            throw new DeveloperError('the number of coordinates must be a multiple of 2 and at least 2');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var length = coordinates.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length / 2);\r\n        } else {\r\n            result.length = length / 2;\r\n        }\r\n\r\n        for (var i = 0; i < length; i += 2) {\r\n            var longitude = coordinates[i];\r\n            var latitude = coordinates[i + 1];\r\n            var index = i / 2;\r\n            result[index] = Cartesian3.fromDegrees(longitude, latitude, 0, ellipsoid, result[index]);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns an array of Cartesian3 positions given an array of longitude and latitude values given in radians.\r\n     *\r\n     * @param {Number[]} coordinates A list of longitude and latitude values. Values alternate [longitude, latitude, longitude, latitude...].\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the coordinates lie.\r\n     * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\r\n     * @returns {Cartesian3[]} The array of positions.\r\n     *\r\n     * @example\r\n     * var positions = Cesium.Cartesian3.fromRadiansArray([-2.007, 0.645, -1.867, .575]);\r\n     */\r\n    Cartesian3.fromRadiansArray = function(coordinates, ellipsoid, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('coordinates', coordinates);\r\n        if (coordinates.length < 2 || coordinates.length % 2 !== 0) {\r\n            throw new DeveloperError('the number of coordinates must be a multiple of 2 and at least 2');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var length = coordinates.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length / 2);\r\n        } else {\r\n            result.length = length / 2;\r\n        }\r\n\r\n        for (var i = 0; i < length; i += 2) {\r\n            var longitude = coordinates[i];\r\n            var latitude = coordinates[i + 1];\r\n            var index = i / 2;\r\n            result[index] = Cartesian3.fromRadians(longitude, latitude, 0, ellipsoid, result[index]);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns an array of Cartesian3 positions given an array of longitude, latitude and height values where longitude and latitude are given in degrees.\r\n     *\r\n     * @param {Number[]} coordinates A list of longitude, latitude and height values. Values alternate [longitude, latitude, height, longitude, latitude, height...].\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n     * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\r\n     * @returns {Cartesian3[]} The array of positions.\r\n     *\r\n     * @example\r\n     * var positions = Cesium.Cartesian3.fromDegreesArrayHeights([-115.0, 37.0, 100000.0, -107.0, 33.0, 150000.0]);\r\n     */\r\n    Cartesian3.fromDegreesArrayHeights = function(coordinates, ellipsoid, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('coordinates', coordinates);\r\n        if (coordinates.length < 3 || coordinates.length % 3 !== 0) {\r\n            throw new DeveloperError('the number of coordinates must be a multiple of 3 and at least 3');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var length = coordinates.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length / 3);\r\n        } else {\r\n            result.length = length / 3;\r\n        }\r\n\r\n        for (var i = 0; i < length; i += 3) {\r\n            var longitude = coordinates[i];\r\n            var latitude = coordinates[i + 1];\r\n            var height = coordinates[i + 2];\r\n            var index = i / 3;\r\n            result[index] = Cartesian3.fromDegrees(longitude, latitude, height, ellipsoid, result[index]);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns an array of Cartesian3 positions given an array of longitude, latitude and height values where longitude and latitude are given in radians.\r\n     *\r\n     * @param {Number[]} coordinates A list of longitude, latitude and height values. Values alternate [longitude, latitude, height, longitude, latitude, height...].\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n     * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\r\n     * @returns {Cartesian3[]} The array of positions.\r\n     *\r\n     * @example\r\n     * var positions = Cesium.Cartesian3.fromRadiansArrayHeights([-2.007, 0.645, 100000.0, -1.867, .575, 150000.0]);\r\n     */\r\n    Cartesian3.fromRadiansArrayHeights = function(coordinates, ellipsoid, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('coordinates', coordinates);\r\n        if (coordinates.length < 3 || coordinates.length % 3 !== 0) {\r\n            throw new DeveloperError('the number of coordinates must be a multiple of 3 and at least 3');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var length = coordinates.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length / 3);\r\n        } else {\r\n            result.length = length / 3;\r\n        }\r\n\r\n        for (var i = 0; i < length; i += 3) {\r\n            var longitude = coordinates[i];\r\n            var latitude = coordinates[i + 1];\r\n            var height = coordinates[i + 2];\r\n            var index = i / 3;\r\n            result[index] = Cartesian3.fromRadians(longitude, latitude, height, ellipsoid, result[index]);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * An immutable Cartesian3 instance initialized to (0.0, 0.0, 0.0).\r\n     *\r\n     * @type {Cartesian3}\r\n     * @constant\r\n     */\r\n    Cartesian3.ZERO = Object.freeze(new Cartesian3(0.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian3 instance initialized to (1.0, 0.0, 0.0).\r\n     *\r\n     * @type {Cartesian3}\r\n     * @constant\r\n     */\r\n    Cartesian3.UNIT_X = Object.freeze(new Cartesian3(1.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian3 instance initialized to (0.0, 1.0, 0.0).\r\n     *\r\n     * @type {Cartesian3}\r\n     * @constant\r\n     */\r\n    Cartesian3.UNIT_Y = Object.freeze(new Cartesian3(0.0, 1.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian3 instance initialized to (0.0, 0.0, 1.0).\r\n     *\r\n     * @type {Cartesian3}\r\n     * @constant\r\n     */\r\n    Cartesian3.UNIT_Z = Object.freeze(new Cartesian3(0.0, 0.0, 1.0));\r\n\r\n    /**\r\n     * Duplicates this Cartesian3 instance.\r\n     *\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n     */\r\n    Cartesian3.prototype.clone = function(result) {\r\n        return Cartesian3.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian3} [right] The right hand side Cartesian.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartesian3.prototype.equals = function(right) {\r\n        return Cartesian3.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian3} [right] The right hand side Cartesian.\r\n     * @param {Number} [relativeEpsilon] The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartesian3.prototype.equalsEpsilon = function(right, relativeEpsilon, absoluteEpsilon) {\r\n        return Cartesian3.equalsEpsilon(this, right, relativeEpsilon, absoluteEpsilon);\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this Cartesian in the format '(x, y, z)'.\r\n     *\r\n     * @returns {String} A string representing this Cartesian in the format '(x, y, z)'.\r\n     */\r\n    Cartesian3.prototype.toString = function() {\r\n        return '(' + this.x + ', ' + this.y + ', ' + this.z + ')';\r\n    };\r\nexport default Cartesian3;\r\n","import Cartesian3 from './Cartesian3.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\n\r\n    var scaleToGeodeticSurfaceIntersection = new Cartesian3();\r\n    var scaleToGeodeticSurfaceGradient = new Cartesian3();\r\n\r\n    /**\r\n     * Scales the provided Cartesian position along the geodetic surface normal\r\n     * so that it is on the surface of this ellipsoid.  If the position is\r\n     * at the center of the ellipsoid, this function returns undefined.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian position to scale.\r\n     * @param {Cartesian3} oneOverRadii One over radii of the ellipsoid.\r\n     * @param {Cartesian3} oneOverRadiiSquared One over radii squared of the ellipsoid.\r\n     * @param {Number} centerToleranceSquared Tolerance for closeness to the center.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter, a new Cartesian3 instance if none was provided, or undefined if the position is at the center.\r\n     *\r\n     * @exports scaleToGeodeticSurface\r\n     *\r\n     * @private\r\n     */\r\n    function scaleToGeodeticSurface(cartesian, oneOverRadii, oneOverRadiiSquared, centerToleranceSquared, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(cartesian)) {\r\n            throw new DeveloperError('cartesian is required.');\r\n        }\r\n        if (!defined(oneOverRadii)) {\r\n            throw new DeveloperError('oneOverRadii is required.');\r\n        }\r\n        if (!defined(oneOverRadiiSquared)) {\r\n            throw new DeveloperError('oneOverRadiiSquared is required.');\r\n        }\r\n        if (!defined(centerToleranceSquared)) {\r\n            throw new DeveloperError('centerToleranceSquared is required.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var positionX = cartesian.x;\r\n        var positionY = cartesian.y;\r\n        var positionZ = cartesian.z;\r\n\r\n        var oneOverRadiiX = oneOverRadii.x;\r\n        var oneOverRadiiY = oneOverRadii.y;\r\n        var oneOverRadiiZ = oneOverRadii.z;\r\n\r\n        var x2 = positionX * positionX * oneOverRadiiX * oneOverRadiiX;\r\n        var y2 = positionY * positionY * oneOverRadiiY * oneOverRadiiY;\r\n        var z2 = positionZ * positionZ * oneOverRadiiZ * oneOverRadiiZ;\r\n\r\n        // Compute the squared ellipsoid norm.\r\n        var squaredNorm = x2 + y2 + z2;\r\n        var ratio = Math.sqrt(1.0 / squaredNorm);\r\n\r\n        // As an initial approximation, assume that the radial intersection is the projection point.\r\n        var intersection = Cartesian3.multiplyByScalar(cartesian, ratio, scaleToGeodeticSurfaceIntersection);\r\n\r\n        // If the position is near the center, the iteration will not converge.\r\n        if (squaredNorm < centerToleranceSquared) {\r\n            return !isFinite(ratio) ? undefined : Cartesian3.clone(intersection, result);\r\n        }\r\n\r\n        var oneOverRadiiSquaredX = oneOverRadiiSquared.x;\r\n        var oneOverRadiiSquaredY = oneOverRadiiSquared.y;\r\n        var oneOverRadiiSquaredZ = oneOverRadiiSquared.z;\r\n\r\n        // Use the gradient at the intersection point in place of the true unit normal.\r\n        // The difference in magnitude will be absorbed in the multiplier.\r\n        var gradient = scaleToGeodeticSurfaceGradient;\r\n        gradient.x = intersection.x * oneOverRadiiSquaredX * 2.0;\r\n        gradient.y = intersection.y * oneOverRadiiSquaredY * 2.0;\r\n        gradient.z = intersection.z * oneOverRadiiSquaredZ * 2.0;\r\n\r\n        // Compute the initial guess at the normal vector multiplier, lambda.\r\n        var lambda = (1.0 - ratio) * Cartesian3.magnitude(cartesian) / (0.5 * Cartesian3.magnitude(gradient));\r\n        var correction = 0.0;\r\n\r\n        var func;\r\n        var denominator;\r\n        var xMultiplier;\r\n        var yMultiplier;\r\n        var zMultiplier;\r\n        var xMultiplier2;\r\n        var yMultiplier2;\r\n        var zMultiplier2;\r\n        var xMultiplier3;\r\n        var yMultiplier3;\r\n        var zMultiplier3;\r\n\r\n        do {\r\n            lambda -= correction;\r\n\r\n            xMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredX);\r\n            yMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredY);\r\n            zMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredZ);\r\n\r\n            xMultiplier2 = xMultiplier * xMultiplier;\r\n            yMultiplier2 = yMultiplier * yMultiplier;\r\n            zMultiplier2 = zMultiplier * zMultiplier;\r\n\r\n            xMultiplier3 = xMultiplier2 * xMultiplier;\r\n            yMultiplier3 = yMultiplier2 * yMultiplier;\r\n            zMultiplier3 = zMultiplier2 * zMultiplier;\r\n\r\n            func = x2 * xMultiplier2 + y2 * yMultiplier2 + z2 * zMultiplier2 - 1.0;\r\n\r\n            // \"denominator\" here refers to the use of this expression in the velocity and acceleration\r\n            // computations in the sections to follow.\r\n            denominator = x2 * xMultiplier3 * oneOverRadiiSquaredX + y2 * yMultiplier3 * oneOverRadiiSquaredY + z2 * zMultiplier3 * oneOverRadiiSquaredZ;\r\n\r\n            var derivative = -2.0 * denominator;\r\n\r\n            correction = func / derivative;\r\n        } while (Math.abs(func) > CesiumMath.EPSILON12);\r\n\r\n        if (!defined(result)) {\r\n            return new Cartesian3(positionX * xMultiplier, positionY * yMultiplier, positionZ * zMultiplier);\r\n        }\r\n        result.x = positionX * xMultiplier;\r\n        result.y = positionY * yMultiplier;\r\n        result.z = positionZ * zMultiplier;\r\n        return result;\r\n    }\r\nexport default scaleToGeodeticSurface;\r\n","import Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport CesiumMath from './Math.js';\r\nimport scaleToGeodeticSurface from './scaleToGeodeticSurface.js';\r\n\r\n    /**\r\n     * A position defined by longitude, latitude, and height.\r\n     * @alias Cartographic\r\n     * @constructor\r\n     *\r\n     * @param {Number} [longitude=0.0] The longitude, in radians.\r\n     * @param {Number} [latitude=0.0] The latitude, in radians.\r\n     * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\r\n     *\r\n     * @see Ellipsoid\r\n     */\r\n    function Cartographic(longitude, latitude, height) {\r\n        /**\r\n         * The longitude, in radians.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.longitude = defaultValue(longitude, 0.0);\r\n\r\n        /**\r\n         * The latitude, in radians.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.latitude = defaultValue(latitude, 0.0);\r\n\r\n        /**\r\n         * The height, in meters, above the ellipsoid.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.height = defaultValue(height, 0.0);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Cartographic instance from longitude and latitude\r\n     * specified in radians.\r\n     *\r\n     * @param {Number} longitude The longitude, in radians.\r\n     * @param {Number} latitude The latitude, in radians.\r\n     * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided.\r\n     */\r\n    Cartographic.fromRadians = function(longitude, latitude, height, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('longitude', longitude);\r\n        Check.typeOf.number('latitude', latitude);\r\n        //>>includeEnd('debug');\r\n\r\n        height = defaultValue(height, 0.0);\r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(longitude, latitude, height);\r\n        }\r\n\r\n        result.longitude = longitude;\r\n        result.latitude = latitude;\r\n        result.height = height;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a new Cartographic instance from longitude and latitude\r\n     * specified in degrees.  The values in the resulting object will\r\n     * be in radians.\r\n     *\r\n     * @param {Number} longitude The longitude, in degrees.\r\n     * @param {Number} latitude The latitude, in degrees.\r\n     * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided.\r\n     */\r\n    Cartographic.fromDegrees = function(longitude, latitude, height, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('longitude', longitude);\r\n        Check.typeOf.number('latitude', latitude);\r\n        //>>includeEnd('debug');\r\n        longitude = CesiumMath.toRadians(longitude);\r\n        latitude = CesiumMath.toRadians(latitude);\r\n\r\n        return Cartographic.fromRadians(longitude, latitude, height, result);\r\n    };\r\n\r\n    var cartesianToCartographicN = new Cartesian3();\r\n    var cartesianToCartographicP = new Cartesian3();\r\n    var cartesianToCartographicH = new Cartesian3();\r\n    var wgs84OneOverRadii = new Cartesian3(1.0 / 6378137.0, 1.0 / 6378137.0, 1.0 / 6356752.3142451793);\r\n    var wgs84OneOverRadiiSquared = new Cartesian3(1.0 / (6378137.0 * 6378137.0), 1.0 / (6378137.0 * 6378137.0), 1.0 / (6356752.3142451793 * 6356752.3142451793));\r\n    var wgs84CenterToleranceSquared = CesiumMath.EPSILON1;\r\n\r\n    /**\r\n     * Creates a new Cartographic instance from a Cartesian position. The values in the\r\n     * resulting object will be in radians.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian position to convert to cartographic representation.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter, new Cartographic instance if none was provided, or undefined if the cartesian is at the center of the ellipsoid.\r\n     */\r\n    Cartographic.fromCartesian = function(cartesian, ellipsoid, result) {\r\n        var oneOverRadii = defined(ellipsoid) ? ellipsoid.oneOverRadii : wgs84OneOverRadii;\r\n        var oneOverRadiiSquared = defined(ellipsoid) ? ellipsoid.oneOverRadiiSquared : wgs84OneOverRadiiSquared;\r\n        var centerToleranceSquared = defined(ellipsoid) ? ellipsoid._centerToleranceSquared : wgs84CenterToleranceSquared;\r\n\r\n        //`cartesian is required.` is thrown from scaleToGeodeticSurface\r\n        var p = scaleToGeodeticSurface(cartesian, oneOverRadii, oneOverRadiiSquared, centerToleranceSquared, cartesianToCartographicP);\r\n\r\n        if (!defined(p)) {\r\n            return undefined;\r\n        }\r\n\r\n        var n = Cartesian3.multiplyComponents(p, oneOverRadiiSquared, cartesianToCartographicN);\r\n        n = Cartesian3.normalize(n, n);\r\n\r\n        var h = Cartesian3.subtract(cartesian, p, cartesianToCartographicH);\r\n\r\n        var longitude = Math.atan2(n.y, n.x);\r\n        var latitude = Math.asin(n.z);\r\n        var height = CesiumMath.sign(Cartesian3.dot(h, cartesian)) * Cartesian3.magnitude(h);\r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(longitude, latitude, height);\r\n        }\r\n        result.longitude = longitude;\r\n        result.latitude = latitude;\r\n        result.height = height;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a new Cartesian3 instance from a Cartographic input. The values in the inputted\r\n     * object should be in radians.\r\n     *\r\n     * @param {Cartographic} cartographic Input to be converted into a Cartesian3 output.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The position\r\n     */\r\n    Cartographic.toCartesian = function(cartographic, ellipsoid, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('cartographic', cartographic);\r\n        //>>includeEnd('debug');\r\n\r\n        return Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, cartographic.height, ellipsoid, result);\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Cartographic instance.\r\n     *\r\n     * @param {Cartographic} cartographic The cartographic to duplicate.\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided. (Returns undefined if cartographic is undefined)\r\n     */\r\n    Cartographic.clone = function(cartographic, result) {\r\n        if (!defined(cartographic)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new Cartographic(cartographic.longitude, cartographic.latitude, cartographic.height);\r\n        }\r\n        result.longitude = cartographic.longitude;\r\n        result.latitude = cartographic.latitude;\r\n        result.height = cartographic.height;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided cartographics componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartographic} [left] The first cartographic.\r\n     * @param {Cartographic} [right] The second cartographic.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartographic.equals = function(left, right) {\r\n        return (left === right) ||\r\n                ((defined(left)) &&\r\n                 (defined(right)) &&\r\n                 (left.longitude === right.longitude) &&\r\n                 (left.latitude === right.latitude) &&\r\n                 (left.height === right.height));\r\n    };\r\n\r\n    /**\r\n     * Compares the provided cartographics componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartographic} [left] The first cartographic.\r\n     * @param {Cartographic} [right] The second cartographic.\r\n     * @param {Number} [epsilon] The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartographic.equalsEpsilon = function(left, right, epsilon) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('epsilon', epsilon);\r\n        //>>includeEnd('debug');\r\n\r\n        return (left === right) ||\r\n               ((defined(left)) &&\r\n                (defined(right)) &&\r\n                (Math.abs(left.longitude - right.longitude) <= epsilon) &&\r\n                (Math.abs(left.latitude - right.latitude) <= epsilon) &&\r\n                (Math.abs(left.height - right.height) <= epsilon));\r\n    };\r\n\r\n    /**\r\n     * An immutable Cartographic instance initialized to (0.0, 0.0, 0.0).\r\n     *\r\n     * @type {Cartographic}\r\n     * @constant\r\n     */\r\n    Cartographic.ZERO = Object.freeze(new Cartographic(0.0, 0.0, 0.0));\r\n\r\n    /**\r\n     * Duplicates this instance.\r\n     *\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided.\r\n     */\r\n    Cartographic.prototype.clone = function(result) {\r\n        return Cartographic.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided against this cartographic componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartographic} [right] The second cartographic.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartographic.prototype.equals = function(right) {\r\n        return Cartographic.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided against this cartographic componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartographic} [right] The second cartographic.\r\n     * @param {Number} [epsilon] The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartographic.prototype.equalsEpsilon = function(right, epsilon) {\r\n        return Cartographic.equalsEpsilon(this, right, epsilon);\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this cartographic in the format '(longitude, latitude, height)'.\r\n     *\r\n     * @returns {String} A string representing the provided cartographic in the format '(longitude, latitude, height)'.\r\n     */\r\n    Cartographic.prototype.toString = function() {\r\n        return '(' + this.longitude + ', ' + this.latitude + ', ' + this.height + ')';\r\n    };\r\nexport default Cartographic;\r\n","import Cartesian3 from './Cartesian3.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\nimport scaleToGeodeticSurface from './scaleToGeodeticSurface.js';\r\n\r\n    function initialize(ellipsoid, x, y, z) {\r\n        x = defaultValue(x, 0.0);\r\n        y = defaultValue(y, 0.0);\r\n        z = defaultValue(z, 0.0);\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number.greaterThanOrEquals('x', x, 0.0);\r\n        Check.typeOf.number.greaterThanOrEquals('y', y, 0.0);\r\n        Check.typeOf.number.greaterThanOrEquals('z', z, 0.0);\r\n        //>>includeEnd('debug');\r\n\r\n        ellipsoid._radii = new Cartesian3(x, y, z);\r\n\r\n        ellipsoid._radiiSquared = new Cartesian3(x * x,\r\n                                            y * y,\r\n                                            z * z);\r\n\r\n        ellipsoid._radiiToTheFourth = new Cartesian3(x * x * x * x,\r\n                                                y * y * y * y,\r\n                                                z * z * z * z);\r\n\r\n        ellipsoid._oneOverRadii = new Cartesian3(x === 0.0 ? 0.0 : 1.0 / x,\r\n                                            y === 0.0 ? 0.0 : 1.0 / y,\r\n                                            z === 0.0 ? 0.0 : 1.0 / z);\r\n\r\n        ellipsoid._oneOverRadiiSquared = new Cartesian3(x === 0.0 ? 0.0 : 1.0 / (x * x),\r\n                                                   y === 0.0 ? 0.0 : 1.0 / (y * y),\r\n                                                   z === 0.0 ? 0.0 : 1.0 / (z * z));\r\n\r\n        ellipsoid._minimumRadius = Math.min(x, y, z);\r\n\r\n        ellipsoid._maximumRadius = Math.max(x, y, z);\r\n\r\n        ellipsoid._centerToleranceSquared = CesiumMath.EPSILON1;\r\n\r\n        if (ellipsoid._radiiSquared.z !== 0) {\r\n            ellipsoid._squaredXOverSquaredZ = ellipsoid._radiiSquared.x / ellipsoid._radiiSquared.z;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A quadratic surface defined in Cartesian coordinates by the equation\r\n     * <code>(x / a)^2 + (y / b)^2 + (z / c)^2 = 1</code>.  Primarily used\r\n     * by Cesium to represent the shape of planetary bodies.\r\n     *\r\n     * Rather than constructing this object directly, one of the provided\r\n     * constants is normally used.\r\n     * @alias Ellipsoid\r\n     * @constructor\r\n     *\r\n     * @param {Number} [x=0] The radius in the x direction.\r\n     * @param {Number} [y=0] The radius in the y direction.\r\n     * @param {Number} [z=0] The radius in the z direction.\r\n     *\r\n     * @exception {DeveloperError} All radii components must be greater than or equal to zero.\r\n     *\r\n     * @see Ellipsoid.fromCartesian3\r\n     * @see Ellipsoid.WGS84\r\n     * @see Ellipsoid.UNIT_SPHERE\r\n     */\r\n    function Ellipsoid(x, y, z) {\r\n        this._radii = undefined;\r\n        this._radiiSquared = undefined;\r\n        this._radiiToTheFourth = undefined;\r\n        this._oneOverRadii = undefined;\r\n        this._oneOverRadiiSquared = undefined;\r\n        this._minimumRadius = undefined;\r\n        this._maximumRadius = undefined;\r\n        this._centerToleranceSquared = undefined;\r\n        this._squaredXOverSquaredZ = undefined;\r\n\r\n        initialize(this, x, y, z);\r\n    }\r\n\r\n    Object.defineProperties(Ellipsoid.prototype, {\r\n        /**\r\n         * Gets the radii of the ellipsoid.\r\n         * @memberof Ellipsoid.prototype\r\n         * @type {Cartesian3}\r\n         * @readonly\r\n         */\r\n        radii : {\r\n            get: function() {\r\n                return this._radii;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the squared radii of the ellipsoid.\r\n         * @memberof Ellipsoid.prototype\r\n         * @type {Cartesian3}\r\n         * @readonly\r\n         */\r\n        radiiSquared : {\r\n            get : function() {\r\n                return this._radiiSquared;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the radii of the ellipsoid raise to the fourth power.\r\n         * @memberof Ellipsoid.prototype\r\n         * @type {Cartesian3}\r\n         * @readonly\r\n         */\r\n        radiiToTheFourth : {\r\n            get : function() {\r\n                return this._radiiToTheFourth;\r\n            }\r\n        },\r\n        /**\r\n         * Gets one over the radii of the ellipsoid.\r\n         * @memberof Ellipsoid.prototype\r\n         * @type {Cartesian3}\r\n         * @readonly\r\n         */\r\n        oneOverRadii : {\r\n            get : function() {\r\n                return this._oneOverRadii;\r\n            }\r\n        },\r\n        /**\r\n         * Gets one over the squared radii of the ellipsoid.\r\n         * @memberof Ellipsoid.prototype\r\n         * @type {Cartesian3}\r\n         * @readonly\r\n         */\r\n        oneOverRadiiSquared : {\r\n            get : function() {\r\n                return this._oneOverRadiiSquared;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the minimum radius of the ellipsoid.\r\n         * @memberof Ellipsoid.prototype\r\n         * @type {Number}\r\n         * @readonly\r\n         */\r\n        minimumRadius : {\r\n            get : function() {\r\n                return this._minimumRadius;\r\n            }\r\n        },\r\n        /**\r\n         * Gets the maximum radius of the ellipsoid.\r\n         * @memberof Ellipsoid.prototype\r\n         * @type {Number}\r\n         * @readonly\r\n         */\r\n        maximumRadius : {\r\n            get : function() {\r\n                return this._maximumRadius;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Duplicates an Ellipsoid instance.\r\n     *\r\n     * @param {Ellipsoid} ellipsoid The ellipsoid to duplicate.\r\n     * @param {Ellipsoid} [result] The object onto which to store the result, or undefined if a new\r\n     *                    instance should be created.\r\n     * @returns {Ellipsoid} The cloned Ellipsoid. (Returns undefined if ellipsoid is undefined)\r\n     */\r\n    Ellipsoid.clone = function(ellipsoid, result) {\r\n        if (!defined(ellipsoid)) {\r\n            return undefined;\r\n        }\r\n        var radii = ellipsoid._radii;\r\n\r\n        if (!defined(result)) {\r\n            return new Ellipsoid(radii.x, radii.y, radii.z);\r\n        }\r\n\r\n        Cartesian3.clone(radii, result._radii);\r\n        Cartesian3.clone(ellipsoid._radiiSquared, result._radiiSquared);\r\n        Cartesian3.clone(ellipsoid._radiiToTheFourth, result._radiiToTheFourth);\r\n        Cartesian3.clone(ellipsoid._oneOverRadii, result._oneOverRadii);\r\n        Cartesian3.clone(ellipsoid._oneOverRadiiSquared, result._oneOverRadiiSquared);\r\n        result._minimumRadius = ellipsoid._minimumRadius;\r\n        result._maximumRadius = ellipsoid._maximumRadius;\r\n        result._centerToleranceSquared = ellipsoid._centerToleranceSquared;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes an Ellipsoid from a Cartesian specifying the radii in x, y, and z directions.\r\n     *\r\n     * @param {Cartesian3} [cartesian=Cartesian3.ZERO] The ellipsoid's radius in the x, y, and z directions.\r\n     * @param {Ellipsoid} [result] The object onto which to store the result, or undefined if a new\r\n     *                    instance should be created.\r\n     * @returns {Ellipsoid} A new Ellipsoid instance.\r\n     *\r\n     * @exception {DeveloperError} All radii components must be greater than or equal to zero.\r\n     *\r\n     * @see Ellipsoid.WGS84\r\n     * @see Ellipsoid.UNIT_SPHERE\r\n     */\r\n    Ellipsoid.fromCartesian3 = function(cartesian, result) {\r\n        if (!defined(result)) {\r\n            result = new Ellipsoid();\r\n        }\r\n\r\n        if (!defined(cartesian)) {\r\n            return result;\r\n        }\r\n\r\n        initialize(result, cartesian.x, cartesian.y, cartesian.z);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * An Ellipsoid instance initialized to the WGS84 standard.\r\n     *\r\n     * @type {Ellipsoid}\r\n     * @constant\r\n     */\r\n    Ellipsoid.WGS84 = Object.freeze(new Ellipsoid(6378137.0, 6378137.0, 6356752.3142451793));\r\n\r\n    /**\r\n     * An Ellipsoid instance initialized to radii of (1.0, 1.0, 1.0).\r\n     *\r\n     * @type {Ellipsoid}\r\n     * @constant\r\n     */\r\n    Ellipsoid.UNIT_SPHERE = Object.freeze(new Ellipsoid(1.0, 1.0, 1.0));\r\n\r\n    /**\r\n     * An Ellipsoid instance initialized to a sphere with the lunar radius.\r\n     *\r\n     * @type {Ellipsoid}\r\n     * @constant\r\n     */\r\n    Ellipsoid.MOON = Object.freeze(new Ellipsoid(CesiumMath.LUNAR_RADIUS, CesiumMath.LUNAR_RADIUS, CesiumMath.LUNAR_RADIUS));\r\n\r\n    /**\r\n     * Duplicates an Ellipsoid instance.\r\n     *\r\n     * @param {Ellipsoid} [result] The object onto which to store the result, or undefined if a new\r\n     *                    instance should be created.\r\n     * @returns {Ellipsoid} The cloned Ellipsoid.\r\n     */\r\n    Ellipsoid.prototype.clone = function(result) {\r\n        return Ellipsoid.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Ellipsoid.packedLength = Cartesian3.packedLength;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Ellipsoid} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Ellipsoid.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        Cartesian3.pack(value._radii, array, startingIndex);\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Ellipsoid} [result] The object into which to store the result.\r\n     * @returns {Ellipsoid} The modified result parameter or a new Ellipsoid instance if one was not provided.\r\n     */\r\n    Ellipsoid.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var radii = Cartesian3.unpack(array, startingIndex);\r\n        return Ellipsoid.fromCartesian3(radii, result);\r\n    };\r\n\r\n    /**\r\n     * Computes the unit vector directed from the center of this ellipsoid toward the provided Cartesian position.\r\n     * @function\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian for which to to determine the geocentric normal.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\r\n     */\r\n    Ellipsoid.prototype.geocentricSurfaceNormal = Cartesian3.normalize;\r\n\r\n    /**\r\n     * Computes the normal of the plane tangent to the surface of the ellipsoid at the provided position.\r\n     *\r\n     * @param {Cartographic} cartographic The cartographic position for which to to determine the geodetic normal.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\r\n     */\r\n    Ellipsoid.prototype.geodeticSurfaceNormalCartographic = function(cartographic, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartographic', cartographic);\r\n        //>>includeEnd('debug');\r\n\r\n        var longitude = cartographic.longitude;\r\n        var latitude = cartographic.latitude;\r\n        var cosLatitude = Math.cos(latitude);\r\n\r\n        var x = cosLatitude * Math.cos(longitude);\r\n        var y = cosLatitude * Math.sin(longitude);\r\n        var z = Math.sin(latitude);\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n        result.x = x;\r\n        result.y = y;\r\n        result.z = z;\r\n        return Cartesian3.normalize(result, result);\r\n    };\r\n\r\n    /**\r\n     * Computes the normal of the plane tangent to the surface of the ellipsoid at the provided position.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian position for which to to determine the surface normal.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\r\n     */\r\n    Ellipsoid.prototype.geodeticSurfaceNormal = function(cartesian, result) {\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n        result = Cartesian3.multiplyComponents(cartesian, this._oneOverRadiiSquared, result);\r\n        return Cartesian3.normalize(result, result);\r\n    };\r\n\r\n    var cartographicToCartesianNormal = new Cartesian3();\r\n    var cartographicToCartesianK = new Cartesian3();\r\n\r\n    /**\r\n     * Converts the provided cartographic to Cartesian representation.\r\n     *\r\n     * @param {Cartographic} cartographic The cartographic position.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\r\n     *\r\n     * @example\r\n     * //Create a Cartographic and determine it's Cartesian representation on a WGS84 ellipsoid.\r\n     * var position = new Cesium.Cartographic(Cesium.Math.toRadians(21), Cesium.Math.toRadians(78), 5000);\r\n     * var cartesianPosition = Cesium.Ellipsoid.WGS84.cartographicToCartesian(position);\r\n     */\r\n    Ellipsoid.prototype.cartographicToCartesian = function(cartographic, result) {\r\n        //`cartographic is required` is thrown from geodeticSurfaceNormalCartographic.\r\n        var n = cartographicToCartesianNormal;\r\n        var k = cartographicToCartesianK;\r\n        this.geodeticSurfaceNormalCartographic(cartographic, n);\r\n        Cartesian3.multiplyComponents(this._radiiSquared, n, k);\r\n        var gamma = Math.sqrt(Cartesian3.dot(n, k));\r\n        Cartesian3.divideByScalar(k, gamma, k);\r\n        Cartesian3.multiplyByScalar(n, cartographic.height, n);\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n        return Cartesian3.add(k, n, result);\r\n    };\r\n\r\n    /**\r\n     * Converts the provided array of cartographics to an array of Cartesians.\r\n     *\r\n     * @param {Cartographic[]} cartographics An array of cartographic positions.\r\n     * @param {Cartesian3[]} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3[]} The modified result parameter or a new Array instance if none was provided.\r\n     *\r\n     * @example\r\n     * //Convert an array of Cartographics and determine their Cartesian representation on a WGS84 ellipsoid.\r\n     * var positions = [new Cesium.Cartographic(Cesium.Math.toRadians(21), Cesium.Math.toRadians(78), 0),\r\n     *                  new Cesium.Cartographic(Cesium.Math.toRadians(21.321), Cesium.Math.toRadians(78.123), 100),\r\n     *                  new Cesium.Cartographic(Cesium.Math.toRadians(21.645), Cesium.Math.toRadians(78.456), 250)];\r\n     * var cartesianPositions = Cesium.Ellipsoid.WGS84.cartographicArrayToCartesianArray(positions);\r\n     */\r\n    Ellipsoid.prototype.cartographicArrayToCartesianArray = function(cartographics, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('cartographics', cartographics);\r\n        //>>includeEnd('debug')\r\n\r\n        var length = cartographics.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length);\r\n        } else {\r\n            result.length = length;\r\n        }\r\n        for ( var i = 0; i < length; i++) {\r\n            result[i] = this.cartographicToCartesian(cartographics[i], result[i]);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    var cartesianToCartographicN = new Cartesian3();\r\n    var cartesianToCartographicP = new Cartesian3();\r\n    var cartesianToCartographicH = new Cartesian3();\r\n\r\n    /**\r\n     * Converts the provided cartesian to cartographic representation.\r\n     * The cartesian is undefined at the center of the ellipsoid.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian position to convert to cartographic representation.\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter, new Cartographic instance if none was provided, or undefined if the cartesian is at the center of the ellipsoid.\r\n     *\r\n     * @example\r\n     * //Create a Cartesian and determine it's Cartographic representation on a WGS84 ellipsoid.\r\n     * var position = new Cesium.Cartesian3(17832.12, 83234.52, 952313.73);\r\n     * var cartographicPosition = Cesium.Ellipsoid.WGS84.cartesianToCartographic(position);\r\n     */\r\n    Ellipsoid.prototype.cartesianToCartographic = function(cartesian, result) {\r\n        //`cartesian is required.` is thrown from scaleToGeodeticSurface\r\n        var p = this.scaleToGeodeticSurface(cartesian, cartesianToCartographicP);\r\n\r\n        if (!defined(p)) {\r\n            return undefined;\r\n        }\r\n\r\n        var n = this.geodeticSurfaceNormal(p, cartesianToCartographicN);\r\n        var h = Cartesian3.subtract(cartesian, p, cartesianToCartographicH);\r\n\r\n        var longitude = Math.atan2(n.y, n.x);\r\n        var latitude = Math.asin(n.z);\r\n        var height = CesiumMath.sign(Cartesian3.dot(h, cartesian)) * Cartesian3.magnitude(h);\r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(longitude, latitude, height);\r\n        }\r\n        result.longitude = longitude;\r\n        result.latitude = latitude;\r\n        result.height = height;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Converts the provided array of cartesians to an array of cartographics.\r\n     *\r\n     * @param {Cartesian3[]} cartesians An array of Cartesian positions.\r\n     * @param {Cartographic[]} [result] The object onto which to store the result.\r\n     * @returns {Cartographic[]} The modified result parameter or a new Array instance if none was provided.\r\n     *\r\n     * @example\r\n     * //Create an array of Cartesians and determine their Cartographic representation on a WGS84 ellipsoid.\r\n     * var positions = [new Cesium.Cartesian3(17832.12, 83234.52, 952313.73),\r\n     *                  new Cesium.Cartesian3(17832.13, 83234.53, 952313.73),\r\n     *                  new Cesium.Cartesian3(17832.14, 83234.54, 952313.73)]\r\n     * var cartographicPositions = Cesium.Ellipsoid.WGS84.cartesianArrayToCartographicArray(positions);\r\n     */\r\n    Ellipsoid.prototype.cartesianArrayToCartographicArray = function(cartesians, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('cartesians', cartesians);\r\n        //>>includeEnd('debug');\r\n\r\n        var length = cartesians.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length);\r\n        } else {\r\n            result.length = length;\r\n        }\r\n        for ( var i = 0; i < length; ++i) {\r\n            result[i] = this.cartesianToCartographic(cartesians[i], result[i]);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Scales the provided Cartesian position along the geodetic surface normal\r\n     * so that it is on the surface of this ellipsoid.  If the position is\r\n     * at the center of the ellipsoid, this function returns undefined.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian position to scale.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter, a new Cartesian3 instance if none was provided, or undefined if the position is at the center.\r\n     */\r\n    Ellipsoid.prototype.scaleToGeodeticSurface = function(cartesian, result) {\r\n        return scaleToGeodeticSurface(cartesian, this._oneOverRadii, this._oneOverRadiiSquared, this._centerToleranceSquared, result);\r\n    };\r\n\r\n    /**\r\n     * Scales the provided Cartesian position along the geocentric surface normal\r\n     * so that it is on the surface of this ellipsoid.\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian position to scale.\r\n     * @param {Cartesian3} [result] The object onto which to store the result.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\r\n     */\r\n    Ellipsoid.prototype.scaleToGeocentricSurface = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        var positionX = cartesian.x;\r\n        var positionY = cartesian.y;\r\n        var positionZ = cartesian.z;\r\n        var oneOverRadiiSquared = this._oneOverRadiiSquared;\r\n\r\n        var beta = 1.0 / Math.sqrt((positionX * positionX) * oneOverRadiiSquared.x +\r\n                                   (positionY * positionY) * oneOverRadiiSquared.y +\r\n                                   (positionZ * positionZ) * oneOverRadiiSquared.z);\r\n\r\n        return Cartesian3.multiplyByScalar(cartesian, beta, result);\r\n    };\r\n\r\n    /**\r\n     * Transforms a Cartesian X, Y, Z position to the ellipsoid-scaled space by multiplying\r\n     * its components by the result of {@link Ellipsoid#oneOverRadii}.\r\n     *\r\n     * @param {Cartesian3} position The position to transform.\r\n     * @param {Cartesian3} [result] The position to which to copy the result, or undefined to create and\r\n     *        return a new instance.\r\n     * @returns {Cartesian3} The position expressed in the scaled space.  The returned instance is the\r\n     *          one passed as the result parameter if it is not undefined, or a new instance of it is.\r\n     */\r\n    Ellipsoid.prototype.transformPositionToScaledSpace = function(position, result) {\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        return Cartesian3.multiplyComponents(position, this._oneOverRadii, result);\r\n    };\r\n\r\n    /**\r\n     * Transforms a Cartesian X, Y, Z position from the ellipsoid-scaled space by multiplying\r\n     * its components by the result of {@link Ellipsoid#radii}.\r\n     *\r\n     * @param {Cartesian3} position The position to transform.\r\n     * @param {Cartesian3} [result] The position to which to copy the result, or undefined to create and\r\n     *        return a new instance.\r\n     * @returns {Cartesian3} The position expressed in the unscaled space.  The returned instance is the\r\n     *          one passed as the result parameter if it is not undefined, or a new instance of it is.\r\n     */\r\n    Ellipsoid.prototype.transformPositionFromScaledSpace = function(position, result) {\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        return Cartesian3.multiplyComponents(position, this._radii, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this Ellipsoid against the provided Ellipsoid componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Ellipsoid} [right] The other Ellipsoid.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    Ellipsoid.prototype.equals = function(right) {\r\n        return (this === right) ||\r\n               (defined(right) &&\r\n                Cartesian3.equals(this._radii, right._radii));\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this Ellipsoid in the format '(radii.x, radii.y, radii.z)'.\r\n     *\r\n     * @returns {String} A string representing this ellipsoid in the format '(radii.x, radii.y, radii.z)'.\r\n     */\r\n    Ellipsoid.prototype.toString = function() {\r\n        return this._radii.toString();\r\n    };\r\n\r\n    /**\r\n     * Computes a point which is the intersection of the surface normal with the z-axis.\r\n     *\r\n     * @param {Cartesian3} position the position. must be on the surface of the ellipsoid.\r\n     * @param {Number} [buffer = 0.0] A buffer to subtract from the ellipsoid size when checking if the point is inside the ellipsoid.\r\n     *                                In earth case, with common earth datums, there is no need for this buffer since the intersection point is always (relatively) very close to the center.\r\n     *                                In WGS84 datum, intersection point is at max z = +-42841.31151331382 (0.673% of z-axis).\r\n     *                                Intersection point could be outside the ellipsoid if the ratio of MajorAxis / AxisOfRotation is bigger than the square root of 2\r\n     * @param {Cartesian3} [result] The cartesian to which to copy the result, or undefined to create and\r\n     *        return a new instance.\r\n     * @returns {Cartesian3 | undefined} the intersection point if it's inside the ellipsoid, undefined otherwise\r\n     *\r\n     * @exception {DeveloperError} position is required.\r\n     * @exception {DeveloperError} Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y).\r\n     * @exception {DeveloperError} Ellipsoid.radii.z must be greater than 0.\r\n     */\r\n    Ellipsoid.prototype.getSurfaceNormalIntersectionWithZAxis = function(position, buffer, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('position', position);\r\n\r\n        if (!CesiumMath.equalsEpsilon(this._radii.x, this._radii.y, CesiumMath.EPSILON15)) {\r\n            throw new DeveloperError('Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y)');\r\n        }\r\n\r\n        Check.typeOf.number.greaterThan('Ellipsoid.radii.z', this._radii.z, 0);\r\n        //>>includeEnd('debug');\r\n\r\n        buffer = defaultValue(buffer, 0.0);\r\n\r\n        var squaredXOverSquaredZ = this._squaredXOverSquaredZ;\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        result.x = 0.0;\r\n        result.y = 0.0;\r\n        result.z = position.z * (1 - squaredXOverSquaredZ);\r\n\r\n        if (Math.abs(result.z) >= this._radii.z - buffer) {\r\n            return undefined;\r\n        }\r\n\r\n        return result;\r\n    };\r\nexport default Ellipsoid;\r\n","import Cartographic from './Cartographic.js';\r\nimport Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport CesiumMath from './Math.js';\r\n\r\n    /**\r\n     * A two dimensional region specified as longitude and latitude coordinates.\r\n     *\r\n     * @alias Rectangle\r\n     * @constructor\r\n     *\r\n     * @param {Number} [west=0.0] The westernmost longitude, in radians, in the range [-Pi, Pi].\r\n     * @param {Number} [south=0.0] The southernmost latitude, in radians, in the range [-Pi/2, Pi/2].\r\n     * @param {Number} [east=0.0] The easternmost longitude, in radians, in the range [-Pi, Pi].\r\n     * @param {Number} [north=0.0] The northernmost latitude, in radians, in the range [-Pi/2, Pi/2].\r\n     *\r\n     * @see Packable\r\n     */\r\n    function Rectangle(west, south, east, north) {\r\n        /**\r\n         * The westernmost longitude in radians in the range [-Pi, Pi].\r\n         *\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.west = defaultValue(west, 0.0);\r\n\r\n        /**\r\n         * The southernmost latitude in radians in the range [-Pi/2, Pi/2].\r\n         *\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.south = defaultValue(south, 0.0);\r\n\r\n        /**\r\n         * The easternmost longitude in radians in the range [-Pi, Pi].\r\n         *\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.east = defaultValue(east, 0.0);\r\n\r\n        /**\r\n         * The northernmost latitude in radians in the range [-Pi/2, Pi/2].\r\n         *\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.north = defaultValue(north, 0.0);\r\n    }\r\n\r\n    Object.defineProperties(Rectangle.prototype, {\r\n        /**\r\n         * Gets the width of the rectangle in radians.\r\n         * @memberof Rectangle.prototype\r\n         * @type {Number}\r\n         */\r\n        width : {\r\n            get : function() {\r\n                return Rectangle.computeWidth(this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the height of the rectangle in radians.\r\n         * @memberof Rectangle.prototype\r\n         * @type {Number}\r\n         */\r\n        height : {\r\n            get : function() {\r\n                return Rectangle.computeHeight(this);\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Rectangle.packedLength = 4;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Rectangle} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Rectangle.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value.west;\r\n        array[startingIndex++] = value.south;\r\n        array[startingIndex++] = value.east;\r\n        array[startingIndex] = value.north;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Rectangle} [result] The object into which to store the result.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if one was not provided.\r\n     */\r\n    Rectangle.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Rectangle();\r\n        }\r\n\r\n        result.west = array[startingIndex++];\r\n        result.south = array[startingIndex++];\r\n        result.east = array[startingIndex++];\r\n        result.north = array[startingIndex];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the width of a rectangle in radians.\r\n     * @param {Rectangle} rectangle The rectangle to compute the width of.\r\n     * @returns {Number} The width.\r\n     */\r\n    Rectangle.computeWidth = function(rectangle) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rectangle', rectangle);\r\n        //>>includeEnd('debug');\r\n        var east = rectangle.east;\r\n        var west = rectangle.west;\r\n        if (east < west) {\r\n            east += CesiumMath.TWO_PI;\r\n        }\r\n        return east - west;\r\n    };\r\n\r\n    /**\r\n     * Computes the height of a rectangle in radians.\r\n     * @param {Rectangle} rectangle The rectangle to compute the height of.\r\n     * @returns {Number} The height.\r\n     */\r\n    Rectangle.computeHeight = function(rectangle) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rectangle', rectangle);\r\n        //>>includeEnd('debug');\r\n        return rectangle.north - rectangle.south;\r\n    };\r\n\r\n    /**\r\n     * Creates a rectangle given the boundary longitude and latitude in degrees.\r\n     *\r\n     * @param {Number} [west=0.0] The westernmost longitude in degrees in the range [-180.0, 180.0].\r\n     * @param {Number} [south=0.0] The southernmost latitude in degrees in the range [-90.0, 90.0].\r\n     * @param {Number} [east=0.0] The easternmost longitude in degrees in the range [-180.0, 180.0].\r\n     * @param {Number} [north=0.0] The northernmost latitude in degrees in the range [-90.0, 90.0].\r\n     * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n     *\r\n     * @example\r\n     * var rectangle = Cesium.Rectangle.fromDegrees(0.0, 20.0, 10.0, 30.0);\r\n     */\r\n    Rectangle.fromDegrees = function(west, south, east, north, result) {\r\n        west = CesiumMath.toRadians(defaultValue(west, 0.0));\r\n        south = CesiumMath.toRadians(defaultValue(south, 0.0));\r\n        east = CesiumMath.toRadians(defaultValue(east, 0.0));\r\n        north = CesiumMath.toRadians(defaultValue(north, 0.0));\r\n\r\n        if (!defined(result)) {\r\n            return new Rectangle(west, south, east, north);\r\n        }\r\n\r\n        result.west = west;\r\n        result.south = south;\r\n        result.east = east;\r\n        result.north = north;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a rectangle given the boundary longitude and latitude in radians.\r\n     *\r\n     * @param {Number} [west=0.0] The westernmost longitude in radians in the range [-Math.PI, Math.PI].\r\n     * @param {Number} [south=0.0] The southernmost latitude in radians in the range [-Math.PI/2, Math.PI/2].\r\n     * @param {Number} [east=0.0] The easternmost longitude in radians in the range [-Math.PI, Math.PI].\r\n     * @param {Number} [north=0.0] The northernmost latitude in radians in the range [-Math.PI/2, Math.PI/2].\r\n     * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n     *\r\n     * @example\r\n     * var rectangle = Cesium.Rectangle.fromRadians(0.0, Math.PI/4, Math.PI/8, 3*Math.PI/4);\r\n     */\r\n    Rectangle.fromRadians = function(west, south, east, north, result) {\r\n        if (!defined(result)) {\r\n            return new Rectangle(west, south, east, north);\r\n        }\r\n\r\n        result.west = defaultValue(west, 0.0);\r\n        result.south = defaultValue(south, 0.0);\r\n        result.east = defaultValue(east, 0.0);\r\n        result.north = defaultValue(north, 0.0);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates the smallest possible Rectangle that encloses all positions in the provided array.\r\n     *\r\n     * @param {Cartographic[]} cartographics The list of Cartographic instances.\r\n     * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n     */\r\n    Rectangle.fromCartographicArray = function(cartographics, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('cartographics', cartographics);\r\n        //>>includeEnd('debug');\r\n\r\n        var west = Number.MAX_VALUE;\r\n        var east = -Number.MAX_VALUE;\r\n        var westOverIDL = Number.MAX_VALUE;\r\n        var eastOverIDL = -Number.MAX_VALUE;\r\n        var south = Number.MAX_VALUE;\r\n        var north = -Number.MAX_VALUE;\r\n\r\n        for ( var i = 0, len = cartographics.length; i < len; i++) {\r\n            var position = cartographics[i];\r\n            west = Math.min(west, position.longitude);\r\n            east = Math.max(east, position.longitude);\r\n            south = Math.min(south, position.latitude);\r\n            north = Math.max(north, position.latitude);\r\n\r\n            var lonAdjusted = position.longitude >= 0 ?  position.longitude : position.longitude +  CesiumMath.TWO_PI;\r\n            westOverIDL = Math.min(westOverIDL, lonAdjusted);\r\n            eastOverIDL = Math.max(eastOverIDL, lonAdjusted);\r\n        }\r\n\r\n        if(east - west > eastOverIDL - westOverIDL) {\r\n            west = westOverIDL;\r\n            east = eastOverIDL;\r\n\r\n            if (east > CesiumMath.PI) {\r\n                east = east - CesiumMath.TWO_PI;\r\n            }\r\n            if (west > CesiumMath.PI) {\r\n                west = west - CesiumMath.TWO_PI;\r\n            }\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Rectangle(west, south, east, north);\r\n        }\r\n\r\n        result.west = west;\r\n        result.south = south;\r\n        result.east = east;\r\n        result.north = north;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates the smallest possible Rectangle that encloses all positions in the provided array.\r\n     *\r\n     * @param {Cartesian3[]} cartesians The list of Cartesian instances.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid the cartesians are on.\r\n     * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n     */\r\n    Rectangle.fromCartesianArray = function(cartesians, ellipsoid, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('cartesians', cartesians);\r\n        //>>includeEnd('debug');\r\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n\r\n        var west = Number.MAX_VALUE;\r\n        var east = -Number.MAX_VALUE;\r\n        var westOverIDL = Number.MAX_VALUE;\r\n        var eastOverIDL = -Number.MAX_VALUE;\r\n        var south = Number.MAX_VALUE;\r\n        var north = -Number.MAX_VALUE;\r\n\r\n        for ( var i = 0, len = cartesians.length; i < len; i++) {\r\n            var position = ellipsoid.cartesianToCartographic(cartesians[i]);\r\n            west = Math.min(west, position.longitude);\r\n            east = Math.max(east, position.longitude);\r\n            south = Math.min(south, position.latitude);\r\n            north = Math.max(north, position.latitude);\r\n\r\n            var lonAdjusted = position.longitude >= 0 ?  position.longitude : position.longitude +  CesiumMath.TWO_PI;\r\n            westOverIDL = Math.min(westOverIDL, lonAdjusted);\r\n            eastOverIDL = Math.max(eastOverIDL, lonAdjusted);\r\n        }\r\n\r\n        if(east - west > eastOverIDL - westOverIDL) {\r\n            west = westOverIDL;\r\n            east = eastOverIDL;\r\n\r\n            if (east > CesiumMath.PI) {\r\n                east = east - CesiumMath.TWO_PI;\r\n            }\r\n            if (west > CesiumMath.PI) {\r\n                west = west - CesiumMath.TWO_PI;\r\n            }\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Rectangle(west, south, east, north);\r\n        }\r\n\r\n        result.west = west;\r\n        result.south = south;\r\n        result.east = east;\r\n        result.north = north;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Rectangle.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle to clone.\r\n     * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided. (Returns undefined if rectangle is undefined)\r\n     */\r\n    Rectangle.clone = function(rectangle, result) {\r\n        if (!defined(rectangle)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Rectangle(rectangle.west, rectangle.south, rectangle.east, rectangle.north);\r\n        }\r\n\r\n        result.west = rectangle.west;\r\n        result.south = rectangle.south;\r\n        result.east = rectangle.east;\r\n        result.north = rectangle.north;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Rectangles componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Rectangle} [left] The first Rectangle.\r\n     * @param {Rectangle} [right] The second Rectangle.\r\n     * @param {Number} [absoluteEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Rectangle.equalsEpsilon = function(left, right, absoluteEpsilon) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('absoluteEpsilon', absoluteEpsilon);\r\n        //>>includeEnd('debug');\r\n\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                (Math.abs(left.west - right.west) <= absoluteEpsilon) &&\r\n                (Math.abs(left.south - right.south) <= absoluteEpsilon) &&\r\n                (Math.abs(left.east - right.east) <= absoluteEpsilon) &&\r\n                (Math.abs(left.north - right.north) <= absoluteEpsilon));\r\n    };\r\n\r\n    /**\r\n     * Duplicates this Rectangle.\r\n     *\r\n     * @param {Rectangle} [result] The object onto which to store the result.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n     */\r\n    Rectangle.prototype.clone = function(result) {\r\n        return Rectangle.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Rectangle with this Rectangle componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Rectangle} [other] The Rectangle to compare.\r\n     * @returns {Boolean} <code>true</code> if the Rectangles are equal, <code>false</code> otherwise.\r\n     */\r\n    Rectangle.prototype.equals = function(other) {\r\n        return Rectangle.equals(this, other);\r\n    };\r\n\r\n    /**\r\n     * Compares the provided rectangles and returns <code>true</code> if they are equal,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Rectangle} [left] The first Rectangle.\r\n     * @param {Rectangle} [right] The second Rectangle.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal; otherwise <code>false</code>.\r\n     */\r\n    Rectangle.equals = function(left, right) {\r\n        return (left === right) ||\r\n               ((defined(left)) &&\r\n                (defined(right)) &&\r\n                (left.west === right.west) &&\r\n                (left.south === right.south) &&\r\n                (left.east === right.east) &&\r\n                (left.north === right.north));\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Rectangle with this Rectangle componentwise and returns\r\n     * <code>true</code> if they are within the provided epsilon,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Rectangle} [other] The Rectangle to compare.\r\n     * @param {Number} [epsilon] The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if the Rectangles are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Rectangle.prototype.equalsEpsilon = function(other, epsilon) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('epsilon', epsilon);\r\n        //>>includeEnd('debug');\r\n\r\n        return Rectangle.equalsEpsilon(this, other, epsilon);\r\n    };\r\n\r\n    /**\r\n     * Checks a Rectangle's properties and throws if they are not in valid ranges.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle to validate\r\n     *\r\n     * @exception {DeveloperError} <code>north</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n     * @exception {DeveloperError} <code>south</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n     * @exception {DeveloperError} <code>east</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n     * @exception {DeveloperError} <code>west</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n     */\r\n    Rectangle.validate = function(rectangle) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rectangle', rectangle);\r\n\r\n        var north = rectangle.north;\r\n        Check.typeOf.number.greaterThanOrEquals('north', north, -CesiumMath.PI_OVER_TWO);\r\n        Check.typeOf.number.lessThanOrEquals('north', north, CesiumMath.PI_OVER_TWO);\r\n\r\n        var south = rectangle.south;\r\n        Check.typeOf.number.greaterThanOrEquals('south', south, -CesiumMath.PI_OVER_TWO);\r\n        Check.typeOf.number.lessThanOrEquals('south', south, CesiumMath.PI_OVER_TWO);\r\n\r\n        var west = rectangle.west;\r\n        Check.typeOf.number.greaterThanOrEquals('west', west, -Math.PI);\r\n        Check.typeOf.number.lessThanOrEquals('west', west, Math.PI);\r\n\r\n        var east = rectangle.east;\r\n        Check.typeOf.number.greaterThanOrEquals('east', east, -Math.PI);\r\n        Check.typeOf.number.lessThanOrEquals('east', east, Math.PI);\r\n        //>>includeEnd('debug');\r\n    };\r\n\r\n    /**\r\n     * Computes the southwest corner of a rectangle.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle for which to find the corner\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\r\n     */\r\n    Rectangle.southwest = function(rectangle, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rectangle', rectangle);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(rectangle.west, rectangle.south);\r\n        }\r\n        result.longitude = rectangle.west;\r\n        result.latitude = rectangle.south;\r\n        result.height = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the northwest corner of a rectangle.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle for which to find the corner\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\r\n     */\r\n    Rectangle.northwest = function(rectangle, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rectangle', rectangle);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(rectangle.west, rectangle.north);\r\n        }\r\n        result.longitude = rectangle.west;\r\n        result.latitude = rectangle.north;\r\n        result.height = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the northeast corner of a rectangle.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle for which to find the corner\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\r\n     */\r\n    Rectangle.northeast = function(rectangle, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rectangle', rectangle);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(rectangle.east, rectangle.north);\r\n        }\r\n        result.longitude = rectangle.east;\r\n        result.latitude = rectangle.north;\r\n        result.height = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the southeast corner of a rectangle.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle for which to find the corner\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\r\n     */\r\n    Rectangle.southeast = function(rectangle, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rectangle', rectangle);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(rectangle.east, rectangle.south);\r\n        }\r\n        result.longitude = rectangle.east;\r\n        result.latitude = rectangle.south;\r\n        result.height = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the center of a rectangle.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle for which to find the center\r\n     * @param {Cartographic} [result] The object onto which to store the result.\r\n     * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\r\n     */\r\n    Rectangle.center = function(rectangle, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rectangle', rectangle);\r\n        //>>includeEnd('debug');\r\n\r\n        var east = rectangle.east;\r\n        var west = rectangle.west;\r\n\r\n        if (east < west) {\r\n            east += CesiumMath.TWO_PI;\r\n        }\r\n\r\n        var longitude = CesiumMath.negativePiToPi((west + east) * 0.5);\r\n        var latitude = (rectangle.south + rectangle.north) * 0.5;\r\n\r\n        if (!defined(result)) {\r\n            return new Cartographic(longitude, latitude);\r\n        }\r\n\r\n        result.longitude = longitude;\r\n        result.latitude = latitude;\r\n        result.height = 0.0;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the intersection of two rectangles.  This function assumes that the rectangle's coordinates are\r\n     * latitude and longitude in radians and produces a correct intersection, taking into account the fact that\r\n     * the same angle can be represented with multiple values as well as the wrapping of longitude at the\r\n     * anti-meridian.  For a simple intersection that ignores these factors and can be used with projected\r\n     * coordinates, see {@link Rectangle.simpleIntersection}.\r\n     *\r\n     * @param {Rectangle} rectangle On rectangle to find an intersection\r\n     * @param {Rectangle} otherRectangle Another rectangle to find an intersection\r\n     * @param {Rectangle} [result] The object onto which to store the result.\r\n     * @returns {Rectangle|undefined} The modified result parameter, a new Rectangle instance if none was provided or undefined if there is no intersection.\r\n     */\r\n    Rectangle.intersection = function(rectangle, otherRectangle, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rectangle', rectangle);\r\n        Check.typeOf.object('otherRectangle', otherRectangle);\r\n        //>>includeEnd('debug');\r\n\r\n        var rectangleEast = rectangle.east;\r\n        var rectangleWest = rectangle.west;\r\n\r\n        var otherRectangleEast = otherRectangle.east;\r\n        var otherRectangleWest = otherRectangle.west;\r\n\r\n        if (rectangleEast < rectangleWest && otherRectangleEast > 0.0) {\r\n            rectangleEast += CesiumMath.TWO_PI;\r\n        } else if (otherRectangleEast < otherRectangleWest && rectangleEast > 0.0) {\r\n            otherRectangleEast += CesiumMath.TWO_PI;\r\n        }\r\n\r\n        if (rectangleEast < rectangleWest && otherRectangleWest < 0.0) {\r\n            otherRectangleWest += CesiumMath.TWO_PI;\r\n        } else if (otherRectangleEast < otherRectangleWest && rectangleWest < 0.0) {\r\n            rectangleWest += CesiumMath.TWO_PI;\r\n        }\r\n\r\n        var west = CesiumMath.negativePiToPi(Math.max(rectangleWest, otherRectangleWest));\r\n        var east = CesiumMath.negativePiToPi(Math.min(rectangleEast, otherRectangleEast));\r\n\r\n        if ((rectangle.west < rectangle.east || otherRectangle.west < otherRectangle.east) && east <= west) {\r\n            return undefined;\r\n        }\r\n\r\n        var south = Math.max(rectangle.south, otherRectangle.south);\r\n        var north = Math.min(rectangle.north, otherRectangle.north);\r\n\r\n        if (south >= north) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Rectangle(west, south, east, north);\r\n        }\r\n        result.west = west;\r\n        result.south = south;\r\n        result.east = east;\r\n        result.north = north;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a simple intersection of two rectangles.  Unlike {@link Rectangle.intersection}, this function\r\n     * does not attempt to put the angular coordinates into a consistent range or to account for crossing the\r\n     * anti-meridian.  As such, it can be used for rectangles where the coordinates are not simply latitude\r\n     * and longitude (i.e. projected coordinates).\r\n     *\r\n     * @param {Rectangle} rectangle On rectangle to find an intersection\r\n     * @param {Rectangle} otherRectangle Another rectangle to find an intersection\r\n     * @param {Rectangle} [result] The object onto which to store the result.\r\n     * @returns {Rectangle|undefined} The modified result parameter, a new Rectangle instance if none was provided or undefined if there is no intersection.\r\n     */\r\n    Rectangle.simpleIntersection = function(rectangle, otherRectangle, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rectangle', rectangle);\r\n        Check.typeOf.object('otherRectangle', otherRectangle);\r\n        //>>includeEnd('debug');\r\n\r\n        var west = Math.max(rectangle.west, otherRectangle.west);\r\n        var south = Math.max(rectangle.south, otherRectangle.south);\r\n        var east = Math.min(rectangle.east, otherRectangle.east);\r\n        var north = Math.min(rectangle.north, otherRectangle.north);\r\n\r\n        if (south >= north || west >= east) {\r\n            return undefined;\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Rectangle(west, south, east, north);\r\n        }\r\n\r\n        result.west = west;\r\n        result.south = south;\r\n        result.east = east;\r\n        result.north = north;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a rectangle that is the union of two rectangles.\r\n     *\r\n     * @param {Rectangle} rectangle A rectangle to enclose in rectangle.\r\n     * @param {Rectangle} otherRectangle A rectangle to enclose in a rectangle.\r\n     * @param {Rectangle} [result] The object onto which to store the result.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n     */\r\n    Rectangle.union = function(rectangle, otherRectangle, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rectangle', rectangle);\r\n        Check.typeOf.object('otherRectangle', otherRectangle);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            result = new Rectangle();\r\n        }\r\n\r\n        var rectangleEast = rectangle.east;\r\n        var rectangleWest = rectangle.west;\r\n\r\n        var otherRectangleEast = otherRectangle.east;\r\n        var otherRectangleWest = otherRectangle.west;\r\n\r\n        if (rectangleEast < rectangleWest && otherRectangleEast > 0.0) {\r\n            rectangleEast += CesiumMath.TWO_PI;\r\n        } else if (otherRectangleEast < otherRectangleWest && rectangleEast > 0.0) {\r\n            otherRectangleEast += CesiumMath.TWO_PI;\r\n        }\r\n\r\n        if (rectangleEast < rectangleWest && otherRectangleWest < 0.0) {\r\n            otherRectangleWest += CesiumMath.TWO_PI;\r\n        } else if (otherRectangleEast < otherRectangleWest && rectangleWest < 0.0) {\r\n            rectangleWest += CesiumMath.TWO_PI;\r\n        }\r\n\r\n        var west = CesiumMath.convertLongitudeRange(Math.min(rectangleWest, otherRectangleWest));\r\n        var east = CesiumMath.convertLongitudeRange(Math.max(rectangleEast, otherRectangleEast));\r\n\r\n        result.west = west;\r\n        result.south = Math.min(rectangle.south, otherRectangle.south);\r\n        result.east = east;\r\n        result.north = Math.max(rectangle.north, otherRectangle.north);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes a rectangle by enlarging the provided rectangle until it contains the provided cartographic.\r\n     *\r\n     * @param {Rectangle} rectangle A rectangle to expand.\r\n     * @param {Cartographic} cartographic A cartographic to enclose in a rectangle.\r\n     * @param {Rectangle} [result] The object onto which to store the result.\r\n     * @returns {Rectangle} The modified result parameter or a new Rectangle instance if one was not provided.\r\n     */\r\n    Rectangle.expand = function(rectangle, cartographic, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rectangle', rectangle);\r\n        Check.typeOf.object('cartographic', cartographic);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            result = new Rectangle();\r\n        }\r\n\r\n        result.west = Math.min(rectangle.west, cartographic.longitude);\r\n        result.south = Math.min(rectangle.south, cartographic.latitude);\r\n        result.east = Math.max(rectangle.east, cartographic.longitude);\r\n        result.north = Math.max(rectangle.north, cartographic.latitude);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns true if the cartographic is on or inside the rectangle, false otherwise.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle\r\n     * @param {Cartographic} cartographic The cartographic to test.\r\n     * @returns {Boolean} true if the provided cartographic is inside the rectangle, false otherwise.\r\n     */\r\n    Rectangle.contains = function(rectangle, cartographic) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rectangle', rectangle);\r\n        Check.typeOf.object('cartographic', cartographic);\r\n        //>>includeEnd('debug');\r\n\r\n        var longitude = cartographic.longitude;\r\n        var latitude = cartographic.latitude;\r\n\r\n        var west = rectangle.west;\r\n        var east = rectangle.east;\r\n\r\n        if (east < west) {\r\n            east += CesiumMath.TWO_PI;\r\n            if (longitude < 0.0) {\r\n                longitude += CesiumMath.TWO_PI;\r\n            }\r\n        }\r\n        return (longitude > west || CesiumMath.equalsEpsilon(longitude, west, CesiumMath.EPSILON14)) &&\r\n               (longitude < east || CesiumMath.equalsEpsilon(longitude, east, CesiumMath.EPSILON14)) &&\r\n               latitude >= rectangle.south &&\r\n               latitude <= rectangle.north;\r\n    };\r\n\r\n    var subsampleLlaScratch = new Cartographic();\r\n    /**\r\n     * Samples a rectangle so that it includes a list of Cartesian points suitable for passing to\r\n     * {@link BoundingSphere#fromPoints}.  Sampling is necessary to account\r\n     * for rectangles that cover the poles or cross the equator.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle to subsample.\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid to use.\r\n     * @param {Number} [surfaceHeight=0.0] The height of the rectangle above the ellipsoid.\r\n     * @param {Cartesian3[]} [result] The array of Cartesians onto which to store the result.\r\n     * @returns {Cartesian3[]} The modified result parameter or a new Array of Cartesians instances if none was provided.\r\n     */\r\n    Rectangle.subsample = function(rectangle, ellipsoid, surfaceHeight, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rectangle', rectangle);\r\n        //>>includeEnd('debug');\r\n\r\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n        surfaceHeight = defaultValue(surfaceHeight, 0.0);\r\n\r\n        if (!defined(result)) {\r\n            result = [];\r\n        }\r\n        var length = 0;\r\n\r\n        var north = rectangle.north;\r\n        var south = rectangle.south;\r\n        var east = rectangle.east;\r\n        var west = rectangle.west;\r\n\r\n        var lla = subsampleLlaScratch;\r\n        lla.height = surfaceHeight;\r\n\r\n        lla.longitude = west;\r\n        lla.latitude = north;\r\n        result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n        length++;\r\n\r\n        lla.longitude = east;\r\n        result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n        length++;\r\n\r\n        lla.latitude = south;\r\n        result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n        length++;\r\n\r\n        lla.longitude = west;\r\n        result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n        length++;\r\n\r\n        if (north < 0.0) {\r\n            lla.latitude = north;\r\n        } else if (south > 0.0) {\r\n            lla.latitude = south;\r\n        } else {\r\n            lla.latitude = 0.0;\r\n        }\r\n\r\n        for ( var i = 1; i < 8; ++i) {\r\n            lla.longitude = -Math.PI + i * CesiumMath.PI_OVER_TWO;\r\n            if (Rectangle.contains(rectangle, lla)) {\r\n                result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n                length++;\r\n            }\r\n        }\r\n\r\n        if (lla.latitude === 0.0) {\r\n            lla.longitude = west;\r\n            result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n            length++;\r\n            lla.longitude = east;\r\n            result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n            length++;\r\n        }\r\n        result.length = length;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * The largest possible rectangle.\r\n     *\r\n     * @type {Rectangle}\r\n     * @constant\r\n    */\r\n    Rectangle.MAX_VALUE = Object.freeze(new Rectangle(-Math.PI, -CesiumMath.PI_OVER_TWO, Math.PI, CesiumMath.PI_OVER_TWO));\r\nexport default Rectangle;\r\n","import Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\n\r\n    /**\r\n     * A 2D Cartesian point.\r\n     * @alias Cartesian2\r\n     * @constructor\r\n     *\r\n     * @param {Number} [x=0.0] The X component.\r\n     * @param {Number} [y=0.0] The Y component.\r\n     *\r\n     * @see Cartesian3\r\n     * @see Cartesian4\r\n     * @see Packable\r\n     */\r\n    function Cartesian2(x, y) {\r\n        /**\r\n         * The X component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.x = defaultValue(x, 0.0);\r\n\r\n        /**\r\n         * The Y component.\r\n         * @type {Number}\r\n         * @default 0.0\r\n         */\r\n        this.y = defaultValue(y, 0.0);\r\n    }\r\n\r\n    /**\r\n     * Creates a Cartesian2 instance from x and y coordinates.\r\n     *\r\n     * @param {Number} x The x coordinate.\r\n     * @param {Number} y The y coordinate.\r\n     * @param {Cartesian2} [result] The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n     */\r\n    Cartesian2.fromElements = function(x, y, result) {\r\n        if (!defined(result)) {\r\n            return new Cartesian2(x, y);\r\n        }\r\n\r\n        result.x = x;\r\n        result.y = y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Cartesian2 instance.\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian to duplicate.\r\n     * @param {Cartesian2} [result] The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided. (Returns undefined if cartesian is undefined)\r\n     */\r\n    Cartesian2.clone = function(cartesian, result) {\r\n        if (!defined(cartesian)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new Cartesian2(cartesian.x, cartesian.y);\r\n        }\r\n\r\n        result.x = cartesian.x;\r\n        result.y = cartesian.y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Cartesian2 instance from an existing Cartesian3.  This simply takes the\r\n     * x and y properties of the Cartesian3 and drops z.\r\n     * @function\r\n     *\r\n     * @param {Cartesian3} cartesian The Cartesian3 instance to create a Cartesian2 instance from.\r\n     * @param {Cartesian2} [result] The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n     */\r\n    Cartesian2.fromCartesian3 = Cartesian2.clone;\r\n\r\n    /**\r\n     * Creates a Cartesian2 instance from an existing Cartesian4.  This simply takes the\r\n     * x and y properties of the Cartesian4 and drops z and w.\r\n     * @function\r\n     *\r\n     * @param {Cartesian4} cartesian The Cartesian4 instance to create a Cartesian2 instance from.\r\n     * @param {Cartesian2} [result] The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n     */\r\n    Cartesian2.fromCartesian4 = Cartesian2.clone;\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Cartesian2.packedLength = 2;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Cartesian2} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Cartesian2.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value.x;\r\n        array[startingIndex] = value.y;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Cartesian2} [result] The object into which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n     */\r\n    Cartesian2.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian2();\r\n        }\r\n        result.x = array[startingIndex++];\r\n        result.y = array[startingIndex];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Flattens an array of Cartesian2s into and array of components.\r\n     *\r\n     * @param {Cartesian2[]} array The array of cartesians to pack.\r\n     * @param {Number[]} [result] The array onto which to store the result. If this is a typed array, it must have array.length * 2 components, else a {@link DeveloperError} will be thrown. If it is a regular array, it will be resized to have (array.length * 2) elements.\r\n\r\n     * @returns {Number[]} The packed array.\r\n     */\r\n    Cartesian2.packArray = function(array, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        var length = array.length;\r\n        var resultLength = length * 2;\r\n        if (!defined(result)) {\r\n            result = new Array(resultLength);\r\n        } else if (!Array.isArray(result) && result.length !== resultLength) {\r\n            throw new DeveloperError('If result is a typed array, it must have exactly array.length * 2 elements');\r\n        } else if (result.length !== resultLength) {\r\n            result.length = resultLength;\r\n        }\r\n\r\n        for (var i = 0; i < length; ++i) {\r\n            Cartesian2.pack(array[i], result, i * 2);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Unpacks an array of cartesian components into and array of Cartesian2s.\r\n     *\r\n     * @param {Number[]} array The array of components to unpack.\r\n     * @param {Cartesian2[]} [result] The array onto which to store the result.\r\n     * @returns {Cartesian2[]} The unpacked array.\r\n     */\r\n    Cartesian2.unpackArray = function(array, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        Check.typeOf.number.greaterThanOrEquals('array.length', array.length, 2);\r\n        if (array.length % 2 !== 0) {\r\n            throw new DeveloperError('array length must be a multiple of 2.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var length = array.length;\r\n        if (!defined(result)) {\r\n            result = new Array(length / 2);\r\n        } else {\r\n            result.length = length / 2;\r\n        }\r\n\r\n        for (var i = 0; i < length; i += 2) {\r\n            var index = i / 2;\r\n            result[index] = Cartesian2.unpack(array, i, result[index]);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a Cartesian2 from two consecutive elements in an array.\r\n     * @function\r\n     *\r\n     * @param {Number[]} array The array whose two consecutive elements correspond to the x and y components, respectively.\r\n     * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to the x component.\r\n     * @param {Cartesian2} [result] The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n     *\r\n     * @example\r\n     * // Create a Cartesian2 with (1.0, 2.0)\r\n     * var v = [1.0, 2.0];\r\n     * var p = Cesium.Cartesian2.fromArray(v);\r\n     *\r\n     * // Create a Cartesian2 with (1.0, 2.0) using an offset into an array\r\n     * var v2 = [0.0, 0.0, 1.0, 2.0];\r\n     * var p2 = Cesium.Cartesian2.fromArray(v2, 2);\r\n     */\r\n    Cartesian2.fromArray = Cartesian2.unpack;\r\n\r\n    /**\r\n     * Computes the value of the maximum component for the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian2} cartesian The cartesian to use.\r\n     * @returns {Number} The value of the maximum component.\r\n     */\r\n    Cartesian2.maximumComponent = function(cartesian) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        //>>includeEnd('debug');\r\n\r\n        return Math.max(cartesian.x, cartesian.y);\r\n    };\r\n\r\n    /**\r\n     * Computes the value of the minimum component for the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian2} cartesian The cartesian to use.\r\n     * @returns {Number} The value of the minimum component.\r\n     */\r\n    Cartesian2.minimumComponent = function(cartesian) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        //>>includeEnd('debug');\r\n\r\n        return Math.min(cartesian.x, cartesian.y);\r\n    };\r\n\r\n    /**\r\n     * Compares two Cartesians and computes a Cartesian which contains the minimum components of the supplied Cartesians.\r\n     *\r\n     * @param {Cartesian2} first A cartesian to compare.\r\n     * @param {Cartesian2} second A cartesian to compare.\r\n     * @param {Cartesian2} result The object into which to store the result.\r\n     * @returns {Cartesian2} A cartesian with the minimum components.\r\n     */\r\n    Cartesian2.minimumByComponent = function(first, second, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('first', first);\r\n        Check.typeOf.object('second', second);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = Math.min(first.x, second.x);\r\n        result.y = Math.min(first.y, second.y);\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares two Cartesians and computes a Cartesian which contains the maximum components of the supplied Cartesians.\r\n     *\r\n     * @param {Cartesian2} first A cartesian to compare.\r\n     * @param {Cartesian2} second A cartesian to compare.\r\n     * @param {Cartesian2} result The object into which to store the result.\r\n     * @returns {Cartesian2} A cartesian with the maximum components.\r\n     */\r\n    Cartesian2.maximumByComponent = function(first, second, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('first', first);\r\n        Check.typeOf.object('second', second);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = Math.max(first.x, second.x);\r\n        result.y = Math.max(first.y, second.y);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the provided Cartesian's squared magnitude.\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian instance whose squared magnitude is to be computed.\r\n     * @returns {Number} The squared magnitude.\r\n     */\r\n    Cartesian2.magnitudeSquared = function(cartesian) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        //>>includeEnd('debug');\r\n\r\n        return cartesian.x * cartesian.x + cartesian.y * cartesian.y;\r\n    };\r\n\r\n    /**\r\n     * Computes the Cartesian's magnitude (length).\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian instance whose magnitude is to be computed.\r\n     * @returns {Number} The magnitude.\r\n     */\r\n    Cartesian2.magnitude = function(cartesian) {\r\n        return Math.sqrt(Cartesian2.magnitudeSquared(cartesian));\r\n    };\r\n\r\n    var distanceScratch = new Cartesian2();\r\n\r\n    /**\r\n     * Computes the distance between two points.\r\n     *\r\n     * @param {Cartesian2} left The first point to compute the distance from.\r\n     * @param {Cartesian2} right The second point to compute the distance to.\r\n     * @returns {Number} The distance between two points.\r\n     *\r\n     * @example\r\n     * // Returns 1.0\r\n     * var d = Cesium.Cartesian2.distance(new Cesium.Cartesian2(1.0, 0.0), new Cesium.Cartesian2(2.0, 0.0));\r\n     */\r\n    Cartesian2.distance = function(left, right) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        //>>includeEnd('debug');\r\n\r\n        Cartesian2.subtract(left, right, distanceScratch);\r\n        return Cartesian2.magnitude(distanceScratch);\r\n    };\r\n\r\n    /**\r\n     * Computes the squared distance between two points.  Comparing squared distances\r\n     * using this function is more efficient than comparing distances using {@link Cartesian2#distance}.\r\n     *\r\n     * @param {Cartesian2} left The first point to compute the distance from.\r\n     * @param {Cartesian2} right The second point to compute the distance to.\r\n     * @returns {Number} The distance between two points.\r\n     *\r\n     * @example\r\n     * // Returns 4.0, not 2.0\r\n     * var d = Cesium.Cartesian2.distance(new Cesium.Cartesian2(1.0, 0.0), new Cesium.Cartesian2(3.0, 0.0));\r\n     */\r\n    Cartesian2.distanceSquared = function(left, right) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        //>>includeEnd('debug');\r\n\r\n        Cartesian2.subtract(left, right, distanceScratch);\r\n        return Cartesian2.magnitudeSquared(distanceScratch);\r\n    };\r\n\r\n    /**\r\n     * Computes the normalized form of the supplied Cartesian.\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian to be normalized.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.normalize = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var magnitude = Cartesian2.magnitude(cartesian);\r\n\r\n        result.x = cartesian.x / magnitude;\r\n        result.y = cartesian.y / magnitude;\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (isNaN(result.x) || isNaN(result.y)) {\r\n            throw new DeveloperError('normalized result is not a number');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the dot (scalar) product of two Cartesians.\r\n     *\r\n     * @param {Cartesian2} left The first Cartesian.\r\n     * @param {Cartesian2} right The second Cartesian.\r\n     * @returns {Number} The dot product.\r\n     */\r\n    Cartesian2.dot = function(left, right) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        //>>includeEnd('debug');\r\n\r\n        return left.x * right.x + left.y * right.y;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise product of two Cartesians.\r\n     *\r\n     * @param {Cartesian2} left The first Cartesian.\r\n     * @param {Cartesian2} right The second Cartesian.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.multiplyComponents = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = left.x * right.x;\r\n        result.y = left.y * right.y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise quotient of two Cartesians.\r\n     *\r\n     * @param {Cartesian2} left The first Cartesian.\r\n     * @param {Cartesian2} right The second Cartesian.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.divideComponents = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = left.x / right.x;\r\n        result.y = left.y / right.y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise sum of two Cartesians.\r\n     *\r\n     * @param {Cartesian2} left The first Cartesian.\r\n     * @param {Cartesian2} right The second Cartesian.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.add = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = left.x + right.x;\r\n        result.y = left.y + right.y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise difference of two Cartesians.\r\n     *\r\n     * @param {Cartesian2} left The first Cartesian.\r\n     * @param {Cartesian2} right The second Cartesian.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.subtract = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = left.x - right.x;\r\n        result.y = left.y - right.y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Multiplies the provided Cartesian componentwise by the provided scalar.\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian to be scaled.\r\n     * @param {Number} scalar The scalar to multiply with.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.multiplyByScalar = function(cartesian, scalar, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.number('scalar', scalar);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = cartesian.x * scalar;\r\n        result.y = cartesian.y * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Divides the provided Cartesian componentwise by the provided scalar.\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian to be divided.\r\n     * @param {Number} scalar The scalar to divide by.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.divideByScalar = function(cartesian, scalar, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.number('scalar', scalar);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = cartesian.x / scalar;\r\n        result.y = cartesian.y / scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Negates the provided Cartesian.\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian to be negated.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.negate = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = -cartesian.x;\r\n        result.y = -cartesian.y;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the absolute value of the provided Cartesian.\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian whose absolute value is to be computed.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.abs = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.x = Math.abs(cartesian.x);\r\n        result.y = Math.abs(cartesian.y);\r\n        return result;\r\n    };\r\n\r\n    var lerpScratch = new Cartesian2();\r\n    /**\r\n     * Computes the linear interpolation or extrapolation at t using the provided cartesians.\r\n     *\r\n     * @param {Cartesian2} start The value corresponding to t at 0.0.\r\n     * @param {Cartesian2} end The value corresponding to t at 1.0.\r\n     * @param {Number} t The point along t at which to interpolate.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter.\r\n     */\r\n    Cartesian2.lerp = function(start, end, t, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('start', start);\r\n        Check.typeOf.object('end', end);\r\n        Check.typeOf.number('t', t);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        Cartesian2.multiplyByScalar(end, t, lerpScratch);\r\n        result = Cartesian2.multiplyByScalar(start, 1.0 - t, result);\r\n        return Cartesian2.add(lerpScratch, result, result);\r\n    };\r\n\r\n    var angleBetweenScratch = new Cartesian2();\r\n    var angleBetweenScratch2 = new Cartesian2();\r\n    /**\r\n     * Returns the angle, in radians, between the provided Cartesians.\r\n     *\r\n     * @param {Cartesian2} left The first Cartesian.\r\n     * @param {Cartesian2} right The second Cartesian.\r\n     * @returns {Number} The angle between the Cartesians.\r\n     */\r\n    Cartesian2.angleBetween = function(left, right) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        //>>includeEnd('debug');\r\n\r\n        Cartesian2.normalize(left, angleBetweenScratch);\r\n        Cartesian2.normalize(right, angleBetweenScratch2);\r\n        return CesiumMath.acosClamped(Cartesian2.dot(angleBetweenScratch, angleBetweenScratch2));\r\n    };\r\n\r\n    var mostOrthogonalAxisScratch = new Cartesian2();\r\n    /**\r\n     * Returns the axis that is most orthogonal to the provided Cartesian.\r\n     *\r\n     * @param {Cartesian2} cartesian The Cartesian on which to find the most orthogonal axis.\r\n     * @param {Cartesian2} result The object onto which to store the result.\r\n     * @returns {Cartesian2} The most orthogonal axis.\r\n     */\r\n    Cartesian2.mostOrthogonalAxis = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        var f = Cartesian2.normalize(cartesian, mostOrthogonalAxisScratch);\r\n        Cartesian2.abs(f, f);\r\n\r\n        if (f.x <= f.y) {\r\n            result = Cartesian2.clone(Cartesian2.UNIT_X, result);\r\n        } else {\r\n            result = Cartesian2.clone(Cartesian2.UNIT_Y, result);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Cartesians componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian2} [left] The first Cartesian.\r\n     * @param {Cartesian2} [right] The second Cartesian.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartesian2.equals = function(left, right) {\r\n        return (left === right) ||\r\n               ((defined(left)) &&\r\n                (defined(right)) &&\r\n                (left.x === right.x) &&\r\n                (left.y === right.y));\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Cartesian2.equalsArray = function(cartesian, array, offset) {\r\n        return cartesian.x === array[offset] &&\r\n               cartesian.y === array[offset + 1];\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Cartesians componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian2} [left] The first Cartesian.\r\n     * @param {Cartesian2} [right] The second Cartesian.\r\n     * @param {Number} [relativeEpsilon] The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartesian2.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {\r\n        return (left === right) ||\r\n               (defined(left) &&\r\n                defined(right) &&\r\n                CesiumMath.equalsEpsilon(left.x, right.x, relativeEpsilon, absoluteEpsilon) &&\r\n                CesiumMath.equalsEpsilon(left.y, right.y, relativeEpsilon, absoluteEpsilon));\r\n    };\r\n\r\n    /**\r\n     * An immutable Cartesian2 instance initialized to (0.0, 0.0).\r\n     *\r\n     * @type {Cartesian2}\r\n     * @constant\r\n     */\r\n    Cartesian2.ZERO = Object.freeze(new Cartesian2(0.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian2 instance initialized to (1.0, 0.0).\r\n     *\r\n     * @type {Cartesian2}\r\n     * @constant\r\n     */\r\n    Cartesian2.UNIT_X = Object.freeze(new Cartesian2(1.0, 0.0));\r\n\r\n    /**\r\n     * An immutable Cartesian2 instance initialized to (0.0, 1.0).\r\n     *\r\n     * @type {Cartesian2}\r\n     * @constant\r\n     */\r\n    Cartesian2.UNIT_Y = Object.freeze(new Cartesian2(0.0, 1.0));\r\n\r\n    /**\r\n     * Duplicates this Cartesian2 instance.\r\n     *\r\n     * @param {Cartesian2} [result] The object onto which to store the result.\r\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n     */\r\n    Cartesian2.prototype.clone = function(result) {\r\n        return Cartesian2.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian2} [right] The right hand side Cartesian.\r\n     * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     */\r\n    Cartesian2.prototype.equals = function(right) {\r\n        return Cartesian2.equals(this, right);\r\n    };\r\n\r\n    /**\r\n     * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n     * <code>true</code> if they pass an absolute or relative tolerance test,\r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param {Cartesian2} [right] The right hand side Cartesian.\r\n     * @param {Number} [relativeEpsilon] The relative epsilon tolerance to use for equality testing.\r\n     * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\r\n     */\r\n    Cartesian2.prototype.equalsEpsilon = function(right, relativeEpsilon, absoluteEpsilon) {\r\n        return Cartesian2.equalsEpsilon(this, right, relativeEpsilon, absoluteEpsilon);\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this Cartesian in the format '(x, y)'.\r\n     *\r\n     * @returns {String} A string representing the provided Cartesian in the format '(x, y)'.\r\n     */\r\n    Cartesian2.prototype.toString = function() {\r\n        return '(' + this.x + ', ' + this.y + ')';\r\n    };\r\nexport default Cartesian2;\r\n"],"names":["defaultValue","Check","defined","DeveloperError","CesiumMath","cartesianToCartographicN","cartesianToCartographicP","cartesianToCartographicH","distanceScratch","lerpScratch","angleBetweenScratch","angleBetweenScratch2","mostOrthogonalAxisScratch"],"mappings":"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"}