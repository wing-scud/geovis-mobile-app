{"version":3,"file":"PolylineVolumeGeometryLibrary-1b1fd8f7.js","sources":["../../../../Source/Core/CornerType.js","../../../../Source/Core/PolylineVolumeGeometryLibrary.js"],"sourcesContent":["\r\n    /**\r\n     * Style options for corners.\r\n     *\r\n     * @demo The {@link https://sandcastle.cesium.com/index.html?src=Corridor.html&label=Geometries|Corridor Demo}\r\n     * demonstrates the three corner types, as used by {@link CorridorGraphics}.\r\n     *\r\n     * @exports CornerType\r\n     */\r\n    var CornerType = {\r\n        /**\r\n         * <img src=\"Images/CornerTypeRounded.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n         *\r\n         * Corner has a smooth edge.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        ROUNDED : 0,\r\n\r\n        /**\r\n         * <img src=\"Images/CornerTypeMitered.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n         *\r\n         * Corner point is the intersection of adjacent edges.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        MITERED : 1,\r\n\r\n        /**\r\n         * <img src=\"Images/CornerTypeBeveled.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n         *\r\n         * Corner is clipped.\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        BEVELED : 2\r\n    };\r\nexport default Object.freeze(CornerType);\r\n","import Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartesian4 from './Cartesian4.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport CornerType from './CornerType.js';\r\nimport EllipsoidTangentPlane from './EllipsoidTangentPlane.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix3 from './Matrix3.js';\r\nimport Matrix4 from './Matrix4.js';\r\nimport PolylinePipeline from './PolylinePipeline.js';\r\nimport Quaternion from './Quaternion.js';\r\nimport Transforms from './Transforms.js';\r\n\r\n    var scratch2Array = [new Cartesian3(), new Cartesian3()];\r\n    var scratchCartesian1 = new Cartesian3();\r\n    var scratchCartesian2 = new Cartesian3();\r\n    var scratchCartesian3 = new Cartesian3();\r\n    var scratchCartesian4 = new Cartesian3();\r\n    var scratchCartesian5 = new Cartesian3();\r\n    var scratchCartesian6 = new Cartesian3();\r\n    var scratchCartesian7 = new Cartesian3();\r\n    var scratchCartesian8 = new Cartesian3();\r\n    var scratchCartesian9 = new Cartesian3();\r\n\r\n    var scratch1 = new Cartesian3();\r\n    var scratch2 = new Cartesian3();\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    var PolylineVolumeGeometryLibrary = {};\r\n\r\n    var cartographic = new Cartographic();\r\n    function scaleToSurface(positions, ellipsoid) {\r\n        var heights = new Array(positions.length);\r\n        for (var i = 0; i < positions.length; i++) {\r\n            var pos = positions[i];\r\n            cartographic = ellipsoid.cartesianToCartographic(pos, cartographic);\r\n            heights[i] = cartographic.height;\r\n            positions[i] = ellipsoid.scaleToGeodeticSurface(pos, pos);\r\n        }\r\n        return heights;\r\n    }\r\n\r\n    function subdivideHeights(points, h0, h1, granularity) {\r\n        var p0 = points[0];\r\n        var p1 = points[1];\r\n        var angleBetween = Cartesian3.angleBetween(p0, p1);\r\n        var numPoints = Math.ceil(angleBetween / granularity);\r\n        var heights = new Array(numPoints);\r\n        var i;\r\n        if (h0 === h1) {\r\n            for (i = 0; i < numPoints; i++) {\r\n                heights[i] = h0;\r\n            }\r\n            heights.push(h1);\r\n            return heights;\r\n        }\r\n\r\n        var dHeight = h1 - h0;\r\n        var heightPerVertex = dHeight / (numPoints);\r\n\r\n        for (i = 1; i < numPoints; i++) {\r\n            var h = h0 + i * heightPerVertex;\r\n            heights[i] = h;\r\n        }\r\n\r\n        heights[0] = h0;\r\n        heights.push(h1);\r\n        return heights;\r\n    }\r\n\r\n    var nextScratch = new Cartesian3();\r\n    var prevScratch = new Cartesian3();\r\n\r\n    function computeRotationAngle(start, end, position, ellipsoid) {\r\n        var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\r\n        var next = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, start, nextScratch), nextScratch);\r\n        var prev = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, end, prevScratch), prevScratch);\r\n        var angle = Cartesian2.angleBetween(next, prev);\r\n\r\n        return (prev.x * next.y - prev.y * next.x >= 0.0) ? -angle : angle;\r\n    }\r\n\r\n    var negativeX = new Cartesian3(-1, 0, 0);\r\n    var transform = new Matrix4();\r\n    var translation = new Matrix4();\r\n    var rotationZ = new Matrix3();\r\n    var scaleMatrix = Matrix3.IDENTITY.clone();\r\n    var westScratch = new Cartesian3();\r\n    var finalPosScratch = new Cartesian4();\r\n    var heightCartesian = new Cartesian3();\r\n    function addPosition(center, left, shape, finalPositions, ellipsoid, height, xScalar, repeat) {\r\n        var west = westScratch;\r\n        var finalPosition = finalPosScratch;\r\n        transform = Transforms.eastNorthUpToFixedFrame(center, ellipsoid, transform);\r\n\r\n        west = Matrix4.multiplyByPointAsVector(transform, negativeX, west);\r\n        west = Cartesian3.normalize(west, west);\r\n        var angle = computeRotationAngle(west, left, center, ellipsoid);\r\n        rotationZ = Matrix3.fromRotationZ(angle, rotationZ);\r\n\r\n        heightCartesian.z = height;\r\n        transform = Matrix4.multiplyTransformation(transform, Matrix4.fromRotationTranslation(rotationZ, heightCartesian, translation), transform);\r\n        var scale = scaleMatrix;\r\n        scale[0] = xScalar;\r\n\r\n        for (var j = 0; j < repeat; j++) {\r\n            for (var i = 0; i < shape.length; i += 3) {\r\n                finalPosition = Cartesian3.fromArray(shape, i, finalPosition);\r\n                finalPosition = Matrix3.multiplyByVector(scale, finalPosition, finalPosition);\r\n                finalPosition = Matrix4.multiplyByPoint(transform, finalPosition, finalPosition);\r\n                finalPositions.push(finalPosition.x, finalPosition.y, finalPosition.z);\r\n            }\r\n        }\r\n\r\n        return finalPositions;\r\n    }\r\n\r\n    var centerScratch = new Cartesian3();\r\n    function addPositions(centers, left, shape, finalPositions, ellipsoid, heights, xScalar) {\r\n        for (var i = 0; i < centers.length; i += 3) {\r\n            var center = Cartesian3.fromArray(centers, i, centerScratch);\r\n            finalPositions = addPosition(center, left, shape, finalPositions, ellipsoid, heights[i / 3], xScalar, 1);\r\n        }\r\n        return finalPositions;\r\n    }\r\n\r\n    function convertShapeTo3DDuplicate(shape2D, boundingRectangle) { //orientate 2D shape to XZ plane center at (0, 0, 0), duplicate points\r\n        var length = shape2D.length;\r\n        var shape = new Array(length * 6);\r\n        var index = 0;\r\n        var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\r\n        var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\r\n\r\n        var point = shape2D[0];\r\n        shape[index++] = point.x - xOffset;\r\n        shape[index++] = 0.0;\r\n        shape[index++] = point.y - yOffset;\r\n        for (var i = 1; i < length; i++) {\r\n            point = shape2D[i];\r\n            var x = point.x - xOffset;\r\n            var z = point.y - yOffset;\r\n            shape[index++] = x;\r\n            shape[index++] = 0.0;\r\n            shape[index++] = z;\r\n\r\n            shape[index++] = x;\r\n            shape[index++] = 0.0;\r\n            shape[index++] = z;\r\n        }\r\n        point = shape2D[0];\r\n        shape[index++] = point.x - xOffset;\r\n        shape[index++] = 0.0;\r\n        shape[index++] = point.y - yOffset;\r\n\r\n        return shape;\r\n    }\r\n\r\n    function convertShapeTo3D(shape2D, boundingRectangle) { //orientate 2D shape to XZ plane center at (0, 0, 0)\r\n        var length = shape2D.length;\r\n        var shape = new Array(length * 3);\r\n        var index = 0;\r\n        var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\r\n        var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            shape[index++] = shape2D[i].x - xOffset;\r\n            shape[index++] = 0;\r\n            shape[index++] = shape2D[i].y - yOffset;\r\n        }\r\n\r\n        return shape;\r\n    }\r\n\r\n    var quaterion = new Quaternion();\r\n    var startPointScratch = new Cartesian3();\r\n    var rotMatrix = new Matrix3();\r\n    function computeRoundCorner(pivot, startPoint, endPoint, cornerType, leftIsOutside, ellipsoid, finalPositions, shape, height, duplicatePoints) {\r\n        var angle = Cartesian3.angleBetween(Cartesian3.subtract(startPoint, pivot, scratch1), Cartesian3.subtract(endPoint, pivot, scratch2));\r\n        var granularity = (cornerType === CornerType.BEVELED) ? 0 : Math.ceil(angle / CesiumMath.toRadians(5));\r\n\r\n        var m;\r\n        if (leftIsOutside) {\r\n            m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(Cartesian3.negate(pivot, scratch1), angle / (granularity + 1), quaterion), rotMatrix);\r\n        } else {\r\n            m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(pivot, angle / (granularity + 1), quaterion), rotMatrix);\r\n        }\r\n\r\n        var left;\r\n        var surfacePoint;\r\n        startPoint = Cartesian3.clone(startPoint, startPointScratch);\r\n        if (granularity > 0) {\r\n            var repeat = duplicatePoints ? 2 : 1;\r\n            for (var i = 0; i < granularity; i++) {\r\n                startPoint = Matrix3.multiplyByVector(m, startPoint, startPoint);\r\n                left = Cartesian3.subtract(startPoint, pivot, scratch1);\r\n                left = Cartesian3.normalize(left, left);\r\n                if (!leftIsOutside) {\r\n                    left = Cartesian3.negate(left, left);\r\n                }\r\n                surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\r\n                finalPositions = addPosition(surfacePoint, left, shape, finalPositions, ellipsoid, height, 1, repeat);\r\n            }\r\n        } else {\r\n            left = Cartesian3.subtract(startPoint, pivot, scratch1);\r\n            left = Cartesian3.normalize(left, left);\r\n            if (!leftIsOutside) {\r\n                left = Cartesian3.negate(left, left);\r\n            }\r\n            surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\r\n            finalPositions = addPosition(surfacePoint, left, shape, finalPositions, ellipsoid, height, 1, 1);\r\n\r\n            endPoint = Cartesian3.clone(endPoint, startPointScratch);\r\n            left = Cartesian3.subtract(endPoint, pivot, scratch1);\r\n            left = Cartesian3.normalize(left, left);\r\n            if (!leftIsOutside) {\r\n                left = Cartesian3.negate(left, left);\r\n            }\r\n            surfacePoint = ellipsoid.scaleToGeodeticSurface(endPoint, scratch2);\r\n            finalPositions = addPosition(surfacePoint, left, shape, finalPositions, ellipsoid, height, 1, 1);\r\n        }\r\n\r\n        return finalPositions;\r\n    }\r\n\r\n    PolylineVolumeGeometryLibrary.removeDuplicatesFromShape = function(shapePositions) {\r\n        var length = shapePositions.length;\r\n        var cleanedPositions = [];\r\n        for (var i0 = length - 1, i1 = 0; i1 < length; i0 = i1++) {\r\n            var v0 = shapePositions[i0];\r\n            var v1 = shapePositions[i1];\r\n\r\n            if (!Cartesian2.equals(v0, v1)) {\r\n                cleanedPositions.push(v1); // Shallow copy!\r\n            }\r\n        }\r\n\r\n        return cleanedPositions;\r\n    };\r\n\r\n    PolylineVolumeGeometryLibrary.angleIsGreaterThanPi = function(forward, backward, position, ellipsoid) {\r\n        var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\r\n        var next = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, forward, nextScratch), nextScratch);\r\n        var prev = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, backward, prevScratch), prevScratch);\r\n\r\n        return ((prev.x * next.y) - (prev.y * next.x)) >= 0.0;\r\n    };\r\n\r\n    var scratchForwardProjection = new Cartesian3();\r\n    var scratchBackwardProjection = new Cartesian3();\r\n\r\n    PolylineVolumeGeometryLibrary.computePositions = function(positions, shape2D, boundingRectangle, geometry, duplicatePoints) {\r\n        var ellipsoid = geometry._ellipsoid;\r\n        var heights = scaleToSurface(positions, ellipsoid);\r\n        var granularity = geometry._granularity;\r\n        var cornerType = geometry._cornerType;\r\n        var shapeForSides = duplicatePoints ? convertShapeTo3DDuplicate(shape2D, boundingRectangle) : convertShapeTo3D(shape2D, boundingRectangle);\r\n        var shapeForEnds = duplicatePoints ? convertShapeTo3D(shape2D, boundingRectangle) : undefined;\r\n        var heightOffset = boundingRectangle.height / 2;\r\n        var width = boundingRectangle.width / 2;\r\n        var length = positions.length;\r\n        var finalPositions = [];\r\n        var ends = duplicatePoints ? [] : undefined;\r\n\r\n        var forward = scratchCartesian1;\r\n        var backward = scratchCartesian2;\r\n        var cornerDirection = scratchCartesian3;\r\n        var surfaceNormal = scratchCartesian4;\r\n        var pivot = scratchCartesian5;\r\n        var start = scratchCartesian6;\r\n        var end = scratchCartesian7;\r\n        var left = scratchCartesian8;\r\n        var previousPosition = scratchCartesian9;\r\n\r\n        var position = positions[0];\r\n        var nextPosition = positions[1];\r\n        surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\r\n        forward = Cartesian3.subtract(nextPosition, position, forward);\r\n        forward = Cartesian3.normalize(forward, forward);\r\n        left = Cartesian3.cross(surfaceNormal, forward, left);\r\n        left = Cartesian3.normalize(left, left);\r\n        var h0 = heights[0];\r\n        var h1 = heights[1];\r\n        if (duplicatePoints) {\r\n            ends = addPosition(position, left, shapeForEnds, ends, ellipsoid, h0 + heightOffset, 1, 1);\r\n        }\r\n        previousPosition = Cartesian3.clone(position, previousPosition);\r\n        position = nextPosition;\r\n        backward = Cartesian3.negate(forward, backward);\r\n        var subdividedHeights;\r\n        var subdividedPositions;\r\n        for (var i = 1; i < length - 1; i++) {\r\n            var repeat = duplicatePoints ? 2 : 1;\r\n            nextPosition = positions[i + 1];\r\n            forward = Cartesian3.subtract(nextPosition, position, forward);\r\n            forward = Cartesian3.normalize(forward, forward);\r\n            cornerDirection = Cartesian3.add(forward, backward, cornerDirection);\r\n            cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\r\n            surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\r\n\r\n            var forwardProjection = Cartesian3.multiplyByScalar(surfaceNormal, Cartesian3.dot(forward, surfaceNormal), scratchForwardProjection);\r\n            Cartesian3.subtract(forward, forwardProjection, forwardProjection);\r\n            Cartesian3.normalize(forwardProjection, forwardProjection);\r\n\r\n            var backwardProjection = Cartesian3.multiplyByScalar(surfaceNormal, Cartesian3.dot(backward, surfaceNormal), scratchBackwardProjection);\r\n            Cartesian3.subtract(backward, backwardProjection, backwardProjection);\r\n            Cartesian3.normalize(backwardProjection, backwardProjection);\r\n\r\n            var doCorner = !CesiumMath.equalsEpsilon(Math.abs(Cartesian3.dot(forwardProjection, backwardProjection)), 1.0, CesiumMath.EPSILON7);\r\n\r\n            if (doCorner) {\r\n                cornerDirection = Cartesian3.cross(cornerDirection, surfaceNormal, cornerDirection);\r\n                cornerDirection = Cartesian3.cross(surfaceNormal, cornerDirection, cornerDirection);\r\n                cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\r\n                var scalar = 1 / Math.max(0.25, (Cartesian3.magnitude(Cartesian3.cross(cornerDirection, backward, scratch1))));\r\n                var leftIsOutside = PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(forward, backward, position, ellipsoid);\r\n                if (leftIsOutside) {\r\n                    pivot = Cartesian3.add(position, Cartesian3.multiplyByScalar(cornerDirection, scalar * width, cornerDirection), pivot);\r\n                    start = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, width, start), start);\r\n                    scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\r\n                    scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\r\n                    subdividedHeights = subdivideHeights(scratch2Array, h0 + heightOffset, h1 + heightOffset, granularity);\r\n                    subdividedPositions = PolylinePipeline.generateArc({\r\n                        positions: scratch2Array,\r\n                        granularity: granularity,\r\n                        ellipsoid: ellipsoid\r\n                    });\r\n                    finalPositions = addPositions(subdividedPositions, left, shapeForSides, finalPositions, ellipsoid, subdividedHeights, 1);\r\n                    left = Cartesian3.cross(surfaceNormal, forward, left);\r\n                    left = Cartesian3.normalize(left, left);\r\n                    end = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, width, end), end);\r\n                    if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\r\n                        computeRoundCorner(pivot, start, end, cornerType, leftIsOutside, ellipsoid, finalPositions, shapeForSides, h1 + heightOffset, duplicatePoints);\r\n                    } else {\r\n                        cornerDirection = Cartesian3.negate(cornerDirection, cornerDirection);\r\n                        finalPositions = addPosition(position, cornerDirection, shapeForSides, finalPositions, ellipsoid, h1 + heightOffset, scalar, repeat);\r\n                    }\r\n                    previousPosition = Cartesian3.clone(end, previousPosition);\r\n                } else {\r\n                    pivot = Cartesian3.add(position, Cartesian3.multiplyByScalar(cornerDirection, scalar * width, cornerDirection), pivot);\r\n                    start = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, -width, start), start);\r\n                    scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\r\n                    scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\r\n                    subdividedHeights = subdivideHeights(scratch2Array, h0 + heightOffset, h1 + heightOffset, granularity);\r\n                    subdividedPositions = PolylinePipeline.generateArc({\r\n                        positions: scratch2Array,\r\n                        granularity: granularity,\r\n                        ellipsoid: ellipsoid\r\n                    });\r\n                    finalPositions = addPositions(subdividedPositions, left, shapeForSides, finalPositions, ellipsoid, subdividedHeights, 1);\r\n                    left = Cartesian3.cross(surfaceNormal, forward, left);\r\n                    left = Cartesian3.normalize(left, left);\r\n                    end = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, -width, end), end);\r\n                    if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\r\n                        computeRoundCorner(pivot, start, end, cornerType, leftIsOutside, ellipsoid, finalPositions, shapeForSides, h1 + heightOffset, duplicatePoints);\r\n                    } else {\r\n                        finalPositions = addPosition(position, cornerDirection, shapeForSides, finalPositions, ellipsoid, h1 + heightOffset, scalar, repeat);\r\n                    }\r\n                    previousPosition = Cartesian3.clone(end, previousPosition);\r\n                }\r\n                backward = Cartesian3.negate(forward, backward);\r\n            } else {\r\n                finalPositions = addPosition(previousPosition, left, shapeForSides, finalPositions, ellipsoid, h0 + heightOffset, 1, 1);\r\n                previousPosition = position;\r\n            }\r\n            h0 = h1;\r\n            h1 = heights[i + 1];\r\n            position = nextPosition;\r\n        }\r\n\r\n        scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\r\n        scratch2Array[1] = Cartesian3.clone(position, scratch2Array[1]);\r\n        subdividedHeights = subdivideHeights(scratch2Array, h0 + heightOffset, h1 + heightOffset, granularity);\r\n        subdividedPositions = PolylinePipeline.generateArc({\r\n            positions: scratch2Array,\r\n            granularity: granularity,\r\n            ellipsoid: ellipsoid\r\n        });\r\n        finalPositions = addPositions(subdividedPositions, left, shapeForSides, finalPositions, ellipsoid, subdividedHeights, 1);\r\n        if (duplicatePoints) {\r\n            ends = addPosition(position, left, shapeForEnds, ends, ellipsoid, h1 + heightOffset, 1, 1);\r\n        }\r\n\r\n        length = finalPositions.length;\r\n        var posLength = duplicatePoints ? length + ends.length : length;\r\n        var combinedPositions = new Float64Array(posLength);\r\n        combinedPositions.set(finalPositions);\r\n        if (duplicatePoints) {\r\n            combinedPositions.set(ends, length);\r\n        }\r\n\r\n        return combinedPositions;\r\n    };\r\nexport default PolylineVolumeGeometryLibrary;\r\n"],"names":["Cartesian3","Cartographic","EllipsoidTangentPlane","Cartesian2","Matrix4","Matrix3","Cartesian4","Transforms","Quaternion","CornerType","CesiumMath","PolylinePipeline"],"mappings":"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"}