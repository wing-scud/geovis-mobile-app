{"version":3,"file":"createPolylineVolumeOutlineGeometry.js","sources":["../../../../Source/Core/PolylineVolumeOutlineGeometry.js","../../../../Source/WorkersES6/createPolylineVolumeOutlineGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\r\nimport BoundingRectangle from './BoundingRectangle.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport CornerType from './CornerType.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport PolygonPipeline from './PolygonPipeline.js';\r\nimport PolylineVolumeGeometryLibrary from './PolylineVolumeGeometryLibrary.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport WindingOrder from './WindingOrder.js';\r\n\r\n    function computeAttributes(positions, shape) {\r\n        var attributes = new GeometryAttributes();\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : positions\r\n        });\r\n\r\n        var shapeLength = shape.length;\r\n        var vertexCount = attributes.position.values.length / 3;\r\n        var positionLength = positions.length / 3;\r\n        var shapeCount = positionLength / shapeLength;\r\n        var indices = IndexDatatype.createTypedArray(vertexCount, 2 * shapeLength * (shapeCount + 1));\r\n        var i, j;\r\n        var index = 0;\r\n        i = 0;\r\n        var offset = i * shapeLength;\r\n        for (j = 0; j < shapeLength - 1; j++) {\r\n            indices[index++] = j + offset;\r\n            indices[index++] = j + offset + 1;\r\n        }\r\n        indices[index++] = shapeLength - 1 + offset;\r\n        indices[index++] = offset;\r\n\r\n        i = shapeCount - 1;\r\n        offset = i * shapeLength;\r\n        for (j = 0; j < shapeLength - 1; j++) {\r\n            indices[index++] = j + offset;\r\n            indices[index++] = j + offset + 1;\r\n        }\r\n        indices[index++] = shapeLength - 1 + offset;\r\n        indices[index++] = offset;\r\n\r\n        for (i = 0; i < shapeCount - 1; i++) {\r\n            var firstOffset = shapeLength * i;\r\n            var secondOffset = firstOffset + shapeLength;\r\n            for (j = 0; j < shapeLength; j++) {\r\n                indices[index++] = j + firstOffset;\r\n                indices[index++] = j + secondOffset;\r\n            }\r\n        }\r\n\r\n        var geometry = new Geometry({\r\n            attributes : attributes,\r\n            indices : IndexDatatype.createTypedArray(vertexCount, indices),\r\n            boundingSphere : BoundingSphere.fromVertices(positions),\r\n            primitiveType : PrimitiveType.LINES\r\n        });\r\n\r\n        return geometry;\r\n    }\r\n\r\n    /**\r\n     * A description of a polyline with a volume (a 2D shape extruded along a polyline).\r\n     *\r\n     * @alias PolylineVolumeOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.polylinePositions An array of positions that define the center of the polyline volume.\r\n     * @param {Cartesian2[]} options.shapePositions An array of positions that define the shape to be extruded along the polyline\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\r\n     *\r\n     * @see PolylineVolumeOutlineGeometry#createGeometry\r\n     *\r\n     * @example\r\n     * function computeCircle(radius) {\r\n     *   var positions = [];\r\n     *   for (var i = 0; i < 360; i++) {\r\n     *     var radians = Cesium.Math.toRadians(i);\r\n     *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\r\n     *   }\r\n     *   return positions;\r\n     * }\r\n     *\r\n     * var volumeOutline = new Cesium.PolylineVolumeOutlineGeometry({\r\n     *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\r\n     *     -72.0, 40.0,\r\n     *     -70.0, 35.0\r\n     *   ]),\r\n     *   shapePositions : computeCircle(100000.0)\r\n     * });\r\n     */\r\n    function PolylineVolumeOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var positions = options.polylinePositions;\r\n        var shape = options.shapePositions;\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(positions)) {\r\n            throw new DeveloperError('options.polylinePositions is required.');\r\n        }\r\n        if (!defined(shape)) {\r\n            throw new DeveloperError('options.shapePositions is required.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        this._positions = positions;\r\n        this._shape = shape;\r\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\r\n        this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\r\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        this._workerName = 'createPolylineVolumeOutlineGeometry';\r\n\r\n        var numComponents = 1 + positions.length * Cartesian3.packedLength;\r\n        numComponents += 1 + shape.length * Cartesian2.packedLength;\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = numComponents + Ellipsoid.packedLength + 2;\r\n    }\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {PolylineVolumeOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    PolylineVolumeOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(value)) {\r\n            throw new DeveloperError('value is required');\r\n        }\r\n        if (!defined(array)) {\r\n            throw new DeveloperError('array is required');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var positions = value._positions;\r\n        var length = positions.length;\r\n        array[startingIndex++] = length;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            Cartesian3.pack(positions[i], array, startingIndex);\r\n        }\r\n\r\n        var shape = value._shape;\r\n        length = shape.length;\r\n        array[startingIndex++] = length;\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\r\n            Cartesian2.pack(shape[i], array, startingIndex);\r\n        }\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        array[startingIndex++] = value._cornerType;\r\n        array[startingIndex]   = value._granularity;\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var scratchOptions = {\r\n        polylinePositions : undefined,\r\n        shapePositions : undefined,\r\n        ellipsoid : scratchEllipsoid,\r\n        height : undefined,\r\n        cornerType : undefined,\r\n        granularity : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {PolylineVolumeOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {PolylineVolumeOutlineGeometry} The modified result parameter or a new PolylineVolumeOutlineGeometry instance if one was not provided.\r\n     */\r\n    PolylineVolumeOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(array)) {\r\n            throw new DeveloperError('array is required');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var i;\r\n\r\n        var length = array[startingIndex++];\r\n        var positions = new Array(length);\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n            positions[i] = Cartesian3.unpack(array, startingIndex);\r\n        }\r\n\r\n        length = array[startingIndex++];\r\n        var shape = new Array(length);\r\n\r\n        for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\r\n            shape[i] = Cartesian2.unpack(array, startingIndex);\r\n        }\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var cornerType = array[startingIndex++];\r\n        var granularity = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.polylinePositions = positions;\r\n            scratchOptions.shapePositions = shape;\r\n            scratchOptions.cornerType = cornerType;\r\n            scratchOptions.granularity = granularity;\r\n            return new PolylineVolumeOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        result._positions = positions;\r\n        result._shape = shape;\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._cornerType = cornerType;\r\n        result._granularity = granularity;\r\n\r\n        return result;\r\n    };\r\n\r\n    var brScratch = new BoundingRectangle();\r\n\r\n    /**\r\n     * Computes the geometric representation of the outline of a polyline with a volume, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {PolylineVolumeOutlineGeometry} polylineVolumeOutlineGeometry A description of the polyline volume outline.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    PolylineVolumeOutlineGeometry.createGeometry = function(polylineVolumeOutlineGeometry) {\r\n        var positions = polylineVolumeOutlineGeometry._positions;\r\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\r\n        var shape2D = polylineVolumeOutlineGeometry._shape;\r\n        shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\r\n\r\n        if (cleanPositions.length < 2 || shape2D.length < 3) {\r\n            return undefined;\r\n        }\r\n\r\n        if (PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE) {\r\n            shape2D.reverse();\r\n        }\r\n        var boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\r\n\r\n        var computedPositions = PolylineVolumeGeometryLibrary.computePositions(cleanPositions, shape2D, boundingRectangle, polylineVolumeOutlineGeometry, false);\r\n        return computeAttributes(computedPositions, shape2D);\r\n    };\r\nexport default PolylineVolumeOutlineGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport PolylineVolumeOutlineGeometry from '../Core/PolylineVolumeOutlineGeometry.js';\r\n\r\n    function createPolylineVolumeOutlineGeometry(polylineVolumeOutlineGeometry, offset) {\r\n        if (defined(offset)) {\r\n            polylineVolumeOutlineGeometry = PolylineVolumeOutlineGeometry.unpack(polylineVolumeOutlineGeometry, offset);\r\n        }\r\n        polylineVolumeOutlineGeometry._ellipsoid = Ellipsoid.clone(polylineVolumeOutlineGeometry._ellipsoid);\r\n        return PolylineVolumeOutlineGeometry.createGeometry(polylineVolumeOutlineGeometry);\r\n    }\r\nexport default createPolylineVolumeOutlineGeometry;\r\n"],"names":["GeometryAttributes","GeometryAttribute","ComponentDatatype","IndexDatatype","Geometry","BoundingSphere","PrimitiveType","defaultValue","defined","DeveloperError","Ellipsoid","CornerType","CesiumMath","Cartesian3","Cartesian2","BoundingRectangle","arrayRemoveDuplicates","PolylineVolumeGeometryLibrary","PolygonPipeline","WindingOrder"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAqBI,SAAS,iBAAiB,CAAC,SAAS,EAAE,KAAK,EAAE;IACjD,QAAQ,IAAI,UAAU,GAAG,IAAIA,qCAAkB,EAAE,CAAC;IAClD,QAAQ,UAAU,CAAC,QAAQ,GAAG,IAAIC,mCAAiB,CAAC;IACpD,YAAY,iBAAiB,GAAGC,mCAAiB,CAAC,MAAM;IACxD,YAAY,sBAAsB,GAAG,CAAC;IACtC,YAAY,MAAM,GAAG,SAAS;IAC9B,SAAS,CAAC,CAAC;;IAEX,QAAQ,IAAI,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;IACvC,QAAQ,IAAI,WAAW,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;IAChE,QAAQ,IAAI,cAAc,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAClD,QAAQ,IAAI,UAAU,GAAG,cAAc,GAAG,WAAW,CAAC;IACtD,QAAQ,IAAI,OAAO,GAAGC,2BAAa,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC,GAAG,WAAW,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;IACtG,QAAQ,IAAI,CAAC,EAAE,CAAC,CAAC;IACjB,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC;IACtB,QAAQ,CAAC,GAAG,CAAC,CAAC;IACd,QAAQ,IAAI,MAAM,GAAG,CAAC,GAAG,WAAW,CAAC;IACrC,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;IAC9C,YAAY,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;IAC1C,YAAY,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC;IAC9C,SAAS;IACT,QAAQ,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,WAAW,GAAG,CAAC,GAAG,MAAM,CAAC;IACpD,QAAQ,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,MAAM,CAAC;;IAElC,QAAQ,CAAC,GAAG,UAAU,GAAG,CAAC,CAAC;IAC3B,QAAQ,MAAM,GAAG,CAAC,GAAG,WAAW,CAAC;IACjC,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;IAC9C,YAAY,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;IAC1C,YAAY,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC;IAC9C,SAAS;IACT,QAAQ,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,WAAW,GAAG,CAAC,GAAG,MAAM,CAAC;IACpD,QAAQ,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,MAAM,CAAC;;IAElC,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;IAC7C,YAAY,IAAI,WAAW,GAAG,WAAW,GAAG,CAAC,CAAC;IAC9C,YAAY,IAAI,YAAY,GAAG,WAAW,GAAG,WAAW,CAAC;IACzD,YAAY,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;IAC9C,gBAAgB,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC;IACnD,gBAAgB,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC;IACpD,aAAa;IACb,SAAS;;IAET,QAAQ,IAAI,QAAQ,GAAG,IAAIC,0BAAQ,CAAC;IACpC,YAAY,UAAU,GAAG,UAAU;IACnC,YAAY,OAAO,GAAGD,2BAAa,CAAC,gBAAgB,CAAC,WAAW,EAAE,OAAO,CAAC;IAC1E,YAAY,cAAc,GAAGE,yBAAc,CAAC,YAAY,CAAC,SAAS,CAAC;IACnE,YAAY,aAAa,GAAGC,+BAAa,CAAC,KAAK;IAC/C,SAAS,CAAC,CAAC;;IAEX,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;;IAEL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,6BAA6B,CAAC,OAAO,EAAE;IACpD,QAAQ,OAAO,GAAGC,yBAAY,CAAC,OAAO,EAAEA,yBAAY,CAAC,YAAY,CAAC,CAAC;IACnE,QAAQ,IAAI,SAAS,GAAG,OAAO,CAAC,iBAAiB,CAAC;IAClD,QAAQ,IAAI,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC;;IAE3C;IACA,QAAQ,IAAI,CAACC,eAAO,CAAC,SAAS,CAAC,EAAE;IACjC,YAAY,MAAM,IAAIC,oBAAc,CAAC,wCAAwC,CAAC,CAAC;IAC/E,SAAS;IACT,QAAQ,IAAI,CAACD,eAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,MAAM,IAAIC,oBAAc,CAAC,qCAAqC,CAAC,CAAC;IAC5E,SAAS;IACT;;IAEA,QAAQ,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IACpC,QAAQ,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IAC5B,QAAQ,IAAI,CAAC,UAAU,GAAGC,oBAAS,CAAC,KAAK,CAACH,yBAAY,CAAC,OAAO,CAAC,SAAS,EAAEG,oBAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAC5F,QAAQ,IAAI,CAAC,WAAW,GAAGH,yBAAY,CAAC,OAAO,CAAC,UAAU,EAAEI,wCAAU,CAAC,OAAO,CAAC,CAAC;IAChF,QAAQ,IAAI,CAAC,YAAY,GAAGJ,yBAAY,CAAC,OAAO,CAAC,WAAW,EAAEK,gBAAU,CAAC,kBAAkB,CAAC,CAAC;IAC7F,QAAQ,IAAI,CAAC,WAAW,GAAG,qCAAqC,CAAC;;IAEjE,QAAQ,IAAI,aAAa,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,GAAGC,qBAAU,CAAC,YAAY,CAAC;IAC3E,QAAQ,aAAa,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAGC,qBAAU,CAAC,YAAY,CAAC;;IAEpE;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,YAAY,GAAG,aAAa,GAAGJ,oBAAS,CAAC,YAAY,GAAG,CAAC,CAAC;IACvE,KAAK;;IAEL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,6BAA6B,CAAC,IAAI,GAAG,SAAS,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE;IAC/E;IACA,QAAQ,IAAI,CAACF,eAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,MAAM,IAAIC,oBAAc,CAAC,mBAAmB,CAAC,CAAC;IAC1D,SAAS;IACT,QAAQ,IAAI,CAACD,eAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,MAAM,IAAIC,oBAAc,CAAC,mBAAmB,CAAC,CAAC;IAC1D,SAAS;IACT;;IAEA,QAAQ,aAAa,GAAGF,yBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;;IAEvD,QAAQ,IAAI,CAAC,CAAC;;IAEd,QAAQ,IAAI,SAAS,GAAG,KAAK,CAAC,UAAU,CAAC;IACzC,QAAQ,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;IACtC,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,MAAM,CAAC;;IAExC,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE,aAAa,IAAIM,qBAAU,CAAC,YAAY,EAAE;IAC/E,YAAYA,qBAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IAChE,SAAS;;IAET,QAAQ,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC;IACjC,QAAQ,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IAC9B,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,MAAM,CAAC;;IAExC,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE,aAAa,IAAIC,qBAAU,CAAC,YAAY,EAAE;IAC/E,YAAYA,qBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IAC5D,SAAS;;IAET,QAAQJ,oBAAS,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IAC/D,QAAQ,aAAa,IAAIA,oBAAS,CAAC,YAAY,CAAC;;IAEhD,QAAQ,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC;IACnD,QAAQ,KAAK,CAAC,aAAa,CAAC,KAAK,KAAK,CAAC,YAAY,CAAC;;IAEpD,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK,CAAC;;IAEN,IAAI,IAAI,gBAAgB,GAAGA,oBAAS,CAAC,KAAK,CAACA,oBAAS,CAAC,WAAW,CAAC,CAAC;IAClE,IAAI,IAAI,cAAc,GAAG;IACzB,QAAQ,iBAAiB,GAAG,SAAS;IACrC,QAAQ,cAAc,GAAG,SAAS;IAClC,QAAQ,SAAS,GAAG,gBAAgB;IACpC,QAAQ,MAAM,GAAG,SAAS;IAC1B,QAAQ,UAAU,GAAG,SAAS;IAC9B,QAAQ,WAAW,GAAG,SAAS;IAC/B,KAAK,CAAC;;IAEN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,6BAA6B,CAAC,MAAM,GAAG,SAAS,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE;IAClF;IACA,QAAQ,IAAI,CAACF,eAAO,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,MAAM,IAAIC,oBAAc,CAAC,mBAAmB,CAAC,CAAC;IAC1D,SAAS;IACT;;IAEA,QAAQ,aAAa,GAAGF,yBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;;IAEvD,QAAQ,IAAI,CAAC,CAAC;;IAEd,QAAQ,IAAI,MAAM,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAC5C,QAAQ,IAAI,SAAS,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;;IAE1C,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE,aAAa,IAAIM,qBAAU,CAAC,YAAY,EAAE;IAC/E,YAAY,SAAS,CAAC,CAAC,CAAC,GAAGA,qBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;IACnE,SAAS;;IAET,QAAQ,MAAM,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IACxC,QAAQ,IAAI,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;;IAEtC,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE,aAAa,IAAIC,qBAAU,CAAC,YAAY,EAAE;IAC/E,YAAY,KAAK,CAAC,CAAC,CAAC,GAAGA,qBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;IAC/D,SAAS;;IAET,QAAQ,IAAI,SAAS,GAAGJ,oBAAS,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;IACjF,QAAQ,aAAa,IAAIA,oBAAS,CAAC,YAAY,CAAC;;IAEhD,QAAQ,IAAI,UAAU,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAChD,QAAQ,IAAI,WAAW,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC;;IAE/C,QAAQ,IAAI,CAACF,eAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,cAAc,CAAC,iBAAiB,GAAG,SAAS,CAAC;IACzD,YAAY,cAAc,CAAC,cAAc,GAAG,KAAK,CAAC;IAClD,YAAY,cAAc,CAAC,UAAU,GAAG,UAAU,CAAC;IACnD,YAAY,cAAc,CAAC,WAAW,GAAG,WAAW,CAAC;IACrD,YAAY,OAAO,IAAI,6BAA6B,CAAC,cAAc,CAAC,CAAC;IACrE,SAAS;;IAET,QAAQ,MAAM,CAAC,UAAU,GAAG,SAAS,CAAC;IACtC,QAAQ,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC;IAC9B,QAAQ,MAAM,CAAC,UAAU,GAAGE,oBAAS,CAAC,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;IAC1E,QAAQ,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;IACxC,QAAQ,MAAM,CAAC,YAAY,GAAG,WAAW,CAAC;;IAE1C,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK,CAAC;;IAEN,IAAI,IAAI,SAAS,GAAG,IAAIK,mCAAiB,EAAE,CAAC;;IAE5C;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,6BAA6B,CAAC,cAAc,GAAG,SAAS,6BAA6B,EAAE;IAC3F,QAAQ,IAAI,SAAS,GAAG,6BAA6B,CAAC,UAAU,CAAC;IACjE,QAAQ,IAAI,cAAc,GAAGC,2CAAqB,CAAC,SAAS,EAAEH,qBAAU,CAAC,aAAa,CAAC,CAAC;IACxF,QAAQ,IAAI,OAAO,GAAG,6BAA6B,CAAC,MAAM,CAAC;IAC3D,QAAQ,OAAO,GAAGI,2DAA6B,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;;IAEnF,QAAQ,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;IAC7D,YAAY,OAAO,SAAS,CAAC;IAC7B,SAAS;;IAET,QAAQ,IAAIC,+BAAe,CAAC,qBAAqB,CAAC,OAAO,CAAC,KAAKC,4BAAY,CAAC,SAAS,EAAE;IACvF,YAAY,OAAO,CAAC,OAAO,EAAE,CAAC;IAC9B,SAAS;IACT,QAAQ,IAAI,iBAAiB,GAAGJ,mCAAiB,CAAC,UAAU,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;;IAEjF,QAAQ,IAAI,iBAAiB,GAAGE,2DAA6B,CAAC,gBAAgB,CAAC,cAAc,EAAE,OAAO,EAAE,iBAAiB,EAAE,6BAA6B,EAAE,KAAK,CAAC,CAAC;IACjK,QAAQ,OAAO,iBAAiB,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;IAC7D,KAAK,CAAC;;IChRF,SAAS,mCAAmC,CAAC,6BAA6B,EAAE,MAAM,EAAE;IACxF,QAAQ,IAAIT,eAAO,CAAC,MAAM,CAAC,EAAE;IAC7B,YAAY,6BAA6B,GAAG,6BAA6B,CAAC,MAAM,CAAC,6BAA6B,EAAE,MAAM,CAAC,CAAC;IACxH,SAAS;IACT,QAAQ,6BAA6B,CAAC,UAAU,GAAGE,oBAAS,CAAC,KAAK,CAAC,6BAA6B,CAAC,UAAU,CAAC,CAAC;IAC7G,QAAQ,OAAO,6BAA6B,CAAC,cAAc,CAAC,6BAA6B,CAAC,CAAC;IAC3F,KAAK;;;;;;;;"}