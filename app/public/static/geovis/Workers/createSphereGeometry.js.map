{"version":3,"file":"createSphereGeometry.js","sources":["../../../../Source/Core/SphereGeometry.js","../../../../Source/WorkersES6/createSphereGeometry.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport EllipsoidGeometry from './EllipsoidGeometry.js';\r\nimport VertexFormat from './VertexFormat.js';\r\n\r\n    /**\r\n     * A description of a sphere centered at the origin.\r\n     *\r\n     * @alias SphereGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Number} [options.radius=1.0] The radius of the sphere.\r\n     * @param {Number} [options.stackPartitions=64] The number of times to partition the ellipsoid into stacks.\r\n     * @param {Number} [options.slicePartitions=64] The number of times to partition the ellipsoid into radial slices.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     *\r\n     * @exception {DeveloperError} options.slicePartitions cannot be less than three.\r\n     * @exception {DeveloperError} options.stackPartitions cannot be less than three.\r\n     *\r\n     * @see SphereGeometry#createGeometry\r\n     *\r\n     * @example\r\n     * var sphere = new Cesium.SphereGeometry({\r\n     *   radius : 100.0,\r\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\r\n     * });\r\n     * var geometry = Cesium.SphereGeometry.createGeometry(sphere);\r\n     */\r\n    function SphereGeometry(options) {\r\n        var radius = defaultValue(options.radius, 1.0);\r\n        var radii = new Cartesian3(radius, radius, radius);\r\n        var ellipsoidOptions = {\r\n                radii: radii,\r\n                stackPartitions: options.stackPartitions,\r\n                slicePartitions: options.slicePartitions,\r\n                vertexFormat: options.vertexFormat\r\n        };\r\n\r\n        this._ellipsoidGeometry = new EllipsoidGeometry(ellipsoidOptions);\r\n        this._workerName = 'createSphereGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    SphereGeometry.packedLength = EllipsoidGeometry.packedLength;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {SphereGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    SphereGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        //>>includeEnd('debug');\r\n\r\n        return EllipsoidGeometry.pack(value._ellipsoidGeometry, array, startingIndex);\r\n    };\r\n\r\n    var scratchEllipsoidGeometry = new EllipsoidGeometry();\r\n    var scratchOptions = {\r\n        radius : undefined,\r\n        radii : new Cartesian3(),\r\n        vertexFormat : new VertexFormat(),\r\n        stackPartitions : undefined,\r\n        slicePartitions : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {SphereGeometry} [result] The object into which to store the result.\r\n     * @returns {SphereGeometry} The modified result parameter or a new SphereGeometry instance if one was not provided.\r\n     */\r\n    SphereGeometry.unpack = function(array, startingIndex, result) {\r\n        var ellipsoidGeometry = EllipsoidGeometry.unpack(array, startingIndex, scratchEllipsoidGeometry);\r\n        scratchOptions.vertexFormat = VertexFormat.clone(ellipsoidGeometry._vertexFormat, scratchOptions.vertexFormat);\r\n        scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\r\n        scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.radius = ellipsoidGeometry._radii.x;\r\n            return new SphereGeometry(scratchOptions);\r\n        }\r\n\r\n        Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\r\n        result._ellipsoidGeometry = new EllipsoidGeometry(scratchOptions);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a sphere, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {SphereGeometry} sphereGeometry A description of the sphere.\r\n     * @returns {Geometry} The computed vertices and indices.\r\n     */\r\n    SphereGeometry.createGeometry = function(sphereGeometry) {\r\n        return EllipsoidGeometry.createGeometry(sphereGeometry._ellipsoidGeometry);\r\n    };\r\nexport default SphereGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport SphereGeometry from '../Core/SphereGeometry.js';\r\n\r\n    function createSphereGeometry(sphereGeometry, offset) {\r\n        if (defined(offset)) {\r\n            sphereGeometry = SphereGeometry.unpack(sphereGeometry, offset);\r\n        }\r\n        return SphereGeometry.createGeometry(sphereGeometry);\r\n    }\r\nexport default createSphereGeometry;\r\n"],"names":["defaultValue","Cartesian3","EllipsoidGeometry","Check","VertexFormat","defined"],"mappings":"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"}