{"version":3,"file":"PolylinePipeline-c6e47c75.js","sources":["../../../../Source/Core/PolylinePipeline.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport EllipsoidGeodesic from './EllipsoidGeodesic.js';\r\nimport EllipsoidRhumbLine from './EllipsoidRhumbLine.js';\r\nimport IntersectionTests from './IntersectionTests.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix4 from './Matrix4.js';\r\nimport Plane from './Plane.js';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    var PolylinePipeline = {};\r\n\r\n    PolylinePipeline.numberOfPoints = function(p0, p1, minDistance) {\r\n        var distance = Cartesian3.distance(p0, p1);\r\n        return Math.ceil(distance / minDistance);\r\n    };\r\n\r\n    PolylinePipeline.numberOfPointsRhumbLine = function(p0, p1, granularity) {\r\n        var radiansDistanceSquared = Math.pow((p0.longitude - p1.longitude), 2) + Math.pow((p0.latitude - p1.latitude), 2);\r\n        return Math.ceil(Math.sqrt(radiansDistanceSquared / (granularity * granularity)));\r\n    };\r\n\r\n    var cartoScratch = new Cartographic();\r\n    PolylinePipeline.extractHeights = function(positions, ellipsoid) {\r\n        var length = positions.length;\r\n        var heights = new Array(length);\r\n        for (var i = 0; i < length; i++) {\r\n            var p = positions[i];\r\n            heights[i] = ellipsoid.cartesianToCartographic(p, cartoScratch).height;\r\n        }\r\n        return heights;\r\n    };\r\n\r\n    var wrapLongitudeInversMatrix = new Matrix4();\r\n    var wrapLongitudeOrigin = new Cartesian3();\r\n    var wrapLongitudeXZNormal = new Cartesian3();\r\n    var wrapLongitudeXZPlane = new Plane(Cartesian3.UNIT_X, 0.0);\r\n    var wrapLongitudeYZNormal = new Cartesian3();\r\n    var wrapLongitudeYZPlane = new Plane(Cartesian3.UNIT_X, 0.0);\r\n    var wrapLongitudeIntersection = new Cartesian3();\r\n    var wrapLongitudeOffset = new Cartesian3();\r\n\r\n    var subdivideHeightsScratchArray = [];\r\n\r\n    function subdivideHeights(numPoints, h0, h1) {\r\n        var heights = subdivideHeightsScratchArray;\r\n        heights.length = numPoints;\r\n\r\n        var i;\r\n        if (h0 === h1) {\r\n            for (i = 0; i < numPoints; i++) {\r\n                heights[i] = h0;\r\n            }\r\n            return heights;\r\n        }\r\n\r\n        var dHeight = h1 - h0;\r\n        var heightPerVertex = dHeight / numPoints;\r\n\r\n        for (i = 0; i < numPoints; i++) {\r\n            var h = h0 + i*heightPerVertex;\r\n            heights[i] = h;\r\n        }\r\n\r\n        return heights;\r\n    }\r\n\r\n    var carto1 = new Cartographic();\r\n    var carto2 = new Cartographic();\r\n    var cartesian = new Cartesian3();\r\n    var scaleFirst = new Cartesian3();\r\n    var scaleLast = new Cartesian3();\r\n    var ellipsoidGeodesic = new EllipsoidGeodesic();\r\n    var ellipsoidRhumb = new EllipsoidRhumbLine();\r\n\r\n    //Returns subdivided line scaled to ellipsoid surface starting at p1 and ending at p2.\r\n    //Result includes p1, but not include p2.  This function is called for a sequence of line segments,\r\n    //and this prevents duplication of end point.\r\n    function generateCartesianArc(p0, p1, minDistance, ellipsoid, h0, h1, array, offset) {\r\n        var first = ellipsoid.scaleToGeodeticSurface(p0, scaleFirst);\r\n        var last = ellipsoid.scaleToGeodeticSurface(p1, scaleLast);\r\n        var numPoints = PolylinePipeline.numberOfPoints(p0, p1, minDistance);\r\n        var start = ellipsoid.cartesianToCartographic(first, carto1);\r\n        var end = ellipsoid.cartesianToCartographic(last, carto2);\r\n        var heights = subdivideHeights(numPoints, h0, h1);\r\n\r\n        ellipsoidGeodesic.setEndPoints(start, end);\r\n        var surfaceDistanceBetweenPoints = ellipsoidGeodesic.surfaceDistance / numPoints;\r\n\r\n        var index = offset;\r\n        start.height = h0;\r\n        var cart = ellipsoid.cartographicToCartesian(start, cartesian);\r\n        Cartesian3.pack(cart, array, index);\r\n        index += 3;\r\n\r\n        for (var i = 1; i < numPoints; i++) {\r\n            var carto = ellipsoidGeodesic.interpolateUsingSurfaceDistance(i * surfaceDistanceBetweenPoints, carto2);\r\n            carto.height = heights[i];\r\n            cart = ellipsoid.cartographicToCartesian(carto, cartesian);\r\n            Cartesian3.pack(cart, array, index);\r\n            index += 3;\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    //Returns subdivided line scaled to ellipsoid surface starting at p1 and ending at p2.\r\n    //Result includes p1, but not include p2.  This function is called for a sequence of line segments,\r\n    //and this prevents duplication of end point.\r\n    function generateCartesianRhumbArc(p0, p1, granularity, ellipsoid, h0, h1, array, offset) {\r\n        var first = ellipsoid.scaleToGeodeticSurface(p0, scaleFirst);\r\n        var last = ellipsoid.scaleToGeodeticSurface(p1, scaleLast);\r\n        var start = ellipsoid.cartesianToCartographic(first, carto1);\r\n        var end = ellipsoid.cartesianToCartographic(last, carto2);\r\n\r\n        var numPoints = PolylinePipeline.numberOfPointsRhumbLine(start, end, granularity);\r\n        var heights = subdivideHeights(numPoints, h0, h1);\r\n\r\n        if (!ellipsoidRhumb.ellipsoid.equals(ellipsoid)) {\r\n            ellipsoidRhumb = new EllipsoidRhumbLine(undefined, undefined, ellipsoid);\r\n        }\r\n        ellipsoidRhumb.setEndPoints(start, end);\r\n        var surfaceDistanceBetweenPoints = ellipsoidRhumb.surfaceDistance / numPoints;\r\n\r\n        var index = offset;\r\n        start.height = h0;\r\n        var cart = ellipsoid.cartographicToCartesian(start, cartesian);\r\n        Cartesian3.pack(cart, array, index);\r\n        index += 3;\r\n\r\n        for (var i = 1; i < numPoints; i++) {\r\n            var carto = ellipsoidRhumb.interpolateUsingSurfaceDistance(i * surfaceDistanceBetweenPoints, carto2);\r\n            carto.height = heights[i];\r\n            cart = ellipsoid.cartographicToCartesian(carto, cartesian);\r\n            Cartesian3.pack(cart, array, index);\r\n            index += 3;\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Breaks a {@link Polyline} into segments such that it does not cross the &plusmn;180 degree meridian of an ellipsoid.\r\n     *\r\n     * @param {Cartesian3[]} positions The polyline's Cartesian positions.\r\n     * @param {Matrix4} [modelMatrix=Matrix4.IDENTITY] The polyline's model matrix. Assumed to be an affine\r\n     * transformation matrix, where the upper left 3x3 elements are a rotation matrix, and\r\n     * the upper three elements in the fourth column are the translation.  The bottom row is assumed to be [0, 0, 0, 1].\r\n     * The matrix is not verified to be in the proper form.\r\n     * @returns {Object} An object with a <code>positions</code> property that is an array of positions and a\r\n     * <code>segments</code> property.\r\n     *\r\n     *\r\n     * @example\r\n     * var polylines = new Cesium.PolylineCollection();\r\n     * var polyline = polylines.add(...);\r\n     * var positions = polyline.positions;\r\n     * var modelMatrix = polylines.modelMatrix;\r\n     * var segments = Cesium.PolylinePipeline.wrapLongitude(positions, modelMatrix);\r\n     *\r\n     * @see PolygonPipeline.wrapLongitude\r\n     * @see Polyline\r\n     * @see PolylineCollection\r\n     */\r\n    PolylinePipeline.wrapLongitude = function(positions, modelMatrix) {\r\n        var cartesians = [];\r\n        var segments = [];\r\n\r\n        if (defined(positions) && positions.length > 0) {\r\n            modelMatrix = defaultValue(modelMatrix, Matrix4.IDENTITY);\r\n            var inverseModelMatrix = Matrix4.inverseTransformation(modelMatrix, wrapLongitudeInversMatrix);\r\n\r\n            var origin = Matrix4.multiplyByPoint(inverseModelMatrix, Cartesian3.ZERO, wrapLongitudeOrigin);\r\n            var xzNormal = Cartesian3.normalize(Matrix4.multiplyByPointAsVector(inverseModelMatrix, Cartesian3.UNIT_Y, wrapLongitudeXZNormal), wrapLongitudeXZNormal);\r\n            var xzPlane = Plane.fromPointNormal(origin, xzNormal, wrapLongitudeXZPlane);\r\n            var yzNormal = Cartesian3.normalize(Matrix4.multiplyByPointAsVector(inverseModelMatrix, Cartesian3.UNIT_X, wrapLongitudeYZNormal), wrapLongitudeYZNormal);\r\n            var yzPlane = Plane.fromPointNormal(origin, yzNormal, wrapLongitudeYZPlane);\r\n\r\n            var count = 1;\r\n            cartesians.push(Cartesian3.clone(positions[0]));\r\n            var prev = cartesians[0];\r\n\r\n            var length = positions.length;\r\n            for (var i = 1; i < length; ++i) {\r\n                var cur = positions[i];\r\n\r\n                // intersects the IDL if either endpoint is on the negative side of the yz-plane\r\n                if (Plane.getPointDistance(yzPlane, prev) < 0.0 || Plane.getPointDistance(yzPlane, cur) < 0.0) {\r\n                    // and intersects the xz-plane\r\n                    var intersection = IntersectionTests.lineSegmentPlane(prev, cur, xzPlane, wrapLongitudeIntersection);\r\n                    if (defined(intersection)) {\r\n                        // move point on the xz-plane slightly away from the plane\r\n                        var offset = Cartesian3.multiplyByScalar(xzNormal, 5.0e-9, wrapLongitudeOffset);\r\n                        if (Plane.getPointDistance(xzPlane, prev) < 0.0) {\r\n                            Cartesian3.negate(offset, offset);\r\n                        }\r\n\r\n                        cartesians.push(Cartesian3.add(intersection, offset, new Cartesian3()));\r\n                        segments.push(count + 1);\r\n\r\n                        Cartesian3.negate(offset, offset);\r\n                        cartesians.push(Cartesian3.add(intersection, offset, new Cartesian3()));\r\n                        count = 1;\r\n                    }\r\n                }\r\n\r\n                cartesians.push(Cartesian3.clone(positions[i]));\r\n                count++;\r\n\r\n                prev = cur;\r\n            }\r\n\r\n            segments.push(count);\r\n        }\r\n\r\n        return {\r\n            positions : cartesians,\r\n            lengths : segments\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Subdivides polyline and raises all points to the specified height.  Returns an array of numbers to represent the positions.\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\r\n     * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\r\n     * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\r\n     * @returns {Number[]} A new array of positions of type {Number} that have been subdivided and raised to the surface of the ellipsoid.\r\n     *\r\n     * @example\r\n     * var positions = Cesium.Cartesian3.fromDegreesArray([\r\n     *   -105.0, 40.0,\r\n     *   -100.0, 38.0,\r\n     *   -105.0, 35.0,\r\n     *   -100.0, 32.0\r\n     * ]);\r\n     * var surfacePositions = Cesium.PolylinePipeline.generateArc({\r\n     *   positons: positions\r\n     * });\r\n     */\r\n    PolylinePipeline.generateArc = function(options) {\r\n        if (!defined(options)) {\r\n            options = {};\r\n        }\r\n        var positions = options.positions;\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(positions)) {\r\n            throw new DeveloperError('options.positions is required.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var length = positions.length;\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        var height = defaultValue(options.height, 0);\r\n        var hasHeightArray = Array.isArray(height);\r\n\r\n        if (length < 1) {\r\n            return [];\r\n        } else if (length === 1) {\r\n            var p = ellipsoid.scaleToGeodeticSurface(positions[0], scaleFirst);\r\n            height = hasHeightArray ? height[0] : height;\r\n            if (height !== 0) {\r\n                var n = ellipsoid.geodeticSurfaceNormal(p, cartesian);\r\n                Cartesian3.multiplyByScalar(n, height, n);\r\n                Cartesian3.add(p, n, p);\r\n            }\r\n\r\n            return [p.x, p.y, p.z];\r\n        }\r\n\r\n        var minDistance = options.minDistance;\r\n        if (!defined(minDistance)) {\r\n            var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n            minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n        }\r\n\r\n        var numPoints = 0;\r\n        var i;\r\n\r\n        for (i = 0; i < length -1; i++) {\r\n            numPoints += PolylinePipeline.numberOfPoints(positions[i], positions[i+1], minDistance);\r\n        }\r\n\r\n        var arrayLength = (numPoints + 1) * 3;\r\n        var newPositions = new Array(arrayLength);\r\n        var offset = 0;\r\n\r\n        for (i = 0; i < length - 1; i++) {\r\n            var p0 = positions[i];\r\n            var p1 = positions[i + 1];\r\n\r\n            var h0 = hasHeightArray ? height[i] : height;\r\n            var h1 = hasHeightArray ? height[i + 1] : height;\r\n\r\n            offset = generateCartesianArc(p0, p1, minDistance, ellipsoid, h0, h1, newPositions, offset);\r\n        }\r\n\r\n        subdivideHeightsScratchArray.length = 0;\r\n\r\n        var lastPoint = positions[length - 1];\r\n        var carto = ellipsoid.cartesianToCartographic(lastPoint, carto1);\r\n        carto.height = hasHeightArray ? height[length - 1] : height;\r\n        var cart = ellipsoid.cartographicToCartesian(carto, cartesian);\r\n        Cartesian3.pack(cart, newPositions, arrayLength - 3);\r\n\r\n        return newPositions;\r\n    };\r\n\r\n    var scratchCartographic0 = new Cartographic();\r\n    var scratchCartographic1 = new Cartographic();\r\n\r\n    /**\r\n     * Subdivides polyline and raises all points to the specified height using Rhumb lines.  Returns an array of numbers to represent the positions.\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\r\n     * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\r\n     * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\r\n     * @returns {Number[]} A new array of positions of type {Number} that have been subdivided and raised to the surface of the ellipsoid.\r\n     *\r\n     * @example\r\n     * var positions = Cesium.Cartesian3.fromDegreesArray([\r\n     *   -105.0, 40.0,\r\n     *   -100.0, 38.0,\r\n     *   -105.0, 35.0,\r\n     *   -100.0, 32.0\r\n     * ]);\r\n     * var surfacePositions = Cesium.PolylinePipeline.generateRhumbArc({\r\n     *   positons: positions\r\n     * });\r\n     */\r\n    PolylinePipeline.generateRhumbArc = function(options) {\r\n        if (!defined(options)) {\r\n            options = {};\r\n        }\r\n        var positions = options.positions;\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(positions)) {\r\n            throw new DeveloperError('options.positions is required.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var length = positions.length;\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        var height = defaultValue(options.height, 0);\r\n        var hasHeightArray = Array.isArray(height);\r\n\r\n        if (length < 1) {\r\n            return [];\r\n        } else if (length === 1) {\r\n            var p = ellipsoid.scaleToGeodeticSurface(positions[0], scaleFirst);\r\n            height = hasHeightArray ? height[0] : height;\r\n            if (height !== 0) {\r\n                var n = ellipsoid.geodeticSurfaceNormal(p, cartesian);\r\n                Cartesian3.multiplyByScalar(n, height, n);\r\n                Cartesian3.add(p, n, p);\r\n            }\r\n\r\n            return [p.x, p.y, p.z];\r\n        }\r\n\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n\r\n        var numPoints = 0;\r\n        var i;\r\n\r\n        var c0 = ellipsoid.cartesianToCartographic(positions[0], scratchCartographic0);\r\n        var c1;\r\n        for (i = 0; i < length - 1; i++) {\r\n            c1 = ellipsoid.cartesianToCartographic(positions[i + 1], scratchCartographic1);\r\n            numPoints += PolylinePipeline.numberOfPointsRhumbLine(c0, c1, granularity);\r\n            c0 = Cartographic.clone(c1, scratchCartographic0);\r\n        }\r\n\r\n        var arrayLength = (numPoints + 1) * 3;\r\n        var newPositions = new Array(arrayLength);\r\n        var offset = 0;\r\n\r\n        for (i = 0; i < length - 1; i++) {\r\n            var p0 = positions[i];\r\n            var p1 = positions[i + 1];\r\n\r\n            var h0 = hasHeightArray ? height[i] : height;\r\n            var h1 = hasHeightArray ? height[i + 1] : height;\r\n\r\n            offset = generateCartesianRhumbArc(p0, p1, granularity, ellipsoid, h0, h1, newPositions, offset);\r\n        }\r\n\r\n        subdivideHeightsScratchArray.length = 0;\r\n\r\n        var lastPoint = positions[length - 1];\r\n        var carto = ellipsoid.cartesianToCartographic(lastPoint, carto1);\r\n        carto.height = hasHeightArray ? height[length - 1] : height;\r\n        var cart = ellipsoid.cartographicToCartesian(carto, cartesian);\r\n        Cartesian3.pack(cart, newPositions, arrayLength - 3);\r\n\r\n        return newPositions;\r\n    };\r\n\r\n    /**\r\n     * Subdivides polyline and raises all points to the specified height. Returns an array of new {Cartesian3} positions.\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\r\n     * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\r\n     * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\r\n     * @returns {Cartesian3[]} A new array of cartesian3 positions that have been subdivided and raised to the surface of the ellipsoid.\r\n     *\r\n     * @example\r\n     * var positions = Cesium.Cartesian3.fromDegreesArray([\r\n     *   -105.0, 40.0,\r\n     *   -100.0, 38.0,\r\n     *   -105.0, 35.0,\r\n     *   -100.0, 32.0\r\n     * ]);\r\n     * var surfacePositions = Cesium.PolylinePipeline.generateCartesianArc({\r\n     *   positons: positions\r\n     * });\r\n     */\r\n    PolylinePipeline.generateCartesianArc = function(options) {\r\n        var numberArray = PolylinePipeline.generateArc(options);\r\n        var size = numberArray.length/3;\r\n        var newPositions = new Array(size);\r\n        for (var i = 0; i < size; i++) {\r\n            newPositions[i] = Cartesian3.unpack(numberArray, i*3);\r\n        }\r\n        return newPositions;\r\n    };\r\n\r\n    /**\r\n     * Subdivides polyline and raises all points to the specified height using Rhumb Lines. Returns an array of new {Cartesian3} positions.\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\r\n     * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\r\n     * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\r\n     * @returns {Cartesian3[]} A new array of cartesian3 positions that have been subdivided and raised to the surface of the ellipsoid.\r\n     *\r\n     * @example\r\n     * var positions = Cesium.Cartesian3.fromDegreesArray([\r\n     *   -105.0, 40.0,\r\n     *   -100.0, 38.0,\r\n     *   -105.0, 35.0,\r\n     *   -100.0, 32.0\r\n     * ]);\r\n     * var surfacePositions = Cesium.PolylinePipeline.generateCartesianRhumbArc({\r\n     *   positons: positions\r\n     * });\r\n     */\r\n    PolylinePipeline.generateCartesianRhumbArc = function(options) {\r\n        var numberArray = PolylinePipeline.generateRhumbArc(options);\r\n        var size = numberArray.length/3;\r\n        var newPositions = new Array(size);\r\n        for (var i = 0; i < size; i++) {\r\n            newPositions[i] = Cartesian3.unpack(numberArray, i*3);\r\n        }\r\n        return newPositions;\r\n    };\r\nexport default PolylinePipeline;\r\n"],"names":["Cartesian3","Cartographic","Matrix4","Plane","EllipsoidGeodesic","EllipsoidRhumbLine","defined","defaultValue","IntersectionTests","DeveloperError","Ellipsoid","CesiumMath"],"mappings":"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"}