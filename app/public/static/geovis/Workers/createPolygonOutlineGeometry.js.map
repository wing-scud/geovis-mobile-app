{"version":3,"file":"createPolygonOutlineGeometry.js","sources":["../../../../Source/Core/PolygonOutlineGeometry.js","../../../../Source/WorkersES6/createPolygonOutlineGeometry.js"],"sourcesContent":["import ArcType from './ArcType.js';\r\nimport arrayFill from './arrayFill.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Check from './Check.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport EllipsoidTangentPlane from './EllipsoidTangentPlane.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryInstance from './GeometryInstance.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport GeometryPipeline from './GeometryPipeline.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport PolygonGeometryLibrary from './PolygonGeometryLibrary.js';\r\nimport PolygonPipeline from './PolygonPipeline.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport WindingOrder from './WindingOrder.js';\r\n    var createGeometryFromPositionsPositions = [];\r\n    var createGeometryFromPositionsSubdivided = [];\r\n\r\n    function createGeometryFromPositions(ellipsoid, positions, minDistance, perPositionHeight, arcType) {\r\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(positions, ellipsoid);\r\n        var positions2D = tangentPlane.projectPointsOntoPlane(positions, createGeometryFromPositionsPositions);\r\n\r\n        var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\r\n        if (originalWindingOrder === WindingOrder.CLOCKWISE) {\r\n            positions2D.reverse();\r\n            positions = positions.slice().reverse();\r\n        }\r\n\r\n        var subdividedPositions;\r\n        var i;\r\n\r\n        var length = positions.length;\r\n        var index = 0;\r\n\r\n        if (!perPositionHeight) {\r\n            var numVertices = 0;\r\n            if (arcType === ArcType.GEODESIC) {\r\n                for (i = 0; i < length; i++) {\r\n                    numVertices += PolygonGeometryLibrary.subdivideLineCount(positions[i], positions[(i + 1) % length], minDistance);\r\n                }\r\n            } else if (arcType === ArcType.RHUMB) {\r\n                for (i = 0; i < length; i++) {\r\n                    numVertices += PolygonGeometryLibrary.subdivideRhumbLineCount(ellipsoid, positions[i], positions[(i + 1) % length], minDistance);\r\n                }\r\n            }\r\n            subdividedPositions = new Float64Array(numVertices * 3);\r\n            for (i = 0; i < length; i++) {\r\n                var tempPositions;\r\n                if (arcType === ArcType.GEODESIC) {\r\n                    tempPositions = PolygonGeometryLibrary.subdivideLine(positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\r\n                } else if (arcType === ArcType.RHUMB) {\r\n                    tempPositions = PolygonGeometryLibrary.subdivideRhumbLine(ellipsoid, positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\r\n                }\r\n                var tempPositionsLength = tempPositions.length;\r\n                for (var j = 0; j < tempPositionsLength; ++j) {\r\n                    subdividedPositions[index++] = tempPositions[j];\r\n                }\r\n            }\r\n        } else {\r\n            subdividedPositions = new Float64Array(length * 2 * 3);\r\n            for (i = 0; i < length; i++) {\r\n                var p0 = positions[i];\r\n                var p1 = positions[(i + 1) % length];\r\n                subdividedPositions[index++] = p0.x;\r\n                subdividedPositions[index++] = p0.y;\r\n                subdividedPositions[index++] = p0.z;\r\n                subdividedPositions[index++] = p1.x;\r\n                subdividedPositions[index++] = p1.y;\r\n                subdividedPositions[index++] = p1.z;\r\n            }\r\n        }\r\n\r\n        length = subdividedPositions.length / 3;\r\n        var indicesSize = length * 2;\r\n        var indices = IndexDatatype.createTypedArray(length, indicesSize);\r\n        index = 0;\r\n        for (i = 0; i < length - 1; i++) {\r\n            indices[index++] = i;\r\n            indices[index++] = i + 1;\r\n        }\r\n        indices[index++] = length - 1;\r\n        indices[index++] = 0;\r\n\r\n        return new GeometryInstance({\r\n            geometry : new Geometry({\r\n                attributes : new GeometryAttributes({\r\n                    position : new GeometryAttribute({\r\n                        componentDatatype : ComponentDatatype.DOUBLE,\r\n                        componentsPerAttribute : 3,\r\n                        values : subdividedPositions\r\n                    })\r\n                }),\r\n                indices : indices,\r\n                primitiveType : PrimitiveType.LINES\r\n            })\r\n        });\r\n    }\r\n\r\n    function createGeometryFromPositionsExtruded(ellipsoid, positions, minDistance, perPositionHeight, arcType) {\r\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(positions, ellipsoid);\r\n        var positions2D = tangentPlane.projectPointsOntoPlane(positions, createGeometryFromPositionsPositions);\r\n\r\n        var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\r\n        if (originalWindingOrder === WindingOrder.CLOCKWISE) {\r\n            positions2D.reverse();\r\n            positions = positions.slice().reverse();\r\n        }\r\n\r\n        var subdividedPositions;\r\n        var i;\r\n\r\n        var length = positions.length;\r\n        var corners = new Array(length);\r\n        var index = 0;\r\n\r\n        if (!perPositionHeight) {\r\n            var numVertices = 0;\r\n            if (arcType === ArcType.GEODESIC) {\r\n                for (i = 0; i < length; i++) {\r\n                    numVertices += PolygonGeometryLibrary.subdivideLineCount(positions[i], positions[(i + 1) % length], minDistance);\r\n                }\r\n            } else if (arcType === ArcType.RHUMB) {\r\n                for (i = 0; i < length; i++) {\r\n                    numVertices += PolygonGeometryLibrary.subdivideRhumbLineCount(ellipsoid, positions[i], positions[(i + 1) % length], minDistance);\r\n                }\r\n            }\r\n\r\n            subdividedPositions = new Float64Array(numVertices * 3 * 2);\r\n            for (i = 0; i < length; ++i) {\r\n                corners[i] = index / 3;\r\n                var tempPositions;\r\n                if (arcType === ArcType.GEODESIC) {\r\n                    tempPositions = PolygonGeometryLibrary.subdivideLine(positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\r\n                } else if (arcType === ArcType.RHUMB) {\r\n                    tempPositions = PolygonGeometryLibrary.subdivideRhumbLine(ellipsoid, positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\r\n                }\r\n                var tempPositionsLength = tempPositions.length;\r\n                for (var j = 0; j < tempPositionsLength; ++j) {\r\n                    subdividedPositions[index++] = tempPositions[j];\r\n                }\r\n            }\r\n        } else {\r\n            subdividedPositions = new Float64Array(length * 2 * 3 * 2);\r\n            for (i = 0; i < length; ++i) {\r\n                corners[i] = index / 3;\r\n                var p0 = positions[i];\r\n                var p1 = positions[(i + 1) % length];\r\n\r\n                subdividedPositions[index++] = p0.x;\r\n                subdividedPositions[index++] = p0.y;\r\n                subdividedPositions[index++] = p0.z;\r\n                subdividedPositions[index++] = p1.x;\r\n                subdividedPositions[index++] = p1.y;\r\n                subdividedPositions[index++] = p1.z;\r\n            }\r\n        }\r\n\r\n        length = subdividedPositions.length / (3 * 2);\r\n        var cornersLength = corners.length;\r\n\r\n        var indicesSize = ((length * 2) + cornersLength) * 2;\r\n        var indices = IndexDatatype.createTypedArray(length + cornersLength, indicesSize);\r\n\r\n        index = 0;\r\n        for (i = 0; i < length; ++i) {\r\n            indices[index++] = i;\r\n            indices[index++] = (i + 1) % length;\r\n            indices[index++] = i + length;\r\n            indices[index++] = ((i + 1) % length) + length;\r\n        }\r\n\r\n        for (i = 0; i < cornersLength; i++) {\r\n            var corner = corners[i];\r\n            indices[index++] = corner;\r\n            indices[index++] = corner + length;\r\n        }\r\n\r\n        return new GeometryInstance({\r\n            geometry : new Geometry({\r\n                attributes : new GeometryAttributes({\r\n                    position : new GeometryAttribute({\r\n                        componentDatatype : ComponentDatatype.DOUBLE,\r\n                        componentsPerAttribute : 3,\r\n                        values : subdividedPositions\r\n                    })\r\n                }),\r\n                indices : indices,\r\n                primitiveType : PrimitiveType.LINES\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * A description of the outline of a polygon on the ellipsoid. The polygon is defined by a polygon hierarchy.\r\n     *\r\n     * @alias PolygonOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\r\n     * @param {Number} [options.height=0.0] The distance in meters between the polygon and the ellipsoid surface.\r\n     * @param {Number} [options.extrudedHeight] The distance in meters between the polygon's extruded face and the ellipsoid surface.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\r\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of path the outline must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\r\n     *\r\n     * @see PolygonOutlineGeometry#createGeometry\r\n     * @see PolygonOutlineGeometry#fromPositions\r\n     *\r\n     * @example\r\n     * // 1. create a polygon outline from points\r\n     * var polygon = new Cesium.PolygonOutlineGeometry({\r\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n     *     Cesium.Cartesian3.fromDegreesArray([\r\n     *       -72.0, 40.0,\r\n     *       -70.0, 35.0,\r\n     *       -75.0, 30.0,\r\n     *       -70.0, 30.0,\r\n     *       -68.0, 40.0\r\n     *     ])\r\n     *   )\r\n     * });\r\n     * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygon);\r\n     *\r\n     * // 2. create a nested polygon with holes outline\r\n     * var polygonWithHole = new Cesium.PolygonOutlineGeometry({\r\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n     *     Cesium.Cartesian3.fromDegreesArray([\r\n     *       -109.0, 30.0,\r\n     *       -95.0, 30.0,\r\n     *       -95.0, 40.0,\r\n     *       -109.0, 40.0\r\n     *     ]),\r\n     *     [new Cesium.PolygonHierarchy(\r\n     *       Cesium.Cartesian3.fromDegreesArray([\r\n     *         -107.0, 31.0,\r\n     *         -107.0, 39.0,\r\n     *         -97.0, 39.0,\r\n     *         -97.0, 31.0\r\n     *       ]),\r\n     *       [new Cesium.PolygonHierarchy(\r\n     *         Cesium.Cartesian3.fromDegreesArray([\r\n     *           -105.0, 33.0,\r\n     *           -99.0, 33.0,\r\n     *           -99.0, 37.0,\r\n     *           -105.0, 37.0\r\n     *         ]),\r\n     *         [new Cesium.PolygonHierarchy(\r\n     *           Cesium.Cartesian3.fromDegreesArray([\r\n     *             -103.0, 34.0,\r\n     *             -101.0, 34.0,\r\n     *             -101.0, 36.0,\r\n     *             -103.0, 36.0\r\n     *           ])\r\n     *         )]\r\n     *       )]\r\n     *     )]\r\n     *   )\r\n     * });\r\n     * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygonWithHole);\r\n     *\r\n     * // 3. create extruded polygon outline\r\n     * var extrudedPolygon = new Cesium.PolygonOutlineGeometry({\r\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n     *     Cesium.Cartesian3.fromDegreesArray([\r\n     *       -72.0, 40.0,\r\n     *       -70.0, 35.0,\r\n     *       -75.0, 30.0,\r\n     *       -70.0, 30.0,\r\n     *       -68.0, 40.0\r\n     *     ])\r\n     *   ),\r\n     *   extrudedHeight: 300000\r\n     * });\r\n     * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(extrudedPolygon);\r\n     */\r\n    function PolygonOutlineGeometry(options) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('options', options);\r\n        Check.typeOf.object('options.polygonHierarchy', options.polygonHierarchy);\r\n\r\n        if (options.perPositionHeight && defined(options.height)) {\r\n            throw new DeveloperError('Cannot use both options.perPositionHeight and options.height');\r\n        }\r\n        if (defined(options.arcType) && options.arcType !== ArcType.GEODESIC && options.arcType !== ArcType.RHUMB) {\r\n            throw new DeveloperError('Invalid arcType. Valid options are ArcType.GEODESIC and ArcType.RHUMB.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var polygonHierarchy = options.polygonHierarchy;\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        var perPositionHeight = defaultValue(options.perPositionHeight, false);\r\n        var perPositionHeightExtrude = perPositionHeight && defined(options.extrudedHeight);\r\n        var arcType = defaultValue(options.arcType, ArcType.GEODESIC);\r\n\r\n        var height = defaultValue(options.height, 0.0);\r\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n        if (!perPositionHeightExtrude) {\r\n            var h = Math.max(height, extrudedHeight);\r\n            extrudedHeight = Math.min(height, extrudedHeight);\r\n            height = h;\r\n        }\r\n\r\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\r\n        this._granularity = granularity;\r\n        this._height = height;\r\n        this._extrudedHeight = extrudedHeight;\r\n        this._arcType = arcType;\r\n        this._polygonHierarchy = polygonHierarchy;\r\n        this._perPositionHeight = perPositionHeight;\r\n        this._perPositionHeightExtrude = perPositionHeightExtrude;\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._workerName = 'createPolygonOutlineGeometry';\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + Ellipsoid.packedLength + 8;\r\n    }\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {PolygonOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    PolygonOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        array[startingIndex++] = value._height;\r\n        array[startingIndex++] = value._extrudedHeight;\r\n        array[startingIndex++] = value._granularity;\r\n        array[startingIndex++] = value._perPositionHeightExtrude ? 1.0 : 0.0;\r\n        array[startingIndex++] = value._perPositionHeight ? 1.0 : 0.0;\r\n        array[startingIndex++] = value._arcType;\r\n        array[startingIndex++] = defaultValue(value._offsetAttribute, -1);\r\n        array[startingIndex] = value.packedLength;\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var dummyOptions = {\r\n        polygonHierarchy : {}\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {PolygonOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {PolygonOutlineGeometry} The modified result parameter or a new PolygonOutlineGeometry instance if one was not provided.\r\n     */\r\n    PolygonOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\r\n        startingIndex = polygonHierarchy.startingIndex;\r\n        delete polygonHierarchy.startingIndex;\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var height = array[startingIndex++];\r\n        var extrudedHeight = array[startingIndex++];\r\n        var granularity = array[startingIndex++];\r\n        var perPositionHeightExtrude = array[startingIndex++] === 1.0;\r\n        var perPositionHeight = array[startingIndex++] === 1.0;\r\n        var arcType = array[startingIndex++];\r\n        var offsetAttribute = array[startingIndex++];\r\n        var packedLength = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            result = new PolygonOutlineGeometry(dummyOptions);\r\n        }\r\n\r\n        result._polygonHierarchy = polygonHierarchy;\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._height = height;\r\n        result._extrudedHeight = extrudedHeight;\r\n        result._granularity = granularity;\r\n        result._perPositionHeight = perPositionHeight;\r\n        result._perPositionHeightExtrude = perPositionHeightExtrude;\r\n        result._arcType = arcType;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n        result.packedLength = packedLength;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * A description of a polygon outline from an array of positions.\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\r\n     * @param {Number} [options.height=0.0] The height of the polygon.\r\n     * @param {Number} [options.extrudedHeight] The height of the polygon extrusion.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\r\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of path the outline must follow. Valid options are {@link LinkType.GEODESIC} and {@link ArcType.RHUMB}.\r\n     * @returns {PolygonOutlineGeometry}\r\n     *\r\n     *\r\n     * @example\r\n     * // create a polygon from points\r\n     * var polygon = Cesium.PolygonOutlineGeometry.fromPositions({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n     *     -72.0, 40.0,\r\n     *     -70.0, 35.0,\r\n     *     -75.0, 30.0,\r\n     *     -70.0, 30.0,\r\n     *     -68.0, 40.0\r\n     *   ])\r\n     * });\r\n     * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygon);\r\n     *\r\n     * @see PolygonOutlineGeometry#createGeometry\r\n     */\r\n    PolygonOutlineGeometry.fromPositions = function(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('options.positions', options.positions);\r\n        //>>includeEnd('debug');\r\n\r\n        var newOptions = {\r\n            polygonHierarchy : {\r\n                positions : options.positions\r\n            },\r\n            height : options.height,\r\n            extrudedHeight : options.extrudedHeight,\r\n            ellipsoid : options.ellipsoid,\r\n            granularity : options.granularity,\r\n            perPositionHeight : options.perPositionHeight,\r\n            arcType: options.arcType,\r\n            offsetAttribute : options.offsetAttribute\r\n        };\r\n        return new PolygonOutlineGeometry(newOptions);\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a polygon outline, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {PolygonOutlineGeometry} polygonGeometry A description of the polygon outline.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    PolygonOutlineGeometry.createGeometry = function(polygonGeometry) {\r\n        var ellipsoid = polygonGeometry._ellipsoid;\r\n        var granularity = polygonGeometry._granularity;\r\n        var polygonHierarchy = polygonGeometry._polygonHierarchy;\r\n        var perPositionHeight = polygonGeometry._perPositionHeight;\r\n        var arcType = polygonGeometry._arcType;\r\n\r\n        var polygons = PolygonGeometryLibrary.polygonOutlinesFromHierarchy(polygonHierarchy, !perPositionHeight, ellipsoid);\r\n\r\n        if (polygons.length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        var geometryInstance;\r\n        var geometries = [];\r\n        var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n\r\n        var height = polygonGeometry._height;\r\n        var extrudedHeight = polygonGeometry._extrudedHeight;\r\n        var extrude = polygonGeometry._perPositionHeightExtrude || !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n        var offsetValue;\r\n        var i;\r\n        if (extrude) {\r\n            for (i = 0; i < polygons.length; i++) {\r\n                geometryInstance = createGeometryFromPositionsExtruded(ellipsoid, polygons[i], minDistance, perPositionHeight, arcType);\r\n                geometryInstance.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(geometryInstance.geometry, height, extrudedHeight, ellipsoid, perPositionHeight);\r\n                if (defined(polygonGeometry._offsetAttribute)) {\r\n                    var size = geometryInstance.geometry.attributes.position.values.length / 3;\r\n                    var offsetAttribute = new Uint8Array(size);\r\n                    if (polygonGeometry._offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n                        offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n                    } else {\r\n                        offsetValue = polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                        offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n                    }\r\n\r\n                    geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute({\r\n                        componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                        componentsPerAttribute : 1,\r\n                        values : offsetAttribute\r\n                    });\r\n                }\r\n                geometries.push(geometryInstance);\r\n            }\r\n        } else {\r\n            for (i = 0; i < polygons.length; i++) {\r\n                geometryInstance = createGeometryFromPositions(ellipsoid, polygons[i], minDistance, perPositionHeight, arcType);\r\n                geometryInstance.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(geometryInstance.geometry.attributes.position.values, height, ellipsoid, !perPositionHeight);\r\n\r\n                if (defined(polygonGeometry._offsetAttribute)) {\r\n                    var length = geometryInstance.geometry.attributes.position.values.length;\r\n                    var applyOffset = new Uint8Array(length / 3);\r\n                    offsetValue = polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                    arrayFill(applyOffset, offsetValue);\r\n                    geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute({\r\n                        componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                        componentsPerAttribute : 1,\r\n                        values: applyOffset\r\n                    });\r\n                }\r\n\r\n                geometries.push(geometryInstance);\r\n            }\r\n        }\r\n\r\n        var geometry = GeometryPipeline.combineInstances(geometries)[0];\r\n        var boundingSphere = BoundingSphere.fromVertices(geometry.attributes.position.values);\r\n\r\n        return new Geometry({\r\n            attributes : geometry.attributes,\r\n            indices : geometry.indices,\r\n            primitiveType : geometry.primitiveType,\r\n            boundingSphere : boundingSphere,\r\n            offsetAttribute : polygonGeometry._offsetAttribute\r\n        });\r\n    };\r\nexport default PolygonOutlineGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport PolygonOutlineGeometry from '../Core/PolygonOutlineGeometry.js';\r\n\r\n    function createPolygonOutlineGeometry(polygonGeometry, offset) {\r\n        if (defined(offset)) {\r\n            polygonGeometry = PolygonOutlineGeometry.unpack(polygonGeometry, offset);\r\n        }\r\n        polygonGeometry._ellipsoid = Ellipsoid.clone(polygonGeometry._ellipsoid);\r\n        return PolygonOutlineGeometry.createGeometry(polygonGeometry);\r\n    }\r\nexport default createPolygonOutlineGeometry;\r\n"],"names":["EllipsoidTangentPlane","PolygonPipeline","WindingOrder","ArcType","PolygonGeometryLibrary","IndexDatatype","GeometryInstance","Geometry","GeometryAttributes","GeometryAttribute","ComponentDatatype","PrimitiveType","Check","defined","DeveloperError","defaultValue","Ellipsoid","CesiumMath","GeometryOffsetAttribute","arrayFill","GeometryPipeline","BoundingSphere"],"mappings":"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"}