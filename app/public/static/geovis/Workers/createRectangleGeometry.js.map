{"version":3,"file":"createRectangleGeometry.js","sources":["../../../../Source/Core/RectangleGeometry.js","../../../../Source/WorkersES6/createRectangleGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport Check from './Check.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryInstance from './GeometryInstance.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport GeometryPipeline from './GeometryPipeline.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix2 from './Matrix2.js';\r\nimport Matrix3 from './Matrix3.js';\r\nimport PolygonPipeline from './PolygonPipeline.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport Quaternion from './Quaternion.js';\r\nimport Rectangle from './Rectangle.js';\r\nimport RectangleGeometryLibrary from './RectangleGeometryLibrary.js';\r\nimport VertexFormat from './VertexFormat.js';\r\n\r\n    var positionScratch = new Cartesian3();\r\n    var normalScratch = new Cartesian3();\r\n    var tangentScratch = new Cartesian3();\r\n    var bitangentScratch = new Cartesian3();\r\n    var rectangleScratch = new Rectangle();\r\n    var stScratch = new Cartesian2();\r\n    var bottomBoundingSphere = new BoundingSphere();\r\n    var topBoundingSphere = new BoundingSphere();\r\n\r\n    function createAttributes(vertexFormat, attributes) {\r\n        var geo = new Geometry({\r\n            attributes : new GeometryAttributes(),\r\n            primitiveType : PrimitiveType.TRIANGLES\r\n        });\r\n\r\n        geo.attributes.position = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : attributes.positions\r\n        });\r\n        if (vertexFormat.normal) {\r\n            geo.attributes.normal = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : attributes.normals\r\n            });\r\n        }\r\n        if (vertexFormat.tangent) {\r\n            geo.attributes.tangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : attributes.tangents\r\n            });\r\n        }\r\n        if (vertexFormat.bitangent) {\r\n            geo.attributes.bitangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : attributes.bitangents\r\n            });\r\n        }\r\n        return geo;\r\n    }\r\n\r\n    function calculateAttributes(positions, vertexFormat, ellipsoid, tangentRotationMatrix) {\r\n        var length = positions.length;\r\n\r\n        var normals = (vertexFormat.normal) ? new Float32Array(length) : undefined;\r\n        var tangents = (vertexFormat.tangent) ? new Float32Array(length) : undefined;\r\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(length) : undefined;\r\n\r\n        var attrIndex = 0;\r\n        var bitangent = bitangentScratch;\r\n        var tangent = tangentScratch;\r\n        var normal = normalScratch;\r\n        if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\r\n            for (var i = 0; i < length; i += 3) {\r\n                var p = Cartesian3.fromArray(positions, i, positionScratch);\r\n                var attrIndex1 = attrIndex + 1;\r\n                var attrIndex2 = attrIndex + 2;\r\n\r\n                normal = ellipsoid.geodeticSurfaceNormal(p, normal);\r\n                if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n                    Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent);\r\n                    Matrix3.multiplyByVector(tangentRotationMatrix, tangent, tangent);\r\n                    Cartesian3.normalize(tangent, tangent);\r\n\r\n                    if (vertexFormat.bitangent) {\r\n                        Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\r\n                    }\r\n                }\r\n\r\n                if (vertexFormat.normal) {\r\n                    normals[attrIndex] = normal.x;\r\n                    normals[attrIndex1] = normal.y;\r\n                    normals[attrIndex2] = normal.z;\r\n                }\r\n                if (vertexFormat.tangent) {\r\n                    tangents[attrIndex] = tangent.x;\r\n                    tangents[attrIndex1] = tangent.y;\r\n                    tangents[attrIndex2] = tangent.z;\r\n                }\r\n                if (vertexFormat.bitangent) {\r\n                    bitangents[attrIndex] = bitangent.x;\r\n                    bitangents[attrIndex1] = bitangent.y;\r\n                    bitangents[attrIndex2] = bitangent.z;\r\n                }\r\n                attrIndex += 3;\r\n            }\r\n        }\r\n        return createAttributes(vertexFormat, {\r\n            positions : positions,\r\n            normals : normals,\r\n            tangents : tangents,\r\n            bitangents : bitangents\r\n        });\r\n    }\r\n\r\n    var v1Scratch = new Cartesian3();\r\n    var v2Scratch = new Cartesian3();\r\n\r\n    function calculateAttributesWall(positions, vertexFormat, ellipsoid) {\r\n        var length = positions.length;\r\n\r\n        var normals = (vertexFormat.normal) ? new Float32Array(length) : undefined;\r\n        var tangents = (vertexFormat.tangent) ? new Float32Array(length) : undefined;\r\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(length) : undefined;\r\n\r\n        var normalIndex = 0;\r\n        var tangentIndex = 0;\r\n        var bitangentIndex = 0;\r\n        var recomputeNormal = true;\r\n\r\n        var bitangent = bitangentScratch;\r\n        var tangent = tangentScratch;\r\n        var normal = normalScratch;\r\n        if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\r\n            for (var i = 0; i < length; i += 6) {\r\n                var p = Cartesian3.fromArray(positions, i, positionScratch);\r\n                var p1 = Cartesian3.fromArray(positions, (i + 6) % length, v1Scratch);\r\n                if (recomputeNormal) {\r\n                    var p2 = Cartesian3.fromArray(positions, (i + 3) % length, v2Scratch);\r\n                    Cartesian3.subtract(p1, p, p1);\r\n                    Cartesian3.subtract(p2, p, p2);\r\n                    normal = Cartesian3.normalize(Cartesian3.cross(p2, p1, normal), normal);\r\n                    recomputeNormal = false;\r\n                }\r\n\r\n                if (Cartesian3.equalsEpsilon(p1, p, CesiumMath.EPSILON10)) { // if we've reached a corner\r\n                    recomputeNormal = true;\r\n                }\r\n\r\n                if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n                    bitangent = ellipsoid.geodeticSurfaceNormal(p, bitangent);\r\n                    if (vertexFormat.tangent) {\r\n                        tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\r\n                    }\r\n                }\r\n\r\n                if (vertexFormat.normal) {\r\n                    normals[normalIndex++] = normal.x;\r\n                    normals[normalIndex++] = normal.y;\r\n                    normals[normalIndex++] = normal.z;\r\n                    normals[normalIndex++] = normal.x;\r\n                    normals[normalIndex++] = normal.y;\r\n                    normals[normalIndex++] = normal.z;\r\n                }\r\n\r\n                if (vertexFormat.tangent) {\r\n                    tangents[tangentIndex++] = tangent.x;\r\n                    tangents[tangentIndex++] = tangent.y;\r\n                    tangents[tangentIndex++] = tangent.z;\r\n                    tangents[tangentIndex++] = tangent.x;\r\n                    tangents[tangentIndex++] = tangent.y;\r\n                    tangents[tangentIndex++] = tangent.z;\r\n                }\r\n\r\n                if (vertexFormat.bitangent) {\r\n                    bitangents[bitangentIndex++] = bitangent.x;\r\n                    bitangents[bitangentIndex++] = bitangent.y;\r\n                    bitangents[bitangentIndex++] = bitangent.z;\r\n                    bitangents[bitangentIndex++] = bitangent.x;\r\n                    bitangents[bitangentIndex++] = bitangent.y;\r\n                    bitangents[bitangentIndex++] = bitangent.z;\r\n                }\r\n            }\r\n        }\r\n\r\n        return createAttributes(vertexFormat, {\r\n            positions : positions,\r\n            normals : normals,\r\n            tangents : tangents,\r\n            bitangents : bitangents\r\n        });\r\n    }\r\n\r\n    function constructRectangle(rectangleGeometry, computedOptions) {\r\n        var vertexFormat = rectangleGeometry._vertexFormat;\r\n        var ellipsoid = rectangleGeometry._ellipsoid;\r\n        var height = computedOptions.height;\r\n        var width = computedOptions.width;\r\n        var northCap = computedOptions.northCap;\r\n        var southCap = computedOptions.southCap;\r\n\r\n        var rowStart = 0;\r\n        var rowEnd = height;\r\n        var rowHeight = height;\r\n        var size = 0;\r\n        if (northCap) {\r\n            rowStart = 1;\r\n            rowHeight -= 1;\r\n            size += 1;\r\n        }\r\n        if (southCap) {\r\n            rowEnd -= 1;\r\n            rowHeight -= 1;\r\n            size += 1;\r\n        }\r\n        size += (width * rowHeight);\r\n\r\n        var positions = (vertexFormat.position) ? new Float64Array(size * 3) : undefined;\r\n        var textureCoordinates = (vertexFormat.st) ? new Float32Array(size * 2) : undefined;\r\n\r\n        var posIndex = 0;\r\n        var stIndex = 0;\r\n\r\n        var position = positionScratch;\r\n        var st = stScratch;\r\n\r\n        var minX = Number.MAX_VALUE;\r\n        var minY = Number.MAX_VALUE;\r\n        var maxX = -Number.MAX_VALUE;\r\n        var maxY = -Number.MAX_VALUE;\r\n\r\n        for (var row = rowStart; row < rowEnd; ++row) {\r\n            for (var col = 0; col < width; ++col) {\r\n                RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, vertexFormat.st, row, col, position, st);\r\n\r\n                positions[posIndex++] = position.x;\r\n                positions[posIndex++] = position.y;\r\n                positions[posIndex++] = position.z;\r\n\r\n                if (vertexFormat.st) {\r\n                    textureCoordinates[stIndex++] = st.x;\r\n                    textureCoordinates[stIndex++] = st.y;\r\n\r\n                    minX = Math.min(minX, st.x);\r\n                    minY = Math.min(minY, st.y);\r\n                    maxX = Math.max(maxX, st.x);\r\n                    maxY = Math.max(maxY, st.y);\r\n                }\r\n            }\r\n        }\r\n        if (northCap) {\r\n            RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, vertexFormat.st, 0, 0, position, st);\r\n\r\n            positions[posIndex++] = position.x;\r\n            positions[posIndex++] = position.y;\r\n            positions[posIndex++] = position.z;\r\n\r\n            if (vertexFormat.st) {\r\n                textureCoordinates[stIndex++] = st.x;\r\n                textureCoordinates[stIndex++] = st.y;\r\n\r\n                minX = st.x;\r\n                minY = st.y;\r\n                maxX = st.x;\r\n                maxY = st.y;\r\n            }\r\n        }\r\n        if (southCap) {\r\n            RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, vertexFormat.st, height - 1, 0, position, st);\r\n\r\n            positions[posIndex++] = position.x;\r\n            positions[posIndex++] = position.y;\r\n            positions[posIndex] = position.z;\r\n\r\n            if (vertexFormat.st) {\r\n                textureCoordinates[stIndex++] = st.x;\r\n                textureCoordinates[stIndex] = st.y;\r\n\r\n                minX = Math.min(minX, st.x);\r\n                minY = Math.min(minY, st.y);\r\n                maxX = Math.max(maxX, st.x);\r\n                maxY = Math.max(maxY, st.y);\r\n            }\r\n        }\r\n\r\n        if (vertexFormat.st && (minX < 0.0 || minY < 0.0 || maxX > 1.0 || maxY > 1.0)) {\r\n            for (var k = 0; k < textureCoordinates.length; k += 2) {\r\n                textureCoordinates[k] = (textureCoordinates[k] - minX) / (maxX - minX);\r\n                textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minY) / (maxY - minY);\r\n            }\r\n        }\r\n\r\n        var geo = calculateAttributes(positions, vertexFormat, ellipsoid, computedOptions.tangentRotationMatrix);\r\n\r\n        var indicesSize = 6 * (width - 1) * (rowHeight - 1);\r\n        if (northCap) {\r\n            indicesSize += 3 * (width - 1);\r\n        }\r\n        if (southCap) {\r\n            indicesSize += 3 * (width - 1);\r\n        }\r\n        var indices = IndexDatatype.createTypedArray(size, indicesSize);\r\n        var index = 0;\r\n        var indicesIndex = 0;\r\n        var i;\r\n        for (i = 0; i < rowHeight - 1; ++i) {\r\n            for (var j = 0; j < width - 1; ++j) {\r\n                var upperLeft = index;\r\n                var lowerLeft = upperLeft + width;\r\n                var lowerRight = lowerLeft + 1;\r\n                var upperRight = upperLeft + 1;\r\n                indices[indicesIndex++] = upperLeft;\r\n                indices[indicesIndex++] = lowerLeft;\r\n                indices[indicesIndex++] = upperRight;\r\n                indices[indicesIndex++] = upperRight;\r\n                indices[indicesIndex++] = lowerLeft;\r\n                indices[indicesIndex++] = lowerRight;\r\n                ++index;\r\n            }\r\n            ++index;\r\n        }\r\n        if (northCap || southCap) {\r\n            var northIndex = size - 1;\r\n            var southIndex = size - 1;\r\n            if (northCap && southCap) {\r\n                northIndex = size - 2;\r\n            }\r\n\r\n            var p1;\r\n            var p2;\r\n            index = 0;\r\n\r\n            if (northCap) {\r\n                for (i = 0; i < width - 1; i++) {\r\n                    p1 = index;\r\n                    p2 = p1 + 1;\r\n                    indices[indicesIndex++] = northIndex;\r\n                    indices[indicesIndex++] = p1;\r\n                    indices[indicesIndex++] = p2;\r\n                    ++index;\r\n                }\r\n            }\r\n            if (southCap) {\r\n                index = (rowHeight - 1) * (width);\r\n                for (i = 0; i < width - 1; i++) {\r\n                    p1 = index;\r\n                    p2 = p1 + 1;\r\n                    indices[indicesIndex++] = p1;\r\n                    indices[indicesIndex++] = southIndex;\r\n                    indices[indicesIndex++] = p2;\r\n                    ++index;\r\n                }\r\n            }\r\n        }\r\n\r\n        geo.indices = indices;\r\n        if (vertexFormat.st) {\r\n            geo.attributes.st = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                values : textureCoordinates\r\n            });\r\n        }\r\n\r\n        return geo;\r\n    }\r\n\r\n    function addWallPositions(wallPositions, posIndex, i, topPositions, bottomPositions) {\r\n        wallPositions[posIndex++] = topPositions[i];\r\n        wallPositions[posIndex++] = topPositions[i + 1];\r\n        wallPositions[posIndex++] = topPositions[i + 2];\r\n        wallPositions[posIndex++] = bottomPositions[i];\r\n        wallPositions[posIndex++] = bottomPositions[i + 1];\r\n        wallPositions[posIndex] = bottomPositions[i + 2];\r\n        return wallPositions;\r\n    }\r\n\r\n    function addWallTextureCoordinates(wallTextures, stIndex, i, st) {\r\n        wallTextures[stIndex++] = st[i];\r\n        wallTextures[stIndex++] = st[i + 1];\r\n        wallTextures[stIndex++] = st[i];\r\n        wallTextures[stIndex] = st[i + 1];\r\n        return wallTextures;\r\n    }\r\n\r\n    var scratchVertexFormat = new VertexFormat();\r\n\r\n    function constructExtrudedRectangle(rectangleGeometry, computedOptions) {\r\n        var shadowVolume = rectangleGeometry._shadowVolume;\r\n        var offsetAttributeValue = rectangleGeometry._offsetAttribute;\r\n        var vertexFormat = rectangleGeometry._vertexFormat;\r\n        var minHeight = rectangleGeometry._extrudedHeight;\r\n        var maxHeight = rectangleGeometry._surfaceHeight;\r\n        var ellipsoid = rectangleGeometry._ellipsoid;\r\n\r\n        var height = computedOptions.height;\r\n        var width = computedOptions.width;\r\n\r\n        var i;\r\n\r\n        if (shadowVolume) {\r\n            var newVertexFormat = VertexFormat.clone(vertexFormat, scratchVertexFormat);\r\n            newVertexFormat.normal = true;\r\n            rectangleGeometry._vertexFormat = newVertexFormat;\r\n        }\r\n\r\n        var topBottomGeo = constructRectangle(rectangleGeometry, computedOptions);\r\n\r\n        if (shadowVolume) {\r\n            rectangleGeometry._vertexFormat = vertexFormat;\r\n        }\r\n\r\n        var topPositions = PolygonPipeline.scaleToGeodeticHeight(topBottomGeo.attributes.position.values, maxHeight, ellipsoid, false);\r\n        topPositions = new Float64Array(topPositions);\r\n        var length = topPositions.length;\r\n        var newLength = length * 2;\r\n        var positions = new Float64Array(newLength);\r\n        positions.set(topPositions);\r\n        var bottomPositions = PolygonPipeline.scaleToGeodeticHeight(topBottomGeo.attributes.position.values, minHeight, ellipsoid);\r\n        positions.set(bottomPositions, length);\r\n        topBottomGeo.attributes.position.values = positions;\r\n\r\n        var normals = (vertexFormat.normal) ? new Float32Array(newLength) : undefined;\r\n        var tangents = (vertexFormat.tangent) ? new Float32Array(newLength) : undefined;\r\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(newLength) : undefined;\r\n        var textures = (vertexFormat.st) ? new Float32Array(newLength / 3 * 2) : undefined;\r\n        var topSt;\r\n        var topNormals;\r\n        if (vertexFormat.normal) {\r\n            topNormals = topBottomGeo.attributes.normal.values;\r\n            normals.set(topNormals);\r\n            for (i = 0; i < length; i++) {\r\n                topNormals[i] = -topNormals[i];\r\n            }\r\n            normals.set(topNormals, length);\r\n            topBottomGeo.attributes.normal.values = normals;\r\n        }\r\n        if (shadowVolume) {\r\n            topNormals = topBottomGeo.attributes.normal.values;\r\n            if (!vertexFormat.normal) {\r\n                topBottomGeo.attributes.normal = undefined;\r\n            }\r\n            var extrudeNormals = new Float32Array(newLength);\r\n            for (i = 0; i < length; i++) {\r\n                topNormals[i] = -topNormals[i];\r\n            }\r\n            extrudeNormals.set(topNormals, length); //only get normals for bottom layer that's going to be pushed down\r\n            topBottomGeo.attributes.extrudeDirection = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : extrudeNormals\r\n            });\r\n        }\r\n\r\n        var offsetValue;\r\n        var hasOffsets = defined(offsetAttributeValue);\r\n        if (hasOffsets) {\r\n            var size = length / 3 * 2;\r\n            var offsetAttribute = new Uint8Array(size);\r\n            if (offsetAttributeValue === GeometryOffsetAttribute.TOP) {\r\n                offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n            } else {\r\n                offsetValue = offsetAttributeValue === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n            }\r\n\r\n            topBottomGeo.attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values : offsetAttribute\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.tangent) {\r\n            var topTangents = topBottomGeo.attributes.tangent.values;\r\n            tangents.set(topTangents);\r\n            for (i = 0; i < length; i++) {\r\n                topTangents[i] = -topTangents[i];\r\n            }\r\n            tangents.set(topTangents, length);\r\n            topBottomGeo.attributes.tangent.values = tangents;\r\n        }\r\n        if (vertexFormat.bitangent) {\r\n            var topBitangents = topBottomGeo.attributes.bitangent.values;\r\n            bitangents.set(topBitangents);\r\n            bitangents.set(topBitangents, length);\r\n            topBottomGeo.attributes.bitangent.values = bitangents;\r\n        }\r\n        if (vertexFormat.st) {\r\n            topSt = topBottomGeo.attributes.st.values;\r\n            textures.set(topSt);\r\n            textures.set(topSt, length / 3 * 2);\r\n            topBottomGeo.attributes.st.values = textures;\r\n        }\r\n\r\n        var indices = topBottomGeo.indices;\r\n        var indicesLength = indices.length;\r\n        var posLength = length / 3;\r\n        var newIndices = IndexDatatype.createTypedArray(newLength / 3, indicesLength * 2);\r\n        newIndices.set(indices);\r\n        for (i = 0; i < indicesLength; i += 3) {\r\n            newIndices[i + indicesLength] = indices[i + 2] + posLength;\r\n            newIndices[i + 1 + indicesLength] = indices[i + 1] + posLength;\r\n            newIndices[i + 2 + indicesLength] = indices[i] + posLength;\r\n        }\r\n        topBottomGeo.indices = newIndices;\r\n\r\n        var northCap = computedOptions.northCap;\r\n        var southCap = computedOptions.southCap;\r\n\r\n        var rowHeight = height;\r\n        var widthMultiplier = 2;\r\n        var perimeterPositions = 0;\r\n        var corners = 4;\r\n        var dupliateCorners = 4;\r\n        if (northCap) {\r\n            widthMultiplier -= 1;\r\n            rowHeight -= 1;\r\n            perimeterPositions += 1;\r\n            corners -= 2;\r\n            dupliateCorners -= 1;\r\n        }\r\n        if (southCap) {\r\n            widthMultiplier -= 1;\r\n            rowHeight -= 1;\r\n            perimeterPositions += 1;\r\n            corners -= 2;\r\n            dupliateCorners -= 1;\r\n        }\r\n        perimeterPositions += (widthMultiplier * width + 2 * rowHeight - corners);\r\n\r\n        var wallCount = (perimeterPositions + dupliateCorners) * 2;\r\n\r\n        var wallPositions = new Float64Array(wallCount * 3);\r\n        var wallExtrudeNormals = shadowVolume ? new Float32Array(wallCount * 3) : undefined;\r\n        var wallOffsetAttribute = hasOffsets ? new Uint8Array(wallCount) : undefined;\r\n        var wallTextures = (vertexFormat.st) ? new Float32Array(wallCount * 2) : undefined;\r\n\r\n        var computeTopOffsets = offsetAttributeValue === GeometryOffsetAttribute.TOP;\r\n        if (hasOffsets && !computeTopOffsets) {\r\n            offsetValue = offsetAttributeValue === GeometryOffsetAttribute.ALL ? 1 : 0;\r\n            wallOffsetAttribute = arrayFill(wallOffsetAttribute, offsetValue);\r\n        }\r\n\r\n        var posIndex = 0;\r\n        var stIndex = 0;\r\n        var extrudeNormalIndex = 0;\r\n        var wallOffsetIndex = 0;\r\n        var area = width * rowHeight;\r\n        var threeI;\r\n        for (i = 0; i < area; i += width) {\r\n            threeI = i * 3;\r\n            wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\r\n            posIndex += 6;\r\n            if (vertexFormat.st) {\r\n                wallTextures = addWallTextureCoordinates(wallTextures, stIndex, i * 2, topSt);\r\n                stIndex += 4;\r\n            }\r\n            if (shadowVolume) {\r\n                extrudeNormalIndex += 3;\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\r\n            }\r\n            if (computeTopOffsets) {\r\n                wallOffsetAttribute[wallOffsetIndex++] = 1;\r\n                wallOffsetIndex += 1;\r\n            }\r\n        }\r\n\r\n        if (!southCap) {\r\n            for (i = area - width; i < area; i++) {\r\n                threeI = i * 3;\r\n                wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\r\n                posIndex += 6;\r\n                if (vertexFormat.st) {\r\n                    wallTextures = addWallTextureCoordinates(wallTextures, stIndex, i * 2, topSt);\r\n                    stIndex += 4;\r\n                }\r\n                if (shadowVolume) {\r\n                    extrudeNormalIndex += 3;\r\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\r\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\r\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\r\n                }\r\n                if (computeTopOffsets) {\r\n                    wallOffsetAttribute[wallOffsetIndex++] = 1;\r\n                    wallOffsetIndex += 1;\r\n                }\r\n            }\r\n        } else {\r\n            var southIndex = northCap ? area + 1 : area;\r\n            threeI = southIndex * 3;\r\n\r\n            for (i = 0; i < 2; i++) { // duplicate corner points\r\n                wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\r\n                posIndex += 6;\r\n                if (vertexFormat.st) {\r\n                    wallTextures = addWallTextureCoordinates(wallTextures, stIndex, southIndex * 2, topSt);\r\n                    stIndex += 4;\r\n                }\r\n                if (shadowVolume) {\r\n                    extrudeNormalIndex += 3;\r\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\r\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\r\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\r\n                }\r\n                if (computeTopOffsets) {\r\n                    wallOffsetAttribute[wallOffsetIndex++] = 1;\r\n                    wallOffsetIndex += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (i = area - 1; i > 0; i -= width) {\r\n            threeI = i * 3;\r\n            wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\r\n            posIndex += 6;\r\n            if (vertexFormat.st) {\r\n                wallTextures = addWallTextureCoordinates(wallTextures, stIndex, i * 2, topSt);\r\n                stIndex += 4;\r\n            }\r\n            if (shadowVolume) {\r\n                extrudeNormalIndex += 3;\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\r\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\r\n            }\r\n            if (computeTopOffsets) {\r\n                wallOffsetAttribute[wallOffsetIndex++] = 1;\r\n                wallOffsetIndex += 1;\r\n            }\r\n\r\n        }\r\n\r\n        if (!northCap) {\r\n            for (i = width - 1; i >= 0; i--) {\r\n                threeI = i * 3;\r\n                wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\r\n                posIndex += 6;\r\n                if (vertexFormat.st) {\r\n                    wallTextures = addWallTextureCoordinates(wallTextures, stIndex, i * 2, topSt);\r\n                    stIndex += 4;\r\n                }\r\n                if (shadowVolume) {\r\n                    extrudeNormalIndex += 3;\r\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\r\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\r\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\r\n                }\r\n                if (computeTopOffsets) {\r\n                    wallOffsetAttribute[wallOffsetIndex++] = 1;\r\n                    wallOffsetIndex += 1;\r\n                }\r\n            }\r\n        } else {\r\n            var northIndex = area;\r\n            threeI = northIndex * 3;\r\n\r\n            for (i = 0; i < 2; i++) { // duplicate corner points\r\n                wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\r\n                posIndex += 6;\r\n                if (vertexFormat.st) {\r\n                    wallTextures = addWallTextureCoordinates(wallTextures, stIndex, northIndex * 2, topSt);\r\n                    stIndex += 4;\r\n                }\r\n                if (shadowVolume) {\r\n                    extrudeNormalIndex += 3;\r\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\r\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\r\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\r\n                }\r\n                if (computeTopOffsets) {\r\n                    wallOffsetAttribute[wallOffsetIndex++] = 1;\r\n                    wallOffsetIndex += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        var geo = calculateAttributesWall(wallPositions, vertexFormat, ellipsoid);\r\n\r\n        if (vertexFormat.st) {\r\n            geo.attributes.st = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                values : wallTextures\r\n            });\r\n        }\r\n        if (shadowVolume) {\r\n            geo.attributes.extrudeDirection = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : wallExtrudeNormals\r\n            });\r\n        }\r\n        if (hasOffsets) {\r\n            geo.attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values : wallOffsetAttribute\r\n            });\r\n        }\r\n\r\n        var wallIndices = IndexDatatype.createTypedArray(wallCount, perimeterPositions * 6);\r\n\r\n        var upperLeft;\r\n        var lowerLeft;\r\n        var lowerRight;\r\n        var upperRight;\r\n        length = wallPositions.length / 3;\r\n        var index = 0;\r\n        for (i = 0; i < length - 1; i += 2) {\r\n            upperLeft = i;\r\n            upperRight = (upperLeft + 2) % length;\r\n            var p1 = Cartesian3.fromArray(wallPositions, upperLeft * 3, v1Scratch);\r\n            var p2 = Cartesian3.fromArray(wallPositions, upperRight * 3, v2Scratch);\r\n            if (Cartesian3.equalsEpsilon(p1, p2, CesiumMath.EPSILON10)) {\r\n                continue;\r\n            }\r\n            lowerLeft = (upperLeft + 1) % length;\r\n            lowerRight = (lowerLeft + 2) % length;\r\n            wallIndices[index++] = upperLeft;\r\n            wallIndices[index++] = lowerLeft;\r\n            wallIndices[index++] = upperRight;\r\n            wallIndices[index++] = upperRight;\r\n            wallIndices[index++] = lowerLeft;\r\n            wallIndices[index++] = lowerRight;\r\n        }\r\n\r\n        geo.indices = wallIndices;\r\n\r\n        geo = GeometryPipeline.combineInstances([\r\n            new GeometryInstance({\r\n                geometry : topBottomGeo\r\n            }),\r\n            new GeometryInstance({\r\n                geometry : geo\r\n            })\r\n        ]);\r\n\r\n        return geo[0];\r\n    }\r\n\r\n    var scratchRectanglePoints = [new Cartesian3(), new Cartesian3(), new Cartesian3(), new Cartesian3()];\r\n    var nwScratch = new Cartographic();\r\n    var stNwScratch = new Cartographic();\r\n    function computeRectangle(rectangle, granularity, rotation, ellipsoid, result) {\r\n        if (rotation === 0.0) {\r\n            return Rectangle.clone(rectangle, result);\r\n        }\r\n\r\n        var computedOptions = RectangleGeometryLibrary.computeOptions(rectangle, granularity, rotation, 0, rectangleScratch, nwScratch);\r\n\r\n        var height = computedOptions.height;\r\n        var width = computedOptions.width;\r\n\r\n        var positions = scratchRectanglePoints;\r\n        RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, 0, 0, positions[0]);\r\n        RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, 0, width - 1, positions[1]);\r\n        RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, height - 1, 0, positions[2]);\r\n        RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, height - 1, width - 1, positions[3]);\r\n\r\n        return Rectangle.fromCartesianArray(positions, ellipsoid, result);\r\n    }\r\n\r\n    /**\r\n     * A description of a cartographic rectangle on an ellipsoid centered at the origin. Rectangle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n     *\r\n     * @alias RectangleGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Rectangle} options.rectangle A cartographic rectangle with north, south, east and west properties in radians.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the rectangle lies.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Number} [options.height=0.0] The distance in meters between the rectangle and the ellipsoid surface.\r\n     * @param {Number} [options.rotation=0.0] The rotation of the rectangle, in radians. A positive rotation is counter-clockwise.\r\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n     * @param {Number} [options.extrudedHeight] The distance in meters between the rectangle's extruded face and the ellipsoid surface.\r\n     *\r\n     * @exception {DeveloperError} <code>options.rectangle.north</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n     * @exception {DeveloperError} <code>options.rectangle.south</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n     * @exception {DeveloperError} <code>options.rectangle.east</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n     * @exception {DeveloperError} <code>options.rectangle.west</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n     * @exception {DeveloperError} <code>options.rectangle.north</code> must be greater than <code>options.rectangle.south</code>.\r\n     *\r\n     * @see RectangleGeometry#createGeometry\r\n     *\r\n     * @demo {@link https://sandcastle.cesium.com/index.html?src=Rectangle.html|Cesium Sandcastle Rectangle Demo}\r\n     *\r\n     * @example\r\n     * // 1. create a rectangle\r\n     * var rectangle = new Cesium.RectangleGeometry({\r\n     *   ellipsoid : Cesium.Ellipsoid.WGS84,\r\n     *   rectangle : Cesium.Rectangle.fromDegrees(-80.0, 39.0, -74.0, 42.0),\r\n     *   height : 10000.0\r\n     * });\r\n     * var geometry = Cesium.RectangleGeometry.createGeometry(rectangle);\r\n     *\r\n     * // 2. create an extruded rectangle without a top\r\n     * var rectangle = new Cesium.RectangleGeometry({\r\n     *   ellipsoid : Cesium.Ellipsoid.WGS84,\r\n     *   rectangle : Cesium.Rectangle.fromDegrees(-80.0, 39.0, -74.0, 42.0),\r\n     *   height : 10000.0,\r\n     *   extrudedHeight: 300000\r\n     * });\r\n     * var geometry = Cesium.RectangleGeometry.createGeometry(rectangle);\r\n     */\r\n    function RectangleGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var rectangle = options.rectangle;\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rectangle', rectangle);\r\n        Rectangle.validate(rectangle);\r\n        if (rectangle.north < rectangle.south) {\r\n            throw new DeveloperError('options.rectangle.north must be greater than or equal to options.rectangle.south');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var height = defaultValue(options.height, 0.0);\r\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n        this._rectangle = Rectangle.clone(rectangle);\r\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\r\n        this._surfaceHeight = Math.max(height, extrudedHeight);\r\n        this._rotation = defaultValue(options.rotation, 0.0);\r\n        this._stRotation = defaultValue(options.stRotation, 0.0);\r\n        this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\r\n        this._extrudedHeight = Math.min(height, extrudedHeight);\r\n        this._shadowVolume = defaultValue(options.shadowVolume, false);\r\n        this._workerName = 'createRectangleGeometry';\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._rotatedRectangle = undefined;\r\n\r\n        this._textureCoordinateRotationPoints = undefined;\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    RectangleGeometry.packedLength = Rectangle.packedLength + Ellipsoid.packedLength + VertexFormat.packedLength + 7;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {RectangleGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    RectangleGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        Rectangle.pack(value._rectangle, array, startingIndex);\r\n        startingIndex += Rectangle.packedLength;\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        array[startingIndex++] = value._granularity;\r\n        array[startingIndex++] = value._surfaceHeight;\r\n        array[startingIndex++] = value._rotation;\r\n        array[startingIndex++] = value._stRotation;\r\n        array[startingIndex++] = value._extrudedHeight;\r\n        array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\r\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchRectangle = new Rectangle();\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var scratchOptions = {\r\n        rectangle : scratchRectangle,\r\n        ellipsoid : scratchEllipsoid,\r\n        vertexFormat : scratchVertexFormat,\r\n        granularity : undefined,\r\n        height : undefined,\r\n        rotation : undefined,\r\n        stRotation : undefined,\r\n        extrudedHeight : undefined,\r\n        shadowVolume : undefined,\r\n        offsetAttribute: undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {RectangleGeometry} [result] The object into which to store the result.\r\n     * @returns {RectangleGeometry} The modified result parameter or a new RectangleGeometry instance if one was not provided.\r\n     */\r\n    RectangleGeometry.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var rectangle = Rectangle.unpack(array, startingIndex, scratchRectangle);\r\n        startingIndex += Rectangle.packedLength;\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        var granularity = array[startingIndex++];\r\n        var surfaceHeight = array[startingIndex++];\r\n        var rotation = array[startingIndex++];\r\n        var stRotation = array[startingIndex++];\r\n        var extrudedHeight = array[startingIndex++];\r\n        var shadowVolume = array[startingIndex++] === 1.0;\r\n        var offsetAttribute = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.granularity = granularity;\r\n            scratchOptions.height = surfaceHeight;\r\n            scratchOptions.rotation = rotation;\r\n            scratchOptions.stRotation = stRotation;\r\n            scratchOptions.extrudedHeight = extrudedHeight;\r\n            scratchOptions.shadowVolume = shadowVolume;\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n            return new RectangleGeometry(scratchOptions);\r\n        }\r\n\r\n        result._rectangle = Rectangle.clone(rectangle, result._rectangle);\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._granularity = granularity;\r\n        result._surfaceHeight = surfaceHeight;\r\n        result._rotation = rotation;\r\n        result._stRotation = stRotation;\r\n        result._extrudedHeight = extrudedHeight;\r\n        result._shadowVolume = shadowVolume;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the bounding rectangle based on the provided options\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Rectangle} options.rectangle A cartographic rectangle with north, south, east and west properties in radians.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the rectangle lies.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Number} [options.rotation=0.0] The rotation of the rectangle, in radians. A positive rotation is counter-clockwise.\r\n     * @param {Rectangle} [result] An object in which to store the result.\r\n     *\r\n     * @returns {Rectangle} The result rectangle\r\n     */\r\n    RectangleGeometry.computeRectangle = function(options, result) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var rectangle = options.rectangle;\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rectangle', rectangle);\r\n        Rectangle.validate(rectangle);\r\n        if (rectangle.north < rectangle.south) {\r\n            throw new DeveloperError('options.rectangle.north must be greater than or equal to options.rectangle.south');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        var rotation = defaultValue(options.rotation, 0.0);\r\n\r\n        return computeRectangle(rectangle, granularity, rotation, ellipsoid, result);\r\n    };\r\n\r\n    var tangentRotationMatrixScratch = new Matrix3();\r\n    var quaternionScratch = new Quaternion();\r\n    var centerScratch = new Cartographic();\r\n    /**\r\n     * Computes the geometric representation of a rectangle, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {RectangleGeometry} rectangleGeometry A description of the rectangle.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     *\r\n     * @exception {DeveloperError} Rotated rectangle is invalid.\r\n     */\r\n    RectangleGeometry.createGeometry = function(rectangleGeometry) {\r\n        if ((CesiumMath.equalsEpsilon(rectangleGeometry._rectangle.north, rectangleGeometry._rectangle.south, CesiumMath.EPSILON10) ||\r\n             (CesiumMath.equalsEpsilon(rectangleGeometry._rectangle.east, rectangleGeometry._rectangle.west, CesiumMath.EPSILON10)))) {\r\n            return undefined;\r\n        }\r\n\r\n        var rectangle = rectangleGeometry._rectangle;\r\n        var ellipsoid = rectangleGeometry._ellipsoid;\r\n        var rotation = rectangleGeometry._rotation;\r\n        var stRotation = rectangleGeometry._stRotation;\r\n        var vertexFormat = rectangleGeometry._vertexFormat;\r\n\r\n        var computedOptions = RectangleGeometryLibrary.computeOptions(rectangle, rectangleGeometry._granularity, rotation, stRotation, rectangleScratch, nwScratch, stNwScratch);\r\n\r\n        var tangentRotationMatrix = tangentRotationMatrixScratch;\r\n        if (stRotation !== 0 || rotation !== 0) {\r\n            var center = Rectangle.center(rectangle, centerScratch);\r\n            var axis = ellipsoid.geodeticSurfaceNormalCartographic(center, v1Scratch);\r\n            Quaternion.fromAxisAngle(axis, -stRotation, quaternionScratch);\r\n            Matrix3.fromQuaternion(quaternionScratch, tangentRotationMatrix);\r\n        } else {\r\n            Matrix3.clone(Matrix3.IDENTITY, tangentRotationMatrix);\r\n        }\r\n\r\n        var surfaceHeight = rectangleGeometry._surfaceHeight;\r\n        var extrudedHeight = rectangleGeometry._extrudedHeight;\r\n        var extrude = !CesiumMath.equalsEpsilon(surfaceHeight, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n\r\n        computedOptions.lonScalar = 1.0 / rectangleGeometry._rectangle.width;\r\n        computedOptions.latScalar = 1.0 / rectangleGeometry._rectangle.height;\r\n        computedOptions.tangentRotationMatrix = tangentRotationMatrix;\r\n\r\n        var geometry;\r\n        var boundingSphere;\r\n        rectangle = rectangleGeometry._rectangle;\r\n        if (extrude) {\r\n            geometry = constructExtrudedRectangle(rectangleGeometry, computedOptions);\r\n            var topBS = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, surfaceHeight, topBoundingSphere);\r\n            var bottomBS = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, extrudedHeight, bottomBoundingSphere);\r\n            boundingSphere = BoundingSphere.union(topBS, bottomBS);\r\n        } else {\r\n            geometry = constructRectangle(rectangleGeometry, computedOptions);\r\n            geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(geometry.attributes.position.values, surfaceHeight, ellipsoid, false);\r\n\r\n            if (defined(rectangleGeometry._offsetAttribute)) {\r\n                var length = geometry.attributes.position.values.length;\r\n                var applyOffset = new Uint8Array(length / 3);\r\n                var offsetValue = rectangleGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                arrayFill(applyOffset, offsetValue);\r\n                geometry.attributes.applyOffset = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                    componentsPerAttribute : 1,\r\n                    values: applyOffset\r\n                });\r\n            }\r\n\r\n            boundingSphere = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, surfaceHeight);\r\n        }\r\n\r\n        if (!vertexFormat.position) {\r\n            delete geometry.attributes.position;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : geometry.attributes,\r\n            indices : geometry.indices,\r\n            primitiveType : geometry.primitiveType,\r\n            boundingSphere : boundingSphere,\r\n            offsetAttribute : rectangleGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    RectangleGeometry.createShadowVolume = function(rectangleGeometry, minHeightFunc, maxHeightFunc) {\r\n        var granularity = rectangleGeometry._granularity;\r\n        var ellipsoid = rectangleGeometry._ellipsoid;\r\n\r\n        var minHeight = minHeightFunc(granularity, ellipsoid);\r\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\r\n\r\n        return new RectangleGeometry({\r\n            rectangle : rectangleGeometry._rectangle,\r\n            rotation : rectangleGeometry._rotation,\r\n            ellipsoid : ellipsoid,\r\n            stRotation : rectangleGeometry._stRotation,\r\n            granularity : granularity,\r\n            extrudedHeight : maxHeight,\r\n            height : minHeight,\r\n            vertexFormat : VertexFormat.POSITION_ONLY,\r\n            shadowVolume : true\r\n        });\r\n    };\r\n\r\n    var unrotatedTextureRectangleScratch = new Rectangle();\r\n    var points2DScratch = [new Cartesian2(), new Cartesian2(), new Cartesian2()];\r\n    var rotation2DScratch = new Matrix2();\r\n    var rectangleCenterScratch = new Cartographic();\r\n\r\n    function textureCoordinateRotationPoints(rectangleGeometry) {\r\n        if (rectangleGeometry._stRotation === 0.0) {\r\n            return [0, 0, 0, 1, 1, 0];\r\n        }\r\n\r\n        var rectangle = Rectangle.clone(rectangleGeometry._rectangle, unrotatedTextureRectangleScratch);\r\n        var granularity = rectangleGeometry._granularity;\r\n        var ellipsoid = rectangleGeometry._ellipsoid;\r\n\r\n        // Rotate to align the texture coordinates with ENU\r\n        var rotation = rectangleGeometry._rotation - rectangleGeometry._stRotation;\r\n\r\n        var unrotatedTextureRectangle = computeRectangle(rectangle, granularity, rotation, ellipsoid, unrotatedTextureRectangleScratch);\r\n\r\n        // Assume a computed \"east-north\" texture coordinate system based on spherical or planar tricks, bounded by `boundingRectangle`.\r\n        // The \"desired\" texture coordinate system forms an oriented rectangle (un-oriented computed) around the geometry that completely and tightly bounds it.\r\n        // We want to map from the \"east-north\" texture coordinate system into the \"desired\" system using a pair of lines (analagous planes in 2D)\r\n        // Compute 3 corners of the \"desired\" texture coordinate system in \"east-north\" texture space by the following in cartographic space:\r\n        // - rotate 3 of the corners in unrotatedTextureRectangle by stRotation around the center of the bounding rectangle\r\n        // - apply the \"east-north\" system's normalization formula to the rotated cartographics, even though this is likely to produce values outside [0-1].\r\n        // This gives us a set of points in the \"east-north\" texture coordinate system that can be used to map \"east-north\" texture coordinates to \"desired.\"\r\n\r\n        var points2D = points2DScratch;\r\n        points2D[0].x = unrotatedTextureRectangle.west;\r\n        points2D[0].y = unrotatedTextureRectangle.south;\r\n\r\n        points2D[1].x = unrotatedTextureRectangle.west;\r\n        points2D[1].y = unrotatedTextureRectangle.north;\r\n\r\n        points2D[2].x = unrotatedTextureRectangle.east;\r\n        points2D[2].y = unrotatedTextureRectangle.south;\r\n\r\n        var boundingRectangle = rectangleGeometry.rectangle;\r\n        var toDesiredInComputed = Matrix2.fromRotation(rectangleGeometry._stRotation, rotation2DScratch);\r\n        var boundingRectangleCenter = Rectangle.center(boundingRectangle, rectangleCenterScratch);\r\n\r\n        for (var i = 0; i < 3; ++i) {\r\n            var point2D = points2D[i];\r\n            point2D.x -= boundingRectangleCenter.longitude;\r\n            point2D.y -= boundingRectangleCenter.latitude;\r\n            Matrix2.multiplyByVector(toDesiredInComputed, point2D, point2D);\r\n            point2D.x += boundingRectangleCenter.longitude;\r\n            point2D.y += boundingRectangleCenter.latitude;\r\n\r\n            // Convert point into east-north texture coordinate space\r\n            point2D.x = (point2D.x - boundingRectangle.west) / boundingRectangle.width;\r\n            point2D.y = (point2D.y - boundingRectangle.south) / boundingRectangle.height;\r\n        }\r\n\r\n        var minXYCorner = points2D[0];\r\n        var maxYCorner = points2D[1];\r\n        var maxXCorner = points2D[2];\r\n        var result = new Array(6);\r\n        Cartesian2.pack(minXYCorner, result);\r\n        Cartesian2.pack(maxYCorner, result, 2);\r\n        Cartesian2.pack(maxXCorner, result, 4);\r\n        return result;\r\n    }\r\n\r\n    Object.defineProperties(RectangleGeometry.prototype, {\r\n        /**\r\n         * @private\r\n         */\r\n        rectangle : {\r\n            get : function() {\r\n                if (!defined(this._rotatedRectangle)) {\r\n                    this._rotatedRectangle = computeRectangle(this._rectangle, this._granularity, this._rotation, this._ellipsoid);\r\n                }\r\n                return this._rotatedRectangle;\r\n            }\r\n        },\r\n        /**\r\n         * For remapping texture coordinates when rendering RectangleGeometries as GroundPrimitives.\r\n         * This version permits skew in textures by computing offsets directly in cartographic space and\r\n         * more accurately approximates rendering RectangleGeometries with height as standard Primitives.\r\n         * @see Geometry#_textureCoordinateRotationPoints\r\n         * @private\r\n         */\r\n        textureCoordinateRotationPoints : {\r\n            get : function() {\r\n                if (!defined(this._textureCoordinateRotationPoints)) {\r\n                    this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(this);\r\n                }\r\n                return this._textureCoordinateRotationPoints;\r\n            }\r\n        }\r\n    });\r\nexport default RectangleGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport Rectangle from '../Core/Rectangle.js';\r\nimport RectangleGeometry from '../Core/RectangleGeometry.js';\r\n\r\n    function createRectangleGeometry(rectangleGeometry, offset) {\r\n        if (defined(offset)) {\r\n            rectangleGeometry = RectangleGeometry.unpack(rectangleGeometry, offset);\r\n        }\r\n        rectangleGeometry._ellipsoid = Ellipsoid.clone(rectangleGeometry._ellipsoid);\r\n        rectangleGeometry._rectangle = Rectangle.clone(rectangleGeometry._rectangle);\r\n        return RectangleGeometry.createGeometry(rectangleGeometry);\r\n    }\r\nexport default createRectangleGeometry;\r\n"],"names":["Cartesian3","Rectangle","Cartesian2","BoundingSphere","Geometry","GeometryAttributes","PrimitiveType","GeometryAttribute","ComponentDatatype","Matrix3","CesiumMath","RectangleGeometryLibrary","IndexDatatype","VertexFormat","PolygonPipeline","defined","GeometryOffsetAttribute","arrayFill","GeometryPipeline","GeometryInstance","Cartographic","defaultValue","Check","DeveloperError","Ellipsoid","Quaternion","Matrix2"],"mappings":"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"}