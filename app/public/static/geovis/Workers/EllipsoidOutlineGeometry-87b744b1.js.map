{"version":3,"file":"EllipsoidOutlineGeometry-87b744b1.js","sources":["../../../../Source/Core/EllipsoidOutlineGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\n\r\n    var defaultRadii = new Cartesian3(1.0, 1.0, 1.0);\r\n    var cos = Math.cos;\r\n    var sin = Math.sin;\r\n\r\n    /**\r\n     * A description of the outline of an ellipsoid centered at the origin.\r\n     *\r\n     * @alias EllipsoidOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Cartesian3} [options.radii=Cartesian3(1.0, 1.0, 1.0)] The radii of the ellipsoid in the x, y, and z directions.\r\n     * @param {Cartesian3} [options.innerRadii=options.radii] The inner radii of the ellipsoid in the x, y, and z directions.\r\n     * @param {Number} [options.minimumClock=0.0] The minimum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\r\n     * @param {Number} [options.maximumClock=2*PI] The maximum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\r\n     * @param {Number} [options.minimumCone=0.0] The minimum angle measured from the positive z-axis and toward the negative z-axis.\r\n     * @param {Number} [options.maximumCone=PI] The maximum angle measured from the positive z-axis and toward the negative z-axis.\r\n     * @param {Number} [options.stackPartitions=10] The count of stacks for the ellipsoid (1 greater than the number of parallel lines).\r\n     * @param {Number} [options.slicePartitions=8] The count of slices for the ellipsoid (Equal to the number of radial lines).\r\n     * @param {Number} [options.subdivisions=128] The number of points per line, determining the granularity of the curvature.\r\n     *\r\n     * @exception {DeveloperError} options.stackPartitions must be greater than or equal to one.\r\n     * @exception {DeveloperError} options.slicePartitions must be greater than or equal to zero.\r\n     * @exception {DeveloperError} options.subdivisions must be greater than or equal to zero.\r\n     *\r\n     * @example\r\n     * var ellipsoid = new Cesium.EllipsoidOutlineGeometry({\r\n     *   radii : new Cesium.Cartesian3(1000000.0, 500000.0, 500000.0),\r\n     *   stackPartitions: 6,\r\n     *   slicePartitions: 5\r\n     * });\r\n     * var geometry = Cesium.EllipsoidOutlineGeometry.createGeometry(ellipsoid);\r\n     */\r\n    function EllipsoidOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var radii = defaultValue(options.radii, defaultRadii);\r\n        var innerRadii = defaultValue(options.innerRadii, radii);\r\n        var minimumClock = defaultValue(options.minimumClock, 0.0);\r\n        var maximumClock = defaultValue(options.maximumClock, CesiumMath.TWO_PI);\r\n        var minimumCone = defaultValue(options.minimumCone, 0.0);\r\n        var maximumCone = defaultValue(options.maximumCone, CesiumMath.PI);\r\n        var stackPartitions = Math.round(defaultValue(options.stackPartitions, 10));\r\n        var slicePartitions = Math.round(defaultValue(options.slicePartitions, 8));\r\n        var subdivisions = Math.round(defaultValue(options.subdivisions, 128));\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (stackPartitions < 1) {\r\n            throw new DeveloperError('options.stackPartitions cannot be less than 1');\r\n        }\r\n        if (slicePartitions < 0) {\r\n            throw new DeveloperError('options.slicePartitions cannot be less than 0');\r\n        }\r\n        if (subdivisions < 0) {\r\n            throw new DeveloperError('options.subdivisions must be greater than or equal to zero.');\r\n        }\r\n        if (defined(options.offsetAttribute) && options.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n            throw new DeveloperError('GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        this._radii = Cartesian3.clone(radii);\r\n        this._innerRadii = Cartesian3.clone(innerRadii);\r\n        this._minimumClock = minimumClock;\r\n        this._maximumClock = maximumClock;\r\n        this._minimumCone = minimumCone;\r\n        this._maximumCone = maximumCone;\r\n        this._stackPartitions = stackPartitions;\r\n        this._slicePartitions = slicePartitions;\r\n        this._subdivisions = subdivisions;\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._workerName = 'createEllipsoidOutlineGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    EllipsoidOutlineGeometry.packedLength = 2 * (Cartesian3.packedLength) + 8;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {EllipsoidOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    EllipsoidOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(value)) {\r\n            throw new DeveloperError('value is required');\r\n        }\r\n        if (!defined(array)) {\r\n            throw new DeveloperError('array is required');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        Cartesian3.pack(value._radii, array, startingIndex);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        Cartesian3.pack(value._innerRadii, array, startingIndex);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        array[startingIndex++] = value._minimumClock;\r\n        array[startingIndex++] = value._maximumClock;\r\n        array[startingIndex++] = value._minimumCone;\r\n        array[startingIndex++] = value._maximumCone;\r\n        array[startingIndex++] = value._stackPartitions;\r\n        array[startingIndex++] = value._slicePartitions;\r\n        array[startingIndex++] = value._subdivisions;\r\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchRadii = new Cartesian3();\r\n    var scratchInnerRadii = new Cartesian3();\r\n    var scratchOptions = {\r\n        radii : scratchRadii,\r\n        innerRadii : scratchInnerRadii,\r\n        minimumClock : undefined,\r\n        maximumClock : undefined,\r\n        minimumCone : undefined,\r\n        maximumCone : undefined,\r\n        stackPartitions : undefined,\r\n        slicePartitions : undefined,\r\n        subdivisions : undefined,\r\n        offsetAttribute : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {EllipsoidOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {EllipsoidOutlineGeometry} The modified result parameter or a new EllipsoidOutlineGeometry instance if one was not provided.\r\n     */\r\n    EllipsoidOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(array)) {\r\n            throw new DeveloperError('array is required');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var radii = Cartesian3.unpack(array, startingIndex, scratchRadii);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        var innerRadii = Cartesian3.unpack(array, startingIndex, scratchInnerRadii);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        var minimumClock = array[startingIndex++];\r\n        var maximumClock = array[startingIndex++];\r\n        var minimumCone = array[startingIndex++];\r\n        var maximumCone = array[startingIndex++];\r\n        var stackPartitions = array[startingIndex++];\r\n        var slicePartitions = array[startingIndex++];\r\n        var subdivisions = array[startingIndex++];\r\n        var offsetAttribute = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.minimumClock = minimumClock;\r\n            scratchOptions.maximumClock = maximumClock;\r\n            scratchOptions.minimumCone = minimumCone;\r\n            scratchOptions.maximumCone = maximumCone;\r\n            scratchOptions.stackPartitions = stackPartitions;\r\n            scratchOptions.slicePartitions = slicePartitions;\r\n            scratchOptions.subdivisions = subdivisions;\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n            return new EllipsoidOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        result._radii = Cartesian3.clone(radii, result._radii);\r\n        result._innerRadii = Cartesian3.clone(innerRadii, result._innerRadii);\r\n        result._minimumClock = minimumClock;\r\n        result._maximumClock = maximumClock;\r\n        result._minimumCone = minimumCone;\r\n        result._maximumCone = maximumCone;\r\n        result._stackPartitions = stackPartitions;\r\n        result._slicePartitions = slicePartitions;\r\n        result._subdivisions = subdivisions;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of an outline of an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {EllipsoidOutlineGeometry} ellipsoidGeometry A description of the ellipsoid outline.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    EllipsoidOutlineGeometry.createGeometry = function(ellipsoidGeometry) {\r\n        var radii = ellipsoidGeometry._radii;\r\n        if ((radii.x <= 0) || (radii.y <= 0) || (radii.z <= 0)) {\r\n            return;\r\n        }\r\n\r\n        var innerRadii = ellipsoidGeometry._innerRadii;\r\n        if ((innerRadii.x <= 0) || (innerRadii.y <= 0) || (innerRadii.z <= 0)) {\r\n            return;\r\n        }\r\n\r\n        var minimumClock = ellipsoidGeometry._minimumClock;\r\n        var maximumClock = ellipsoidGeometry._maximumClock;\r\n        var minimumCone = ellipsoidGeometry._minimumCone;\r\n        var maximumCone = ellipsoidGeometry._maximumCone;\r\n        var subdivisions = ellipsoidGeometry._subdivisions;\r\n        var ellipsoid = Ellipsoid.fromCartesian3(radii);\r\n\r\n        // Add an extra slice and stack to remain consistent with EllipsoidGeometry\r\n        var slicePartitions = ellipsoidGeometry._slicePartitions + 1;\r\n        var stackPartitions = ellipsoidGeometry._stackPartitions + 1;\r\n\r\n        slicePartitions = Math.round(slicePartitions * Math.abs(maximumClock - minimumClock) / CesiumMath.TWO_PI);\r\n        stackPartitions = Math.round(stackPartitions * Math.abs(maximumCone - minimumCone) / CesiumMath.PI);\r\n\r\n        if (slicePartitions < 2) {\r\n            slicePartitions = 2;\r\n        }\r\n        if (stackPartitions < 2) {\r\n            stackPartitions = 2;\r\n        }\r\n\r\n        var extraIndices = 0;\r\n        var vertexMultiplier = 1.0;\r\n        var hasInnerSurface = ((innerRadii.x !== radii.x) || (innerRadii.y !== radii.y) || innerRadii.z !== radii.z);\r\n        var isTopOpen = false;\r\n        var isBotOpen = false;\r\n        if (hasInnerSurface) {\r\n            vertexMultiplier = 2.0;\r\n            // Add 2x slicePartitions to connect the top/bottom of the outer to\r\n            // the top/bottom of the inner\r\n            if (minimumCone > 0.0) {\r\n                isTopOpen = true;\r\n                extraIndices += slicePartitions;\r\n            }\r\n            if (maximumCone < Math.PI) {\r\n                isBotOpen = true;\r\n                extraIndices += slicePartitions;\r\n            }\r\n        }\r\n\r\n        var vertexCount = subdivisions * vertexMultiplier * (stackPartitions + slicePartitions);\r\n        var positions = new Float64Array(vertexCount * 3);\r\n\r\n        // Multiply by two because two points define each line segment\r\n        var numIndices = 2 * (vertexCount + extraIndices - (slicePartitions + stackPartitions) * vertexMultiplier);\r\n        var indices = IndexDatatype.createTypedArray(vertexCount, numIndices);\r\n\r\n        var i;\r\n        var j;\r\n        var theta;\r\n        var phi;\r\n        var index = 0;\r\n\r\n        // Calculate sin/cos phi\r\n        var sinPhi = new Array(stackPartitions);\r\n        var cosPhi = new Array(stackPartitions);\r\n        for (i = 0; i < stackPartitions; i++) {\r\n            phi = minimumCone + i * (maximumCone - minimumCone) / (stackPartitions - 1);\r\n            sinPhi[i] = sin(phi);\r\n            cosPhi[i] = cos(phi);\r\n        }\r\n\r\n        // Calculate sin/cos theta\r\n        var sinTheta = new Array(subdivisions);\r\n        var cosTheta = new Array(subdivisions);\r\n        for (i = 0; i < subdivisions; i++) {\r\n            theta = minimumClock + i * (maximumClock - minimumClock) / (subdivisions - 1);\r\n            sinTheta[i] = sin(theta);\r\n            cosTheta[i] = cos(theta);\r\n        }\r\n\r\n        // Calculate the latitude lines on the outer surface\r\n        for (i = 0; i < stackPartitions; i++) {\r\n            for (j = 0; j < subdivisions; j++) {\r\n                positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\r\n                positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\r\n                positions[index++] = radii.z * cosPhi[i];\r\n            }\r\n        }\r\n\r\n        // Calculate the latitude lines on the inner surface\r\n        if (hasInnerSurface) {\r\n            for (i = 0; i < stackPartitions; i++) {\r\n                for (j = 0; j < subdivisions; j++) {\r\n                    positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\r\n                    positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\r\n                    positions[index++] = innerRadii.z * cosPhi[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        // Calculate sin/cos phi\r\n        sinPhi.length = subdivisions;\r\n        cosPhi.length = subdivisions;\r\n        for (i = 0; i < subdivisions; i++) {\r\n            phi = minimumCone + i * (maximumCone - minimumCone) / (subdivisions - 1);\r\n            sinPhi[i] = sin(phi);\r\n            cosPhi[i] = cos(phi);\r\n        }\r\n\r\n        // Calculate sin/cos theta for each slice partition\r\n        sinTheta.length = slicePartitions;\r\n        cosTheta.length = slicePartitions;\r\n        for (i = 0; i < slicePartitions; i++) {\r\n            theta = minimumClock + i * (maximumClock - minimumClock) / (slicePartitions - 1);\r\n            sinTheta[i] = sin(theta);\r\n            cosTheta[i] = cos(theta);\r\n        }\r\n\r\n        // Calculate the longitude lines on the outer surface\r\n        for (i = 0; i < subdivisions; i++) {\r\n            for (j = 0; j < slicePartitions; j++) {\r\n                positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\r\n                positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\r\n                positions[index++] = radii.z * cosPhi[i];\r\n            }\r\n        }\r\n\r\n        // Calculate the longitude lines on the inner surface\r\n        if (hasInnerSurface) {\r\n            for (i = 0; i < subdivisions; i++) {\r\n                for (j = 0; j < slicePartitions; j++) {\r\n                    positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\r\n                    positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\r\n                    positions[index++] = innerRadii.z * cosPhi[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        // Create indices for the latitude lines\r\n        index = 0;\r\n        for (i = 0; i < stackPartitions * vertexMultiplier; i++) {\r\n            var topOffset = i * subdivisions;\r\n            for (j = 0; j < subdivisions - 1; j++) {\r\n                indices[index++] = topOffset + j;\r\n                indices[index++] = topOffset + j + 1;\r\n            }\r\n        }\r\n\r\n        // Create indices for the outer longitude lines\r\n        var offset = stackPartitions * subdivisions * vertexMultiplier;\r\n        for (i = 0; i < slicePartitions; i++) {\r\n            for (j = 0; j < subdivisions - 1; j++) {\r\n                indices[index++] = offset + i + (j * slicePartitions);\r\n                indices[index++] = offset + i + (j + 1) * slicePartitions;\r\n            }\r\n        }\r\n\r\n        // Create indices for the inner longitude lines\r\n        if (hasInnerSurface) {\r\n            offset = stackPartitions * subdivisions * vertexMultiplier + slicePartitions * subdivisions;\r\n            for (i = 0; i < slicePartitions; i++) {\r\n                for (j = 0; j < subdivisions - 1; j++) {\r\n                    indices[index++] = offset + i + (j * slicePartitions);\r\n                    indices[index++] = offset + i + (j + 1) * slicePartitions;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (hasInnerSurface) {\r\n            var outerOffset = stackPartitions * subdivisions * vertexMultiplier;\r\n            var innerOffset = outerOffset + (subdivisions * slicePartitions);\r\n            if (isTopOpen) {\r\n                // Draw lines from the top of the inner surface to the top of the outer surface\r\n                for (i = 0; i < slicePartitions; i++) {\r\n                    indices[index++] = outerOffset + i;\r\n                    indices[index++] = innerOffset + i;\r\n                }\r\n            }\r\n\r\n            if (isBotOpen) {\r\n                // Draw lines from the top of the inner surface to the top of the outer surface\r\n                outerOffset += (subdivisions * slicePartitions) - slicePartitions;\r\n                innerOffset += (subdivisions * slicePartitions) - slicePartitions;\r\n                for (i = 0; i < slicePartitions; i++) {\r\n                    indices[index++] = outerOffset + i;\r\n                    indices[index++] = innerOffset + i;\r\n                }\r\n            }\r\n        }\r\n\r\n        var attributes = new GeometryAttributes({\r\n            position : new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : positions\r\n            })\r\n        });\r\n\r\n        if (defined(ellipsoidGeometry._offsetAttribute)) {\r\n            var length = positions.length;\r\n            var applyOffset = new Uint8Array(length / 3);\r\n            var offsetValue = ellipsoidGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            arrayFill(applyOffset, offsetValue);\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values : applyOffset\r\n            });\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.LINES,\r\n            boundingSphere : BoundingSphere.fromEllipsoid(ellipsoid),\r\n            offsetAttribute : ellipsoidGeometry._offsetAttribute\r\n        });\r\n    };\r\nexport default EllipsoidOutlineGeometry;\r\n"],"names":["Cartesian3","defaultValue","CesiumMath","DeveloperError","defined","GeometryOffsetAttribute","Ellipsoid","IndexDatatype","GeometryAttributes","GeometryAttribute","ComponentDatatype","arrayFill","Geometry","PrimitiveType","BoundingSphere"],"mappings":"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"}