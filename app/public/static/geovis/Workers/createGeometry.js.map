{"version":3,"file":"createGeometry.js","sources":["../../../../Source/WorkersES6/createGeometry.js"],"sourcesContent":["/* global require */\r\nimport defined from '../Core/defined.js';\r\nimport PrimitivePipeline from '../Scene/PrimitivePipeline.js';\r\nimport when from '../ThirdParty/when.js';\r\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\r\n\r\n    var moduleCache = {};\r\n\r\n    function getModule(moduleName) {\r\n        var module = moduleCache[moduleName];\r\n        if (!defined(module)) {\r\n            if (typeof exports === 'object') {\r\n                // Use CommonJS-style require.\r\n                moduleCache[module] = module = require('Workers/' + moduleName);\r\n            } else {\r\n                // Use AMD-style require.\r\n                // in web workers, require is synchronous\r\n                require(['Workers/' + moduleName], function(f) {\r\n                    module = f;\r\n                    moduleCache[module] = f;\r\n                });\r\n            }\r\n        }\r\n        return module;\r\n    }\r\n\r\n    function createGeometry(parameters, transferableObjects) {\r\n        var subTasks = parameters.subTasks;\r\n        var length = subTasks.length;\r\n        var resultsOrPromises = new Array(length);\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            var task = subTasks[i];\r\n            var geometry = task.geometry;\r\n            var moduleName = task.moduleName;\r\n\r\n            if (defined(moduleName)) {\r\n                var createFunction = getModule(moduleName);\r\n                resultsOrPromises[i] = createFunction(geometry, task.offset);\r\n            } else {\r\n                //Already created geometry\r\n                resultsOrPromises[i] = geometry;\r\n            }\r\n        }\r\n\r\n        return when.all(resultsOrPromises, function(results) {\r\n            return PrimitivePipeline.packCreateGeometryResults(results, transferableObjects);\r\n        });\r\n    }\r\nexport default createTaskProcessorWorker(createGeometry);\r\n"],"names":["defined","when","PrimitivePipeline"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAAA;AACA,AAIA;IACA,IAAI,IAAI,WAAW,GAAG,EAAE,CAAC;;IAEzB,IAAI,SAAS,SAAS,CAAC,UAAU,EAAE;IACnC,QAAQ,IAAI,MAAM,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;IAC7C,QAAQ,IAAI,CAACA,eAAO,CAAC,MAAM,CAAC,EAAE;IAC9B,YAAY,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;IAC7C;IACA,gBAAgB,WAAW,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,OAAO,CAAC,UAAU,GAAG,UAAU,CAAC,CAAC;IAChF,aAAa,MAAM;IACnB;IACA;IACA,gBAAgB,OAAO,CAAC,CAAC,UAAU,GAAG,UAAU,CAAC,EAAE,SAAS,CAAC,EAAE;IAC/D,oBAAoB,MAAM,GAAG,CAAC,CAAC;IAC/B,oBAAoB,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC5C,iBAAiB,CAAC,CAAC;IACnB,aAAa;IACb,SAAS;IACT,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK;;IAEL,IAAI,SAAS,cAAc,CAAC,UAAU,EAAE,mBAAmB,EAAE;IAC7D,QAAQ,IAAI,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;IAC3C,QAAQ,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;IACrC,QAAQ,IAAI,iBAAiB,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;;IAElD,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;IACzC,YAAY,IAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IACnC,YAAY,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;IACzC,YAAY,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;;IAE7C,YAAY,IAAIA,eAAO,CAAC,UAAU,CAAC,EAAE;IACrC,gBAAgB,IAAI,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC3D,gBAAgB,iBAAiB,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7E,aAAa,MAAM;IACnB;IACA,gBAAgB,iBAAiB,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;IAChD,aAAa;IACb,SAAS;;IAET,QAAQ,OAAOC,SAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,SAAS,OAAO,EAAE;IAC7D,YAAY,OAAOC,mCAAiB,CAAC,yBAAyB,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;IAC7F,SAAS,CAAC,CAAC;IACX,KAAK;AACL,2BAAe,yBAAyB,CAAC,cAAc,CAAC,CAAC;;;;;;;;"}