{"version":3,"file":"createPolygonGeometry.js","sources":["../../../../Source/Core/PolygonGeometry.js","../../../../Source/WorkersES6/createPolygonGeometry.js"],"sourcesContent":["import ArcType from './ArcType.js';\r\nimport arrayFill from './arrayFill.js';\r\nimport BoundingRectangle from './BoundingRectangle.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport Check from './Check.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport EllipsoidGeodesic from './EllipsoidGeodesic.js';\r\nimport EllipsoidTangentPlane from './EllipsoidTangentPlane.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryInstance from './GeometryInstance.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport GeometryPipeline from './GeometryPipeline.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix3 from './Matrix3.js';\r\nimport PolygonGeometryLibrary from './PolygonGeometryLibrary.js';\r\nimport PolygonPipeline from './PolygonPipeline.js';\r\nimport Quaternion from './Quaternion.js';\r\nimport Rectangle from './Rectangle.js';\r\nimport VertexFormat from './VertexFormat.js';\r\nimport WindingOrder from './WindingOrder.js';\r\n\r\n    var scratchCarto1 = new Cartographic();\r\n    var scratchCarto2 = new Cartographic();\r\n    function adjustPosHeightsForNormal(position, p1, p2, ellipsoid) {\r\n        var carto1 = ellipsoid.cartesianToCartographic(position, scratchCarto1);\r\n        var height = carto1.height;\r\n        var p1Carto = ellipsoid.cartesianToCartographic(p1, scratchCarto2);\r\n        p1Carto.height = height;\r\n        ellipsoid.cartographicToCartesian(p1Carto, p1);\r\n\r\n        var p2Carto = ellipsoid.cartesianToCartographic(p2, scratchCarto2);\r\n        p2Carto.height = height - 100;\r\n        ellipsoid.cartographicToCartesian(p2Carto, p2);\r\n    }\r\n\r\n    var scratchBoundingRectangle = new BoundingRectangle();\r\n    var scratchPosition = new Cartesian3();\r\n    var scratchNormal = new Cartesian3();\r\n    var scratchTangent = new Cartesian3();\r\n    var scratchBitangent = new Cartesian3();\r\n    var p1Scratch = new Cartesian3();\r\n    var p2Scratch = new Cartesian3();\r\n    var scratchPerPosNormal = new Cartesian3();\r\n    var scratchPerPosTangent = new Cartesian3();\r\n    var scratchPerPosBitangent = new Cartesian3();\r\n\r\n    var appendTextureCoordinatesOrigin = new Cartesian2();\r\n    var appendTextureCoordinatesCartesian2 = new Cartesian2();\r\n    var appendTextureCoordinatesCartesian3 = new Cartesian3();\r\n    var appendTextureCoordinatesQuaternion = new Quaternion();\r\n    var appendTextureCoordinatesMatrix3 = new Matrix3();\r\n    var tangentMatrixScratch = new Matrix3();\r\n\r\n    function computeAttributes(options) {\r\n        var vertexFormat = options.vertexFormat;\r\n        var geometry = options.geometry;\r\n        var shadowVolume = options.shadowVolume;\r\n        var flatPositions = geometry.attributes.position.values;\r\n        var length = flatPositions.length;\r\n        var wall = options.wall;\r\n        var top = options.top || wall;\r\n        var bottom = options.bottom || wall;\r\n        if (vertexFormat.st || vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent || shadowVolume) {\r\n            // PERFORMANCE_IDEA: Compute before subdivision, then just interpolate during subdivision.\r\n            // PERFORMANCE_IDEA: Compute with createGeometryFromPositions() for fast path when there's no holes.\r\n            var boundingRectangle = options.boundingRectangle;\r\n            var tangentPlane = options.tangentPlane;\r\n            var ellipsoid = options.ellipsoid;\r\n            var stRotation = options.stRotation;\r\n            var perPositionHeight = options.perPositionHeight;\r\n\r\n            var origin = appendTextureCoordinatesOrigin;\r\n            origin.x = boundingRectangle.x;\r\n            origin.y = boundingRectangle.y;\r\n\r\n            var textureCoordinates = vertexFormat.st ? new Float32Array(2 * (length / 3)) : undefined;\r\n            var normals;\r\n            if (vertexFormat.normal) {\r\n                if (perPositionHeight && top && !wall) {\r\n                    normals = geometry.attributes.normal.values;\r\n                } else {\r\n                    normals = new Float32Array(length);\r\n                }\r\n            }\r\n            var tangents = vertexFormat.tangent ? new Float32Array(length) : undefined;\r\n            var bitangents = vertexFormat.bitangent ? new Float32Array(length) : undefined;\r\n            var extrudeNormals = shadowVolume ? new Float32Array(length) : undefined;\r\n\r\n            var textureCoordIndex = 0;\r\n            var attrIndex = 0;\r\n\r\n            var normal = scratchNormal;\r\n            var tangent = scratchTangent;\r\n            var bitangent = scratchBitangent;\r\n            var recomputeNormal = true;\r\n\r\n            var textureMatrix = appendTextureCoordinatesMatrix3;\r\n            var tangentRotationMatrix = tangentMatrixScratch;\r\n            if (stRotation !== 0.0) {\r\n                var rotation = Quaternion.fromAxisAngle(tangentPlane._plane.normal, stRotation, appendTextureCoordinatesQuaternion);\r\n                textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\r\n\r\n                rotation = Quaternion.fromAxisAngle(tangentPlane._plane.normal, -stRotation, appendTextureCoordinatesQuaternion);\r\n                tangentRotationMatrix = Matrix3.fromQuaternion(rotation, tangentRotationMatrix);\r\n            } else {\r\n                textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\r\n                tangentRotationMatrix = Matrix3.clone(Matrix3.IDENTITY, tangentRotationMatrix);\r\n            }\r\n\r\n            var bottomOffset = 0;\r\n            var bottomOffset2 = 0;\r\n\r\n            if (top && bottom) {\r\n                bottomOffset = length / 2;\r\n                bottomOffset2 = length / 3;\r\n\r\n                length /= 2;\r\n            }\r\n\r\n            for ( var i = 0; i < length; i += 3) {\r\n                var position = Cartesian3.fromArray(flatPositions, i, appendTextureCoordinatesCartesian3);\r\n\r\n                if (vertexFormat.st) {\r\n                    var p = Matrix3.multiplyByVector(textureMatrix, position, scratchPosition);\r\n                    p = ellipsoid.scaleToGeodeticSurface(p,p);\r\n                    var st = tangentPlane.projectPointOntoPlane(p, appendTextureCoordinatesCartesian2);\r\n                    Cartesian2.subtract(st, origin, st);\r\n\r\n                    var stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\r\n                    var sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\r\n                    if (bottom) {\r\n                        textureCoordinates[textureCoordIndex + bottomOffset2] = stx;\r\n                        textureCoordinates[textureCoordIndex + 1 + bottomOffset2] = sty;\r\n                    }\r\n                    if (top) {\r\n                        textureCoordinates[textureCoordIndex] = stx;\r\n                        textureCoordinates[textureCoordIndex + 1] = sty;\r\n                    }\r\n\r\n                    textureCoordIndex += 2;\r\n                }\r\n\r\n                if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent || shadowVolume) {\r\n                    var attrIndex1 = attrIndex + 1;\r\n                    var attrIndex2 = attrIndex + 2;\r\n\r\n                    if (wall) {\r\n                        if (i + 3 < length) {\r\n                            var p1 = Cartesian3.fromArray(flatPositions, i + 3, p1Scratch);\r\n\r\n                            if (recomputeNormal) {\r\n                                var p2 = Cartesian3.fromArray(flatPositions, i + length, p2Scratch);\r\n                                if (perPositionHeight) {\r\n                                    adjustPosHeightsForNormal(position, p1, p2, ellipsoid);\r\n                                }\r\n                                Cartesian3.subtract(p1, position, p1);\r\n                                Cartesian3.subtract(p2, position, p2);\r\n                                normal = Cartesian3.normalize(Cartesian3.cross(p2, p1, normal), normal);\r\n                                recomputeNormal = false;\r\n                            }\r\n\r\n                            if (Cartesian3.equalsEpsilon(p1, position, CesiumMath.EPSILON10)) { // if we've reached a corner\r\n                                recomputeNormal = true;\r\n                            }\r\n                        }\r\n\r\n                        if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n                            bitangent = ellipsoid.geodeticSurfaceNormal(position, bitangent);\r\n                            if (vertexFormat.tangent) {\r\n                                tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n                        if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n                            if (perPositionHeight) {\r\n                                scratchPerPosNormal = Cartesian3.fromArray(normals, attrIndex, scratchPerPosNormal);\r\n                                scratchPerPosTangent = Cartesian3.cross(Cartesian3.UNIT_Z, scratchPerPosNormal, scratchPerPosTangent);\r\n                                scratchPerPosTangent = Cartesian3.normalize(Matrix3.multiplyByVector(tangentRotationMatrix, scratchPerPosTangent, scratchPerPosTangent), scratchPerPosTangent);\r\n                                if (vertexFormat.bitangent) {\r\n                                    scratchPerPosBitangent = Cartesian3.normalize(Cartesian3.cross(scratchPerPosNormal, scratchPerPosTangent, scratchPerPosBitangent), scratchPerPosBitangent);\r\n                                }\r\n                            }\r\n\r\n                            tangent = Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent);\r\n                            tangent = Cartesian3.normalize(Matrix3.multiplyByVector(tangentRotationMatrix, tangent, tangent), tangent);\r\n                            if (vertexFormat.bitangent) {\r\n                                bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (vertexFormat.normal) {\r\n                        if (options.wall) {\r\n                            normals[attrIndex + bottomOffset] = normal.x;\r\n                            normals[attrIndex1 + bottomOffset] = normal.y;\r\n                            normals[attrIndex2 + bottomOffset] = normal.z;\r\n                        } else if (bottom){\r\n                            normals[attrIndex + bottomOffset] = -normal.x;\r\n                            normals[attrIndex1 + bottomOffset] = -normal.y;\r\n                            normals[attrIndex2 + bottomOffset] = -normal.z;\r\n                        }\r\n\r\n                        if ((top && !perPositionHeight) || wall) {\r\n                            normals[attrIndex] = normal.x;\r\n                            normals[attrIndex1] = normal.y;\r\n                            normals[attrIndex2] = normal.z;\r\n                        }\r\n                    }\r\n\r\n                    if (shadowVolume) {\r\n                        if (wall) {\r\n                            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n                        }\r\n                        extrudeNormals[attrIndex + bottomOffset] = -normal.x;\r\n                        extrudeNormals[attrIndex1 + bottomOffset] = -normal.y;\r\n                        extrudeNormals[attrIndex2 + bottomOffset] = -normal.z;\r\n                    }\r\n\r\n                    if (vertexFormat.tangent) {\r\n                        if (options.wall) {\r\n                            tangents[attrIndex + bottomOffset] = tangent.x;\r\n                            tangents[attrIndex1 + bottomOffset] = tangent.y;\r\n                            tangents[attrIndex2 + bottomOffset] = tangent.z;\r\n                        } else if (bottom) {\r\n                            tangents[attrIndex + bottomOffset] = -tangent.x;\r\n                            tangents[attrIndex1 + bottomOffset] = -tangent.y;\r\n                            tangents[attrIndex2 + bottomOffset] = -tangent.z;\r\n                        }\r\n\r\n                        if(top) {\r\n                            if (perPositionHeight) {\r\n                                tangents[attrIndex] = scratchPerPosTangent.x;\r\n                                tangents[attrIndex1] = scratchPerPosTangent.y;\r\n                                tangents[attrIndex2] = scratchPerPosTangent.z;\r\n                            } else {\r\n                                tangents[attrIndex] = tangent.x;\r\n                                tangents[attrIndex1] = tangent.y;\r\n                                tangents[attrIndex2] = tangent.z;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (vertexFormat.bitangent) {\r\n                        if (bottom) {\r\n                            bitangents[attrIndex + bottomOffset] = bitangent.x;\r\n                            bitangents[attrIndex1 + bottomOffset] = bitangent.y;\r\n                            bitangents[attrIndex2 + bottomOffset] = bitangent.z;\r\n                        }\r\n                        if (top) {\r\n                            if (perPositionHeight) {\r\n                                bitangents[attrIndex] = scratchPerPosBitangent.x;\r\n                                bitangents[attrIndex1] = scratchPerPosBitangent.y;\r\n                                bitangents[attrIndex2] = scratchPerPosBitangent.z;\r\n                            } else {\r\n                                bitangents[attrIndex] = bitangent.x;\r\n                                bitangents[attrIndex1] = bitangent.y;\r\n                                bitangents[attrIndex2] = bitangent.z;\r\n                            }\r\n                        }\r\n                    }\r\n                    attrIndex += 3;\r\n                }\r\n            }\r\n\r\n            if (vertexFormat.st) {\r\n                geometry.attributes.st = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 2,\r\n                    values : textureCoordinates\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.normal) {\r\n                geometry.attributes.normal = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : normals\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.tangent) {\r\n                geometry.attributes.tangent = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : tangents\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.bitangent) {\r\n                geometry.attributes.bitangent = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : bitangents\r\n                });\r\n            }\r\n\r\n            if (shadowVolume) {\r\n                geometry.attributes.extrudeDirection = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : extrudeNormals\r\n                });\r\n            }\r\n        }\r\n\r\n        if (options.extrude && defined(options.offsetAttribute)) {\r\n            var size = flatPositions.length / 3;\r\n            var offsetAttribute = new Uint8Array(size);\r\n\r\n            if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n                if ((top && bottom) || wall) {\r\n                    offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n                } else if (top) {\r\n                    offsetAttribute = arrayFill(offsetAttribute, 1);\r\n                }\r\n            } else {\r\n                var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n            }\r\n\r\n            geometry.attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values : offsetAttribute\r\n            });\r\n        }\r\n\r\n        return geometry;\r\n    }\r\n\r\n    var startCartographicScratch = new Cartographic();\r\n    var endCartographicScratch = new Cartographic();\r\n    var idlCross = {\r\n        westOverIDL : 0.0,\r\n        eastOverIDL : 0.0\r\n    };\r\n    var ellipsoidGeodesic = new EllipsoidGeodesic();\r\n    function computeRectangle(positions, ellipsoid, arcType, granularity, result) {\r\n        result = defaultValue(result, new Rectangle());\r\n        if (!defined(positions) || positions.length < 3) {\r\n            result.west = 0.0;\r\n            result.north = 0.0;\r\n            result.south = 0.0;\r\n            result.east = 0.0;\r\n            return result;\r\n        }\r\n\r\n        if (arcType === ArcType.RHUMB) {\r\n            return Rectangle.fromCartesianArray(positions, ellipsoid, result);\r\n        }\r\n\r\n        if (!ellipsoidGeodesic.ellipsoid.equals(ellipsoid)) {\r\n            ellipsoidGeodesic = new EllipsoidGeodesic(undefined, undefined, ellipsoid);\r\n        }\r\n\r\n        result.west = Number.POSITIVE_INFINITY;\r\n        result.east = Number.NEGATIVE_INFINITY;\r\n        result.south = Number.POSITIVE_INFINITY;\r\n        result.north = Number.NEGATIVE_INFINITY;\r\n\r\n        idlCross.westOverIDL = Number.POSITIVE_INFINITY;\r\n        idlCross.eastOverIDL = Number.NEGATIVE_INFINITY;\r\n\r\n        var inverseChordLength = 1.0 / CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n        var positionsLength = positions.length;\r\n        var endCartographic = ellipsoid.cartesianToCartographic(positions[0], endCartographicScratch);\r\n        var startCartographic = startCartographicScratch;\r\n        var swap;\r\n\r\n        for (var i = 1; i < positionsLength; i++) {\r\n            swap = startCartographic;\r\n            startCartographic = endCartographic;\r\n            endCartographic = ellipsoid.cartesianToCartographic(positions[i], swap);\r\n            ellipsoidGeodesic.setEndPoints(startCartographic, endCartographic);\r\n            interpolateAndGrowRectangle(ellipsoidGeodesic, inverseChordLength, result, idlCross);\r\n        }\r\n\r\n        swap = startCartographic;\r\n        startCartographic = endCartographic;\r\n        endCartographic = ellipsoid.cartesianToCartographic(positions[0], swap);\r\n        ellipsoidGeodesic.setEndPoints(startCartographic, endCartographic);\r\n        interpolateAndGrowRectangle(ellipsoidGeodesic, inverseChordLength, result, idlCross);\r\n\r\n        if (result.east - result.west > idlCross.eastOverIDL - idlCross.westOverIDL) {\r\n            result.west = idlCross.westOverIDL;\r\n            result.east = idlCross.eastOverIDL;\r\n\r\n            if (result.east > CesiumMath.PI) {\r\n                result.east = result.east - CesiumMath.TWO_PI;\r\n            }\r\n            if (result.west > CesiumMath.PI) {\r\n                result.west = result.west - CesiumMath.TWO_PI;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    var interpolatedCartographicScratch = new Cartographic();\r\n    function interpolateAndGrowRectangle(ellipsoidGeodesic, inverseChordLength, result, idlCross) {\r\n        var segmentLength = ellipsoidGeodesic.surfaceDistance;\r\n\r\n        var numPoints = Math.ceil(segmentLength * inverseChordLength);\r\n        var subsegmentDistance = numPoints > 0 ? segmentLength / (numPoints - 1) : Number.POSITIVE_INFINITY;\r\n        var interpolationDistance = 0.0;\r\n\r\n        for (var i = 0; i < numPoints; i++) {\r\n            var interpolatedCartographic = ellipsoidGeodesic.interpolateUsingSurfaceDistance(interpolationDistance, interpolatedCartographicScratch);\r\n            interpolationDistance += subsegmentDistance;\r\n            var longitude = interpolatedCartographic.longitude;\r\n            var latitude = interpolatedCartographic.latitude;\r\n\r\n            result.west = Math.min(result.west, longitude);\r\n            result.east = Math.max(result.east, longitude);\r\n            result.south = Math.min(result.south, latitude);\r\n            result.north = Math.max(result.north, latitude);\r\n\r\n            var lonAdjusted = longitude >= 0 ?  longitude : longitude +  CesiumMath.TWO_PI;\r\n            idlCross.westOverIDL = Math.min(idlCross.westOverIDL, lonAdjusted);\r\n            idlCross.eastOverIDL = Math.max(idlCross.eastOverIDL, lonAdjusted);\r\n        }\r\n    }\r\n\r\n    var createGeometryFromPositionsExtrudedPositions = [];\r\n\r\n    function createGeometryFromPositionsExtruded(ellipsoid, polygon, granularity, hierarchy, perPositionHeight, closeTop, closeBottom, vertexFormat, arcType) {\r\n        var geos = {\r\n            walls : []\r\n        };\r\n        var i;\r\n\r\n        if (closeTop || closeBottom) {\r\n            var topGeo = PolygonGeometryLibrary.createGeometryFromPositions(ellipsoid, polygon, granularity, perPositionHeight, vertexFormat, arcType);\r\n\r\n            var edgePoints = topGeo.attributes.position.values;\r\n            var indices = topGeo.indices;\r\n            var numPositions;\r\n            var newIndices;\r\n\r\n            if (closeTop && closeBottom) {\r\n                var topBottomPositions = edgePoints.concat(edgePoints);\r\n\r\n                numPositions = topBottomPositions.length / 3;\r\n\r\n                newIndices = IndexDatatype.createTypedArray(numPositions, indices.length * 2);\r\n                newIndices.set(indices);\r\n                var ilength = indices.length;\r\n\r\n                var length = numPositions / 2;\r\n\r\n                for (i = 0; i < ilength; i += 3) {\r\n                    var i0 = newIndices[i] + length;\r\n                    var i1 = newIndices[i + 1] + length;\r\n                    var i2 = newIndices[i + 2] + length;\r\n\r\n                    newIndices[i + ilength] = i2;\r\n                    newIndices[i + 1 + ilength] = i1;\r\n                    newIndices[i + 2 + ilength] = i0;\r\n                }\r\n\r\n                topGeo.attributes.position.values = topBottomPositions;\r\n                if (perPositionHeight && vertexFormat.normal) {\r\n                    var normals = topGeo.attributes.normal.values;\r\n                    topGeo.attributes.normal.values = new Float32Array(topBottomPositions.length);\r\n                    topGeo.attributes.normal.values.set(normals);\r\n                }\r\n                topGeo.indices = newIndices;\r\n            } else if (closeBottom) {\r\n                numPositions = edgePoints.length / 3;\r\n                newIndices = IndexDatatype.createTypedArray(numPositions, indices.length);\r\n\r\n                for (i = 0; i < indices.length; i += 3) {\r\n                    newIndices[i] = indices[i + 2];\r\n                    newIndices[i + 1] = indices[i + 1];\r\n                    newIndices[i + 2] = indices[i];\r\n                }\r\n\r\n                topGeo.indices = newIndices;\r\n            }\r\n\r\n            geos.topAndBottom = new GeometryInstance({\r\n                geometry : topGeo\r\n            });\r\n        }\r\n\r\n        var outerRing = hierarchy.outerRing;\r\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(outerRing, ellipsoid);\r\n        var positions2D = tangentPlane.projectPointsOntoPlane(outerRing, createGeometryFromPositionsExtrudedPositions);\r\n\r\n        var windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\r\n        if (windingOrder === WindingOrder.CLOCKWISE) {\r\n            outerRing = outerRing.slice().reverse();\r\n        }\r\n\r\n        var wallGeo = PolygonGeometryLibrary.computeWallGeometry(outerRing, ellipsoid, granularity, perPositionHeight, arcType);\r\n        geos.walls.push(new GeometryInstance({\r\n            geometry : wallGeo\r\n        }));\r\n\r\n        var holes = hierarchy.holes;\r\n        for (i = 0; i < holes.length; i++) {\r\n            var hole = holes[i];\r\n\r\n            tangentPlane = EllipsoidTangentPlane.fromPoints(hole, ellipsoid);\r\n            positions2D = tangentPlane.projectPointsOntoPlane(hole, createGeometryFromPositionsExtrudedPositions);\r\n\r\n            windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\r\n            if (windingOrder === WindingOrder.COUNTER_CLOCKWISE) {\r\n                hole = hole.slice().reverse();\r\n            }\r\n\r\n            wallGeo = PolygonGeometryLibrary.computeWallGeometry(hole, ellipsoid, granularity, perPositionHeight, arcType);\r\n            geos.walls.push(new GeometryInstance({\r\n                geometry : wallGeo\r\n            }));\r\n        }\r\n\r\n        return geos;\r\n    }\r\n\r\n    /**\r\n     * A description of a polygon on the ellipsoid. The polygon is defined by a polygon hierarchy. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n     *\r\n     * @alias PolygonGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\r\n     * @param {Number} [options.height=0.0] The distance in meters between the polygon and the ellipsoid surface.\r\n     * @param {Number} [options.extrudedHeight] The distance in meters between the polygon's extruded face and the ellipsoid surface.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\r\n     * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\r\n     * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\r\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\r\n     *\r\n     * @see PolygonGeometry#createGeometry\r\n     * @see PolygonGeometry#fromPositions\r\n     *\r\n     * @demo {@link https://sandcastle.cesium.com/index.html?src=Polygon.html|Cesium Sandcastle Polygon Demo}\r\n     *\r\n     * @example\r\n     * // 1. create a polygon from points\r\n     * var polygon = new Cesium.PolygonGeometry({\r\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n     *     Cesium.Cartesian3.fromDegreesArray([\r\n     *       -72.0, 40.0,\r\n     *       -70.0, 35.0,\r\n     *       -75.0, 30.0,\r\n     *       -70.0, 30.0,\r\n     *       -68.0, 40.0\r\n     *     ])\r\n     *   )\r\n     * });\r\n     * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\r\n     *\r\n     * // 2. create a nested polygon with holes\r\n     * var polygonWithHole = new Cesium.PolygonGeometry({\r\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n     *     Cesium.Cartesian3.fromDegreesArray([\r\n     *       -109.0, 30.0,\r\n     *       -95.0, 30.0,\r\n     *       -95.0, 40.0,\r\n     *       -109.0, 40.0\r\n     *     ]),\r\n     *     [new Cesium.PolygonHierarchy(\r\n     *       Cesium.Cartesian3.fromDegreesArray([\r\n     *         -107.0, 31.0,\r\n     *         -107.0, 39.0,\r\n     *         -97.0, 39.0,\r\n     *         -97.0, 31.0\r\n     *       ]),\r\n     *       [new Cesium.PolygonHierarchy(\r\n     *         Cesium.Cartesian3.fromDegreesArray([\r\n     *           -105.0, 33.0,\r\n     *           -99.0, 33.0,\r\n     *           -99.0, 37.0,\r\n     *           -105.0, 37.0\r\n     *         ]),\r\n     *         [new Cesium.PolygonHierarchy(\r\n     *           Cesium.Cartesian3.fromDegreesArray([\r\n     *             -103.0, 34.0,\r\n     *             -101.0, 34.0,\r\n     *             -101.0, 36.0,\r\n     *             -103.0, 36.0\r\n     *           ])\r\n     *         )]\r\n     *       )]\r\n     *     )]\r\n     *   )\r\n     * });\r\n     * var geometry = Cesium.PolygonGeometry.createGeometry(polygonWithHole);\r\n     *\r\n     * // 3. create extruded polygon\r\n     * var extrudedPolygon = new Cesium.PolygonGeometry({\r\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n     *     Cesium.Cartesian3.fromDegreesArray([\r\n     *       -72.0, 40.0,\r\n     *       -70.0, 35.0,\r\n     *       -75.0, 30.0,\r\n     *       -70.0, 30.0,\r\n     *       -68.0, 40.0\r\n     *     ])\r\n     *   ),\r\n     *   extrudedHeight: 300000\r\n     * });\r\n     * var geometry = Cesium.PolygonGeometry.createGeometry(extrudedPolygon);\r\n     */\r\n    function PolygonGeometry(options) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('options', options);\r\n        Check.typeOf.object('options.polygonHierarchy', options.polygonHierarchy);\r\n        if (defined(options.perPositionHeight) && options.perPositionHeight && defined(options.height)) {\r\n            throw new DeveloperError('Cannot use both options.perPositionHeight and options.height');\r\n        }\r\n        if (defined(options.arcType) && options.arcType !== ArcType.GEODESIC && options.arcType !== ArcType.RHUMB) {\r\n            throw new DeveloperError('Invalid arcType. Valid options are ArcType.GEODESIC and ArcType.RHUMB.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var polygonHierarchy = options.polygonHierarchy;\r\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        var stRotation = defaultValue(options.stRotation, 0.0);\r\n        var perPositionHeight = defaultValue(options.perPositionHeight, false);\r\n        var perPositionHeightExtrude = perPositionHeight && defined(options.extrudedHeight);\r\n        var height = defaultValue(options.height, 0.0);\r\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n        if (!perPositionHeightExtrude) {\r\n            var h = Math.max(height, extrudedHeight);\r\n            extrudedHeight = Math.min(height, extrudedHeight);\r\n            height = h;\r\n        }\r\n\r\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\r\n        this._granularity = granularity;\r\n        this._stRotation = stRotation;\r\n        this._height = height;\r\n        this._extrudedHeight = extrudedHeight;\r\n        this._closeTop = defaultValue(options.closeTop, true);\r\n        this._closeBottom = defaultValue(options.closeBottom, true);\r\n        this._polygonHierarchy = polygonHierarchy;\r\n        this._perPositionHeight = perPositionHeight;\r\n        this._perPositionHeightExtrude = perPositionHeightExtrude;\r\n        this._shadowVolume = defaultValue(options.shadowVolume, false);\r\n        this._workerName = 'createPolygonGeometry';\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\r\n\r\n        this._rectangle = undefined;\r\n        this._textureCoordinateRotationPoints = undefined;\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + Ellipsoid.packedLength + VertexFormat.packedLength + 12;\r\n    }\r\n\r\n    /**\r\n     * A description of a polygon from an array of positions. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\r\n     * @param {Number} [options.height=0.0] The height of the polygon.\r\n     * @param {Number} [options.extrudedHeight] The height of the polygon extrusion.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\r\n     * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\r\n     * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\r\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\r\n     * @returns {PolygonGeometry}\r\n     *\r\n     *\r\n     * @example\r\n     * // create a polygon from points\r\n     * var polygon = Cesium.PolygonGeometry.fromPositions({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n     *     -72.0, 40.0,\r\n     *     -70.0, 35.0,\r\n     *     -75.0, 30.0,\r\n     *     -70.0, 30.0,\r\n     *     -68.0, 40.0\r\n     *   ])\r\n     * });\r\n     * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\r\n     *\r\n     * @see PolygonGeometry#createGeometry\r\n     */\r\n    PolygonGeometry.fromPositions = function(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('options.positions', options.positions);\r\n        //>>includeEnd('debug');\r\n\r\n        var newOptions = {\r\n            polygonHierarchy : {\r\n                positions : options.positions\r\n            },\r\n            height : options.height,\r\n            extrudedHeight : options.extrudedHeight,\r\n            vertexFormat : options.vertexFormat,\r\n            stRotation : options.stRotation,\r\n            ellipsoid : options.ellipsoid,\r\n            granularity : options.granularity,\r\n            perPositionHeight : options.perPositionHeight,\r\n            closeTop : options.closeTop,\r\n            closeBottom : options.closeBottom,\r\n            offsetAttribute : options.offsetAttribute,\r\n            arcType : options.arcType\r\n        };\r\n        return new PolygonGeometry(newOptions);\r\n    };\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {PolygonGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    PolygonGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        array[startingIndex++] = value._height;\r\n        array[startingIndex++] = value._extrudedHeight;\r\n        array[startingIndex++] = value._granularity;\r\n        array[startingIndex++] = value._stRotation;\r\n        array[startingIndex++] = value._perPositionHeightExtrude ? 1.0 : 0.0;\r\n        array[startingIndex++] = value._perPositionHeight ? 1.0 : 0.0;\r\n        array[startingIndex++] = value._closeTop ? 1.0 : 0.0;\r\n        array[startingIndex++] = value._closeBottom ? 1.0 : 0.0;\r\n        array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\r\n        array[startingIndex++] = defaultValue(value._offsetAttribute, -1);\r\n        array[startingIndex++] = value._arcType;\r\n        array[startingIndex] = value.packedLength;\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n    var scratchVertexFormat = new VertexFormat();\r\n\r\n    //Only used to avoid inability to default construct.\r\n    var dummyOptions = {\r\n        polygonHierarchy : {}\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {PolygonGeometry} [result] The object into which to store the result.\r\n     */\r\n    PolygonGeometry.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\r\n        startingIndex = polygonHierarchy.startingIndex;\r\n        delete polygonHierarchy.startingIndex;\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        var height = array[startingIndex++];\r\n        var extrudedHeight = array[startingIndex++];\r\n        var granularity = array[startingIndex++];\r\n        var stRotation = array[startingIndex++];\r\n        var perPositionHeightExtrude = array[startingIndex++] === 1.0;\r\n        var perPositionHeight = array[startingIndex++] === 1.0;\r\n        var closeTop = array[startingIndex++] === 1.0;\r\n        var closeBottom = array[startingIndex++] === 1.0;\r\n        var shadowVolume = array[startingIndex++] === 1.0;\r\n        var offsetAttribute = array[startingIndex++];\r\n        var arcType = array[startingIndex++];\r\n        var packedLength = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            result = new PolygonGeometry(dummyOptions);\r\n        }\r\n\r\n        result._polygonHierarchy = polygonHierarchy;\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._height = height;\r\n        result._extrudedHeight = extrudedHeight;\r\n        result._granularity = granularity;\r\n        result._stRotation = stRotation;\r\n        result._perPositionHeightExtrude = perPositionHeightExtrude;\r\n        result._perPositionHeight = perPositionHeight;\r\n        result._closeTop = closeTop;\r\n        result._closeBottom = closeBottom;\r\n        result._shadowVolume = shadowVolume;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n        result._arcType = arcType;\r\n        result.packedLength = packedLength;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns the bounding rectangle given the provided options\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions sampled.\r\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n     * @param {Rectangle} [result] An object in which to store the result.\r\n     *\r\n     * @returns {Rectangle} The result rectangle\r\n     */\r\n    PolygonGeometry.computeRectangle = function(options, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('options', options);\r\n        Check.typeOf.object('options.polygonHierarchy', options.polygonHierarchy);\r\n        //>>includeEnd('debug');\r\n\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        var arcType = defaultValue(options.arcType, ArcType.GEODESIC);\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (arcType !== ArcType.GEODESIC && arcType !== ArcType.RHUMB) {\r\n            throw new DeveloperError('Invalid arcType. Valid options are ArcType.GEODESIC and ArcType.RHUMB.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var polygonHierarchy = options.polygonHierarchy;\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n\r\n        return computeRectangle(polygonHierarchy.positions, ellipsoid, arcType, granularity, result);\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a polygon, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {PolygonGeometry} polygonGeometry A description of the polygon.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    PolygonGeometry.createGeometry = function(polygonGeometry) {\r\n        var vertexFormat = polygonGeometry._vertexFormat;\r\n        var ellipsoid = polygonGeometry._ellipsoid;\r\n        var granularity = polygonGeometry._granularity;\r\n        var stRotation = polygonGeometry._stRotation;\r\n        var polygonHierarchy = polygonGeometry._polygonHierarchy;\r\n        var perPositionHeight = polygonGeometry._perPositionHeight;\r\n        var closeTop = polygonGeometry._closeTop;\r\n        var closeBottom = polygonGeometry._closeBottom;\r\n        var arcType = polygonGeometry._arcType;\r\n\r\n        var outerPositions = polygonHierarchy.positions;\r\n        if (outerPositions.length < 3) {\r\n            return;\r\n        }\r\n\r\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(outerPositions, ellipsoid);\r\n\r\n        var results = PolygonGeometryLibrary.polygonsFromHierarchy(polygonHierarchy, tangentPlane.projectPointsOntoPlane.bind(tangentPlane), !perPositionHeight, ellipsoid);\r\n\r\n        var hierarchy = results.hierarchy;\r\n        var polygons = results.polygons;\r\n\r\n        if (hierarchy.length === 0) {\r\n            return;\r\n        }\r\n\r\n        outerPositions = hierarchy[0].outerRing;\r\n        var boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(tangentPlane.plane.normal, tangentPlane.projectPointOntoPlane.bind(tangentPlane), outerPositions, stRotation, scratchBoundingRectangle);\r\n\r\n        var geometries = [];\r\n\r\n        var height = polygonGeometry._height;\r\n        var extrudedHeight = polygonGeometry._extrudedHeight;\r\n        var extrude = polygonGeometry._perPositionHeightExtrude || !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n\r\n        var options = {\r\n            perPositionHeight: perPositionHeight,\r\n            vertexFormat: vertexFormat,\r\n            geometry: undefined,\r\n            tangentPlane: tangentPlane,\r\n            boundingRectangle: boundingRectangle,\r\n            ellipsoid: ellipsoid,\r\n            stRotation: stRotation,\r\n            bottom: false,\r\n            top: true,\r\n            wall: false,\r\n            extrude: false,\r\n            arcType: arcType\r\n        };\r\n\r\n        var i;\r\n\r\n        if (extrude) {\r\n            options.extrude = true;\r\n            options.top = closeTop;\r\n            options.bottom = closeBottom;\r\n            options.shadowVolume = polygonGeometry._shadowVolume;\r\n            options.offsetAttribute = polygonGeometry._offsetAttribute;\r\n            for (i = 0; i < polygons.length; i++) {\r\n                var splitGeometry = createGeometryFromPositionsExtruded(ellipsoid, polygons[i], granularity, hierarchy[i], perPositionHeight, closeTop, closeBottom, vertexFormat, arcType);\r\n\r\n                var topAndBottom;\r\n                if (closeTop && closeBottom) {\r\n                    topAndBottom = splitGeometry.topAndBottom;\r\n                    options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(topAndBottom.geometry, height, extrudedHeight, ellipsoid, perPositionHeight);\r\n                } else if (closeTop) {\r\n                    topAndBottom = splitGeometry.topAndBottom;\r\n                    topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(topAndBottom.geometry.attributes.position.values, height, ellipsoid, !perPositionHeight);\r\n                    options.geometry = topAndBottom.geometry;\r\n                } else if (closeBottom) {\r\n                    topAndBottom = splitGeometry.topAndBottom;\r\n                    topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(topAndBottom.geometry.attributes.position.values, extrudedHeight, ellipsoid, true);\r\n                    options.geometry = topAndBottom.geometry;\r\n                }\r\n                if (closeTop || closeBottom) {\r\n                    options.wall = false;\r\n                    topAndBottom.geometry = computeAttributes(options);\r\n                    geometries.push(topAndBottom);\r\n                }\r\n\r\n                var walls = splitGeometry.walls;\r\n                options.wall = true;\r\n                for ( var k = 0; k < walls.length; k++) {\r\n                    var wall = walls[k];\r\n                    options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(wall.geometry, height, extrudedHeight, ellipsoid, perPositionHeight);\r\n                    wall.geometry = computeAttributes(options);\r\n                    geometries.push(wall);\r\n                }\r\n            }\r\n        } else {\r\n            for (i = 0; i < polygons.length; i++) {\r\n                var geometryInstance = new GeometryInstance({\r\n                    geometry : PolygonGeometryLibrary.createGeometryFromPositions(ellipsoid, polygons[i], granularity, perPositionHeight, vertexFormat, arcType)\r\n                });\r\n                geometryInstance.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(geometryInstance.geometry.attributes.position.values, height, ellipsoid, !perPositionHeight);\r\n                options.geometry = geometryInstance.geometry;\r\n                geometryInstance.geometry = computeAttributes(options);\r\n\r\n                if (defined(polygonGeometry._offsetAttribute)) {\r\n                    var length = geometryInstance.geometry.attributes.position.values.length;\r\n                    var applyOffset = new Uint8Array(length / 3);\r\n                    var offsetValue = polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                    arrayFill(applyOffset, offsetValue);\r\n                    geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute({\r\n                        componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                        componentsPerAttribute : 1,\r\n                        values: applyOffset\r\n                    });\r\n                }\r\n\r\n                geometries.push(geometryInstance);\r\n            }\r\n        }\r\n\r\n        var geometry = GeometryPipeline.combineInstances(geometries)[0];\r\n        geometry.attributes.position.values = new Float64Array(geometry.attributes.position.values);\r\n        geometry.indices = IndexDatatype.createTypedArray(geometry.attributes.position.values.length / 3, geometry.indices);\r\n\r\n        var attributes = geometry.attributes;\r\n        var boundingSphere = BoundingSphere.fromVertices(attributes.position.values);\r\n\r\n        if (!vertexFormat.position) {\r\n            delete attributes.position;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : geometry.indices,\r\n            primitiveType : geometry.primitiveType,\r\n            boundingSphere : boundingSphere,\r\n            offsetAttribute : polygonGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    PolygonGeometry.createShadowVolume = function(polygonGeometry, minHeightFunc, maxHeightFunc) {\r\n        var granularity = polygonGeometry._granularity;\r\n        var ellipsoid = polygonGeometry._ellipsoid;\r\n\r\n        var minHeight = minHeightFunc(granularity, ellipsoid);\r\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\r\n\r\n        return new PolygonGeometry({\r\n            polygonHierarchy : polygonGeometry._polygonHierarchy,\r\n            ellipsoid : ellipsoid,\r\n            stRotation : polygonGeometry._stRotation,\r\n            granularity : granularity,\r\n            perPositionHeight : false,\r\n            extrudedHeight : minHeight,\r\n            height : maxHeight,\r\n            vertexFormat : VertexFormat.POSITION_ONLY,\r\n            shadowVolume: true,\r\n            arcType : polygonGeometry._arcType\r\n        });\r\n    };\r\n\r\n    function textureCoordinateRotationPoints(polygonGeometry) {\r\n        var stRotation = -polygonGeometry._stRotation;\r\n        if (stRotation === 0.0) {\r\n            return [0, 0, 0, 1, 1, 0];\r\n        }\r\n        var ellipsoid = polygonGeometry._ellipsoid;\r\n        var positions = polygonGeometry._polygonHierarchy.positions;\r\n        var boundingRectangle = polygonGeometry.rectangle;\r\n        return Geometry._textureCoordinateRotationPoints(positions, stRotation, ellipsoid, boundingRectangle);\r\n    }\r\n\r\n    Object.defineProperties(PolygonGeometry.prototype, {\r\n        /**\r\n         * @private\r\n         */\r\n        rectangle : {\r\n            get : function() {\r\n                if (!defined(this._rectangle)) {\r\n                    var positions = this._polygonHierarchy.positions;\r\n                    this._rectangle = computeRectangle(positions, this._ellipsoid, this._arcType, this._granularity);\r\n                }\r\n\r\n                return this._rectangle;\r\n            }\r\n        },\r\n        /**\r\n         * For remapping texture coordinates when rendering PolygonGeometries as GroundPrimitives.\r\n         * @private\r\n         */\r\n        textureCoordinateRotationPoints : {\r\n            get : function() {\r\n                if (!defined(this._textureCoordinateRotationPoints)) {\r\n                    this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(this);\r\n                }\r\n                return this._textureCoordinateRotationPoints;\r\n            }\r\n        }\r\n    });\r\nexport default PolygonGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport PolygonGeometry from '../Core/PolygonGeometry.js';\r\n\r\n    function createPolygonGeometry(polygonGeometry, offset) {\r\n        if (defined(offset)) {\r\n            polygonGeometry = PolygonGeometry.unpack(polygonGeometry, offset);\r\n        }\r\n        polygonGeometry._ellipsoid = Ellipsoid.clone(polygonGeometry._ellipsoid);\r\n        return PolygonGeometry.createGeometry(polygonGeometry);\r\n    }\r\nexport default createPolygonGeometry;\r\n"],"names":["Cartographic","BoundingRectangle","Cartesian3","Cartesian2","Quaternion","Matrix3","CesiumMath","GeometryAttribute","ComponentDatatype","defined","GeometryOffsetAttribute","arrayFill","EllipsoidGeodesic","defaultValue","Rectangle","ArcType","PolygonGeometryLibrary","IndexDatatype","GeometryInstance","EllipsoidTangentPlane","PolygonPipeline","WindingOrder","Check","DeveloperError","VertexFormat","Ellipsoid","GeometryPipeline","BoundingSphere","Geometry"],"mappings":"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"}