{"version":3,"file":"GeometryOffsetAttribute-de91299d.js","sources":["../../../../Source/Core/arrayFill.js","../../../../Source/Core/GeometryOffsetAttribute.js"],"sourcesContent":["import Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\n\r\n    /**\r\n     * Fill an array or a portion of an array with a given value.\r\n     *\r\n     * @param {Array} array The array to fill.\r\n     * @param {*} value The value to fill the array with.\r\n     * @param {Number} [start=0] The index to start filling at.\r\n     * @param {Number} [end=array.length] The index to end stop at.\r\n     *\r\n     * @returns {Array} The resulting array.\r\n     * @private\r\n     */\r\n    function arrayFill(array, value, start, end) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        Check.defined('value', value);\r\n        if (defined(start)) {\r\n            Check.typeOf.number('start', start);\r\n        }\r\n        if (defined(end)) {\r\n            Check.typeOf.number('end', end);\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        if (typeof array.fill === 'function') {\r\n            return array.fill(value, start, end);\r\n        }\r\n\r\n        var length = array.length >>> 0;\r\n        var relativeStart = defaultValue(start, 0);\r\n        // If negative, find wrap around position\r\n        var k = (relativeStart < 0) ? Math.max(length + relativeStart, 0) : Math.min(relativeStart, length);\r\n        var relativeEnd = defaultValue(end, length);\r\n        // If negative, find wrap around position\r\n        var last = (relativeEnd < 0) ? Math.max(length + relativeEnd, 0) : Math.min(relativeEnd, length);\r\n\r\n        // Fill array accordingly\r\n        while (k < last) {\r\n            array[k] = value;\r\n            k++;\r\n        }\r\n        return array;\r\n    }\r\nexport default arrayFill;\r\n","\r\n    /**\r\n     * Represents which vertices should have a value of `true` for the `applyOffset` attribute\r\n     * @private\r\n     */\r\n    var GeometryOffsetAttribute = {\r\n        NONE : 0,\r\n        TOP : 1,\r\n        ALL : 2\r\n    };\r\nexport default Object.freeze(GeometryOffsetAttribute);\r\n"],"names":["Check","defined","defaultValue"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAII;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE;IACjD;IACA,QAAQA,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACtC,QAAQA,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACtC,QAAQ,IAAIC,eAAO,CAAC,KAAK,CAAC,EAAE;IAC5B,YAAYD,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAChD,SAAS;IACT,QAAQ,IAAIC,eAAO,CAAC,GAAG,CAAC,EAAE;IAC1B,YAAYD,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAC5C,SAAS;IACT;;IAEA,QAAQ,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE;IAC9C,YAAY,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IACjD,SAAS;;IAET,QAAQ,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC;IACxC,QAAQ,IAAI,aAAa,GAAGE,yBAAY,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACnD;IACA,QAAQ,IAAI,CAAC,GAAG,CAAC,aAAa,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,aAAa,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;IAC5G,QAAQ,IAAI,WAAW,GAAGA,yBAAY,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IACpD;IACA,QAAQ,IAAI,IAAI,GAAG,CAAC,WAAW,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,WAAW,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;;IAEzG;IACA,QAAQ,OAAO,CAAC,GAAG,IAAI,EAAE;IACzB,YAAY,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;IAC7B,YAAY,CAAC,EAAE,CAAC;IAChB,SAAS;IACT,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;;IC5CD;IACJ;IACA;IACA;IACA,IAAI,IAAI,uBAAuB,GAAG;IAClC,QAAQ,IAAI,GAAG,CAAC;IAChB,QAAQ,GAAG,GAAG,CAAC;IACf,QAAQ,GAAG,GAAG,CAAC;IACf,KAAK,CAAC;AACN,oCAAe,MAAM,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;;;;;;;;;"}