{"version":3,"file":"Plane-8b6ed520.js","sources":["../../../../Source/Core/Plane.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix4 from './Matrix4.js';\r\n\r\n    /**\r\n     * A plane in Hessian Normal Form defined by\r\n     * <pre>\r\n     * ax + by + cz + d = 0\r\n     * </pre>\r\n     * where (a, b, c) is the plane's <code>normal</code>, d is the signed\r\n     * <code>distance</code> to the plane, and (x, y, z) is any point on\r\n     * the plane.\r\n     *\r\n     * @alias Plane\r\n     * @constructor\r\n     *\r\n     * @param {Cartesian3} normal The plane's normal (normalized).\r\n     * @param {Number} distance The shortest distance from the origin to the plane.  The sign of\r\n     * <code>distance</code> determines which side of the plane the origin\r\n     * is on.  If <code>distance</code> is positive, the origin is in the half-space\r\n     * in the direction of the normal; if negative, the origin is in the half-space\r\n     * opposite to the normal; if zero, the plane passes through the origin.\r\n     *\r\n     * @example\r\n     * // The plane x=0\r\n     * var plane = new Cesium.Plane(Cesium.Cartesian3.UNIT_X, 0.0);\r\n     *\r\n     * @exception {DeveloperError} Normal must be normalized\r\n     */\r\n    function Plane(normal, distance) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('normal', normal);\r\n        if (!CesiumMath.equalsEpsilon(Cartesian3.magnitude(normal), 1.0, CesiumMath.EPSILON6)) {\r\n            throw new DeveloperError('normal must be normalized.');\r\n        }\r\n        Check.typeOf.number('distance', distance);\r\n        //>>includeEnd('debug');\r\n\r\n        /**\r\n         * The plane's normal.\r\n         *\r\n         * @type {Cartesian3}\r\n         */\r\n        this.normal = Cartesian3.clone(normal);\r\n\r\n        /**\r\n         * The shortest distance from the origin to the plane.  The sign of\r\n         * <code>distance</code> determines which side of the plane the origin\r\n         * is on.  If <code>distance</code> is positive, the origin is in the half-space\r\n         * in the direction of the normal; if negative, the origin is in the half-space\r\n         * opposite to the normal; if zero, the plane passes through the origin.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        this.distance = distance;\r\n    }\r\n\r\n    /**\r\n     * Creates a plane from a normal and a point on the plane.\r\n     *\r\n     * @param {Cartesian3} point The point on the plane.\r\n     * @param {Cartesian3} normal The plane's normal (normalized).\r\n     * @param {Plane} [result] The object onto which to store the result.\r\n     * @returns {Plane} A new plane instance or the modified result parameter.\r\n     *\r\n     * @example\r\n     * var point = Cesium.Cartesian3.fromDegrees(-72.0, 40.0);\r\n     * var normal = ellipsoid.geodeticSurfaceNormal(point);\r\n     * var tangentPlane = Cesium.Plane.fromPointNormal(point, normal);\r\n     *\r\n     * @exception {DeveloperError} Normal must be normalized\r\n     */\r\n    Plane.fromPointNormal = function(point, normal, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('point', point);\r\n        Check.typeOf.object('normal', normal);\r\n        if (!CesiumMath.equalsEpsilon(Cartesian3.magnitude(normal), 1.0, CesiumMath.EPSILON6)) {\r\n            throw new DeveloperError('normal must be normalized.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var distance = -Cartesian3.dot(normal, point);\r\n\r\n        if (!defined(result)) {\r\n            return new Plane(normal, distance);\r\n        }\r\n\r\n        Cartesian3.clone(normal, result.normal);\r\n        result.distance = distance;\r\n        return result;\r\n    };\r\n\r\n    var scratchNormal = new Cartesian3();\r\n    /**\r\n     * Creates a plane from the general equation\r\n     *\r\n     * @param {Cartesian4} coefficients The plane's normal (normalized).\r\n     * @param {Plane} [result] The object onto which to store the result.\r\n     * @returns {Plane} A new plane instance or the modified result parameter.\r\n     *\r\n     * @exception {DeveloperError} Normal must be normalized\r\n     */\r\n    Plane.fromCartesian4 = function(coefficients, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('coefficients', coefficients);\r\n        //>>includeEnd('debug');\r\n\r\n        var normal = Cartesian3.fromCartesian4(coefficients, scratchNormal);\r\n        var distance = coefficients.w;\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!CesiumMath.equalsEpsilon(Cartesian3.magnitude(normal), 1.0, CesiumMath.EPSILON6)) {\r\n            throw new DeveloperError('normal must be normalized.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Plane(normal, distance);\r\n        }\r\n        Cartesian3.clone(normal, result.normal);\r\n        result.distance = distance;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the signed shortest distance of a point to a plane.\r\n     * The sign of the distance determines which side of the plane the point\r\n     * is on.  If the distance is positive, the point is in the half-space\r\n     * in the direction of the normal; if negative, the point is in the half-space\r\n     * opposite to the normal; if zero, the plane passes through the point.\r\n     *\r\n     * @param {Plane} plane The plane.\r\n     * @param {Cartesian3} point The point.\r\n     * @returns {Number} The signed shortest distance of the point to the plane.\r\n     */\r\n    Plane.getPointDistance = function(plane, point) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('plane', plane);\r\n        Check.typeOf.object('point', point);\r\n        //>>includeEnd('debug');\r\n\r\n        return Cartesian3.dot(plane.normal, point) + plane.distance;\r\n    };\r\n\r\n    var scratchCartesian = new Cartesian3();\r\n    /**\r\n     * Projects a point onto the plane.\r\n     * @param {Plane} plane The plane to project the point onto\r\n     * @param {Cartesian3} point The point to project onto the plane\r\n     * @param {Cartesian3} [result] The result point.  If undefined, a new Cartesian3 will be created.\r\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n     */\r\n    Plane.projectPointOntoPlane = function(plane, point, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('plane', plane);\r\n        Check.typeOf.object('point', point);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        // projectedPoint = point - (normal.point + scale) * normal\r\n        var pointDistance = Plane.getPointDistance(plane, point);\r\n        var scaledNormal = Cartesian3.multiplyByScalar(plane.normal, pointDistance, scratchCartesian);\r\n\r\n        return Cartesian3.subtract(point, scaledNormal, result);\r\n    };\r\n\r\n    var scratchPosition = new Cartesian3();\r\n    /**\r\n     * Transforms the plane by the given transformation matrix.\r\n     *\r\n     * @param {Plane} plane The plane.\r\n     * @param {Matrix4} transform The transformation matrix.\r\n     * @param {Plane} [result] The object into which to store the result.\r\n     * @returns {Plane} The plane transformed by the given transformation matrix.\r\n     */\r\n    Plane.transform = function(plane, transform, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('plane', plane);\r\n        Check.typeOf.object('transform', transform);\r\n        //>>includeEnd('debug');\r\n\r\n        Matrix4.multiplyByPointAsVector(transform, plane.normal, scratchNormal);\r\n        Cartesian3.normalize(scratchNormal, scratchNormal);\r\n\r\n        Cartesian3.multiplyByScalar(plane.normal, -plane.distance, scratchPosition);\r\n        Matrix4.multiplyByPoint(transform, scratchPosition, scratchPosition);\r\n\r\n        return Plane.fromPointNormal(scratchPosition, scratchNormal, result);\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Plane instance.\r\n     *\r\n     * @param {Plane} plane The plane to duplicate.\r\n     * @param {Plane} [result] The object onto which to store the result.\r\n     * @returns {Plane} The modified result parameter or a new Plane instance if one was not provided.\r\n     */\r\n    Plane.clone = function(plane, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('plane', plane);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Plane(plane.normal, plane.distance);\r\n        }\r\n\r\n        Cartesian3.clone(plane.normal, result.normal);\r\n        result.distance = plane.distance;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Compares the provided Planes by normal and distance and returns\r\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n     *\r\n     * @param {Plane} left The first plane.\r\n     * @param {Plane} right The second plane.\r\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n     */\r\n    Plane.equals = function(left, right) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        //>>includeEnd('debug');\r\n\r\n        return (left.distance === right.distance) && Cartesian3.equals(left.normal, right.normal);\r\n    };\r\n\r\n    /**\r\n     * A constant initialized to the XY plane passing through the origin, with normal in positive Z.\r\n     *\r\n     * @type {Plane}\r\n     * @constant\r\n     */\r\n    Plane.ORIGIN_XY_PLANE = Object.freeze(new Plane(Cartesian3.UNIT_Z, 0.0));\r\n\r\n    /**\r\n     * A constant initialized to the YZ plane passing through the origin, with normal in positive X.\r\n     *\r\n     * @type {Plane}\r\n     * @constant\r\n     */\r\n    Plane.ORIGIN_YZ_PLANE = Object.freeze(new Plane(Cartesian3.UNIT_X, 0.0));\r\n\r\n    /**\r\n     * A constant initialized to the ZX plane passing through the origin, with normal in positive Y.\r\n     *\r\n     * @type {Plane}\r\n     * @constant\r\n     */\r\n    Plane.ORIGIN_ZX_PLANE = Object.freeze(new Plane(Cartesian3.UNIT_Y, 0.0));\r\nexport default Plane;\r\n"],"names":["Check","CesiumMath","Cartesian3","DeveloperError","defined","Matrix4"],"mappings":"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"}