{"version":3,"file":"TerrainEncoding-725e66da.js","sources":["../../../../Source/Core/EllipsoidalOccluder.js","../../../../Source/Core/TerrainQuantization.js","../../../../Source/Core/TerrainEncoding.js"],"sourcesContent":["import BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport Rectangle from './Rectangle.js';\r\n\r\n    /**\r\n     * Determine whether or not other objects are visible or hidden behind the visible horizon defined by\r\n     * an {@link Ellipsoid} and a camera position.  The ellipsoid is assumed to be located at the\r\n     * origin of the coordinate system.  This class uses the algorithm described in the\r\n     * {@link https://cesium.com/blog/2013/04/25/Horizon-culling/|Horizon Culling} blog post.\r\n     *\r\n     * @alias EllipsoidalOccluder\r\n     *\r\n     * @param {Ellipsoid} ellipsoid The ellipsoid to use as an occluder.\r\n     * @param {Cartesian3} [cameraPosition] The coordinate of the viewer/camera.  If this parameter is not\r\n     *        specified, {@link EllipsoidalOccluder#cameraPosition} must be called before\r\n     *        testing visibility.\r\n     *\r\n     * @constructor\r\n     *\r\n     * @example\r\n     * // Construct an ellipsoidal occluder with radii 1.0, 1.1, and 0.9.\r\n     * var cameraPosition = new Cesium.Cartesian3(5.0, 6.0, 7.0);\r\n     * var occluderEllipsoid = new Cesium.Ellipsoid(1.0, 1.1, 0.9);\r\n     * var occluder = new Cesium.EllipsoidalOccluder(occluderEllipsoid, cameraPosition);\r\n     *\r\n     * @private\r\n     */\r\n    function EllipsoidalOccluder(ellipsoid, cameraPosition) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('ellipsoid', ellipsoid);\r\n        //>>includeEnd('debug');\r\n\r\n        this._ellipsoid = ellipsoid;\r\n        this._cameraPosition = new Cartesian3();\r\n        this._cameraPositionInScaledSpace = new Cartesian3();\r\n        this._distanceToLimbInScaledSpaceSquared = 0.0;\r\n\r\n        // cameraPosition fills in the above values\r\n        if (defined(cameraPosition)) {\r\n            this.cameraPosition = cameraPosition;\r\n        }\r\n    }\r\n\r\n    Object.defineProperties(EllipsoidalOccluder.prototype, {\r\n        /**\r\n         * Gets the occluding ellipsoid.\r\n         * @memberof EllipsoidalOccluder.prototype\r\n         * @type {Ellipsoid}\r\n         */\r\n        ellipsoid : {\r\n            get: function() {\r\n                return this._ellipsoid;\r\n            }\r\n        },\r\n        /**\r\n         * Gets or sets the position of the camera.\r\n         * @memberof EllipsoidalOccluder.prototype\r\n         * @type {Cartesian3}\r\n         */\r\n        cameraPosition : {\r\n            get : function() {\r\n                return this._cameraPosition;\r\n            },\r\n            set : function(cameraPosition) {\r\n                // See https://cesium.com/blog/2013/04/25/Horizon-culling/\r\n                var ellipsoid = this._ellipsoid;\r\n                var cv = ellipsoid.transformPositionToScaledSpace(cameraPosition, this._cameraPositionInScaledSpace);\r\n                var vhMagnitudeSquared = Cartesian3.magnitudeSquared(cv) - 1.0;\r\n\r\n                Cartesian3.clone(cameraPosition, this._cameraPosition);\r\n                this._cameraPositionInScaledSpace = cv;\r\n                this._distanceToLimbInScaledSpaceSquared = vhMagnitudeSquared;\r\n            }\r\n        }\r\n    });\r\n\r\n    var scratchCartesian = new Cartesian3();\r\n\r\n    /**\r\n     * Determines whether or not a point, the <code>occludee</code>, is hidden from view by the occluder.\r\n     *\r\n     * @param {Cartesian3} occludee The point to test for visibility.\r\n     * @returns {Boolean} <code>true</code> if the occludee is visible; otherwise <code>false</code>.\r\n     *\r\n     * @example\r\n     * var cameraPosition = new Cesium.Cartesian3(0, 0, 2.5);\r\n     * var ellipsoid = new Cesium.Ellipsoid(1.0, 1.1, 0.9);\r\n     * var occluder = new Cesium.EllipsoidalOccluder(ellipsoid, cameraPosition);\r\n     * var point = new Cesium.Cartesian3(0, -3, -3);\r\n     * occluder.isPointVisible(point); //returns true\r\n     */\r\n    EllipsoidalOccluder.prototype.isPointVisible = function(occludee) {\r\n        var ellipsoid = this._ellipsoid;\r\n        var occludeeScaledSpacePosition = ellipsoid.transformPositionToScaledSpace(occludee, scratchCartesian);\r\n        return isScaledSpacePointVisible(occludeeScaledSpacePosition, this._cameraPositionInScaledSpace, this._distanceToLimbInScaledSpaceSquared);\r\n    };\r\n\r\n    /**\r\n     * Determines whether or not a point expressed in the ellipsoid scaled space, is hidden from view by the\r\n     * occluder.  To transform a Cartesian X, Y, Z position in the coordinate system aligned with the ellipsoid\r\n     * into the scaled space, call {@link Ellipsoid#transformPositionToScaledSpace}.\r\n     *\r\n     * @param {Cartesian3} occludeeScaledSpacePosition The point to test for visibility, represented in the scaled space.\r\n     * @returns {Boolean} <code>true</code> if the occludee is visible; otherwise <code>false</code>.\r\n     *\r\n     * @example\r\n     * var cameraPosition = new Cesium.Cartesian3(0, 0, 2.5);\r\n     * var ellipsoid = new Cesium.Ellipsoid(1.0, 1.1, 0.9);\r\n     * var occluder = new Cesium.EllipsoidalOccluder(ellipsoid, cameraPosition);\r\n     * var point = new Cesium.Cartesian3(0, -3, -3);\r\n     * var scaledSpacePoint = ellipsoid.transformPositionToScaledSpace(point);\r\n     * occluder.isScaledSpacePointVisible(scaledSpacePoint); //returns true\r\n     */\r\n    EllipsoidalOccluder.prototype.isScaledSpacePointVisible = function(occludeeScaledSpacePosition) {\r\n        return isScaledSpacePointVisible(occludeeScaledSpacePosition, this._cameraPositionInScaledSpace, this._distanceToLimbInScaledSpaceSquared);\r\n    };\r\n\r\n    var scratchCameraPositionInScaledSpaceShrunk = new Cartesian3();\r\n\r\n    /**\r\n     * Similar to {@link EllipsoidalOccluder#isScaledSpacePointVisible} except tests against an\r\n     * ellipsoid that has been shrunk by the minimum height when the minimum height is below\r\n     * the ellipsoid. This is intended to be used with points generated by\r\n     * {@link EllipsoidalOccluder#computeHorizonCullingPointPossiblyUnderEllipsoid} or\r\n     * {@link EllipsoidalOccluder#computeHorizonCullingPointFromVerticesPossiblyUnderEllipsoid}.\r\n     *\r\n     * @param {Cartesian3} occludeeScaledSpacePosition The point to test for visibility, represented in the scaled space of the possibly-shrunk ellipsoid.\r\n     * @returns {Boolean} <code>true</code> if the occludee is visible; otherwise <code>false</code>.\r\n     */\r\n    EllipsoidalOccluder.prototype.isScaledSpacePointVisiblePossiblyUnderEllipsoid = function(occludeeScaledSpacePosition, minimumHeight) {\r\n        var ellipsoid = this._ellipsoid;\r\n        var vhMagnitudeSquared;\r\n        var cv;\r\n\r\n        if (defined(minimumHeight) && minimumHeight < 0.0 && ellipsoid.minimumRadius > -minimumHeight) {\r\n            // This code is similar to the cameraPosition setter, but unrolled for performance because it will be called a lot.\r\n            cv = scratchCameraPositionInScaledSpaceShrunk;\r\n            cv.x = this._cameraPosition.x / (ellipsoid.radii.x + minimumHeight);\r\n            cv.y = this._cameraPosition.y / (ellipsoid.radii.y + minimumHeight);\r\n            cv.z = this._cameraPosition.z / (ellipsoid.radii.z + minimumHeight);\r\n            vhMagnitudeSquared = cv.x * cv.x + cv.y * cv.y + cv.z * cv.z - 1.0;\r\n        } else {\r\n            cv = this._cameraPositionInScaledSpace;\r\n            vhMagnitudeSquared = this._distanceToLimbInScaledSpaceSquared;\r\n        }\r\n\r\n        return isScaledSpacePointVisible(occludeeScaledSpacePosition, cv, vhMagnitudeSquared);\r\n    };\r\n\r\n    /**\r\n     * Computes a point that can be used for horizon culling from a list of positions.  If the point is below\r\n     * the horizon, all of the positions are guaranteed to be below the horizon as well.  The returned point\r\n     * is expressed in the ellipsoid-scaled space and is suitable for use with\r\n     * {@link EllipsoidalOccluder#isScaledSpacePointVisible}.\r\n     *\r\n     * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\r\n     *                     A reasonable direction to use is the direction from the center of the ellipsoid to\r\n     *                     the center of the bounding sphere computed from the positions.  The direction need not\r\n     *                     be normalized.\r\n     * @param {Cartesian3[]} positions The positions from which to compute the horizon culling point.  The positions\r\n     *                       must be expressed in a reference frame centered at the ellipsoid and aligned with the\r\n     *                       ellipsoid's axes.\r\n     * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\r\n     * @returns {Cartesian3} The computed horizon culling point, expressed in the ellipsoid-scaled space.\r\n     */\r\n    EllipsoidalOccluder.prototype.computeHorizonCullingPoint = function(directionToPoint, positions, result) {\r\n        return computeHorizonCullingPointFromPositions(this._ellipsoid, directionToPoint, positions, result);\r\n    };\r\n\r\n    var scratchEllipsoidShrunk = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\n\r\n    /**\r\n     * Similar to {@link EllipsoidalOccluder#computeHorizonCullingPoint} except computes the culling\r\n     * point relative to an ellipsoid that has been shrunk by the minimum height when the minimum height is below\r\n     * the ellipsoid. The returned point is expressed in the possibly-shrunk ellipsoid-scaled space and is suitable\r\n     * for use with {@link EllipsoidalOccluder#isScaledSpacePointVisiblePossiblyUnderEllipsoid}.\r\n     *\r\n     * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\r\n     *                     A reasonable direction to use is the direction from the center of the ellipsoid to\r\n     *                     the center of the bounding sphere computed from the positions.  The direction need not\r\n     *                     be normalized.\r\n     * @param {Cartesian3[]} positions The positions from which to compute the horizon culling point.  The positions\r\n     *                       must be expressed in a reference frame centered at the ellipsoid and aligned with the\r\n     *                       ellipsoid's axes.\r\n     * @param {Number} [minimumHeight] The minimum height of all positions. If this value is undefined, all positions are assumed to be above the ellipsoid.\r\n     * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\r\n     * @returns {Cartesian3} The computed horizon culling point, expressed in the possibly-shrunk ellipsoid-scaled space.\r\n     */\r\n    EllipsoidalOccluder.prototype.computeHorizonCullingPointPossiblyUnderEllipsoid = function(directionToPoint, positions, minimumHeight, result) {\r\n        var possiblyShrunkEllipsoid = getPossiblyShrunkEllipsoid(this._ellipsoid, minimumHeight, scratchEllipsoidShrunk);\r\n        return computeHorizonCullingPointFromPositions(possiblyShrunkEllipsoid, directionToPoint, positions, result);\r\n    };\r\n    /**\r\n     * Computes a point that can be used for horizon culling from a list of positions.  If the point is below\r\n     * the horizon, all of the positions are guaranteed to be below the horizon as well.  The returned point\r\n     * is expressed in the ellipsoid-scaled space and is suitable for use with\r\n     * {@link EllipsoidalOccluder#isScaledSpacePointVisible}.\r\n     *\r\n     * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\r\n     *                     A reasonable direction to use is the direction from the center of the ellipsoid to\r\n     *                     the center of the bounding sphere computed from the positions.  The direction need not\r\n     *                     be normalized.\r\n     * @param {Number[]} vertices  The vertices from which to compute the horizon culling point.  The positions\r\n     *                   must be expressed in a reference frame centered at the ellipsoid and aligned with the\r\n     *                   ellipsoid's axes.\r\n     * @param {Number} [stride=3]\r\n     * @param {Cartesian3} [center=Cartesian3.ZERO]\r\n     * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\r\n     * @returns {Cartesian3} The computed horizon culling point, expressed in the ellipsoid-scaled space.\r\n     */\r\n    EllipsoidalOccluder.prototype.computeHorizonCullingPointFromVertices = function(directionToPoint, vertices, stride, center, result) {\r\n        return computeHorizonCullingPointFromVertices(this._ellipsoid, directionToPoint, vertices, stride, center, result);\r\n    };\r\n\r\n    /**\r\n     * Similar to {@link EllipsoidalOccluder#computeHorizonCullingPointFromVertices} except computes the culling\r\n     * point relative to an ellipsoid that has been shrunk by the minimum height when the minimum height is below\r\n     * the ellipsoid. The returned point is expressed in the possibly-shrunk ellipsoid-scaled space and is suitable\r\n     * for use with {@link EllipsoidalOccluder#isScaledSpacePointVisiblePossiblyUnderEllipsoid}.\r\n     *\r\n     * @param {Cartesian3} directionToPoint The direction that the computed point will lie along.\r\n     *                     A reasonable direction to use is the direction from the center of the ellipsoid to\r\n     *                     the center of the bounding sphere computed from the positions.  The direction need not\r\n     *                     be normalized.\r\n     * @param {Number[]} vertices  The vertices from which to compute the horizon culling point.  The positions\r\n     *                   must be expressed in a reference frame centered at the ellipsoid and aligned with the\r\n     *                   ellipsoid's axes.\r\n     * @param {Number} [stride=3]\r\n     * @param {Cartesian3} [center=Cartesian3.ZERO]\r\n     * @param {Number} [minimumHeight] The minimum height of all vertices. If this value is undefined, all vertices are assumed to be above the ellipsoid.\r\n     * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\r\n     * @returns {Cartesian3} The computed horizon culling point, expressed in the possibly-shrunk ellipsoid-scaled space.\r\n     */\r\n    EllipsoidalOccluder.prototype.computeHorizonCullingPointFromVerticesPossiblyUnderEllipsoid = function(directionToPoint, vertices, stride, center, minimumHeight, result) {\r\n        var possiblyShrunkEllipsoid = getPossiblyShrunkEllipsoid(this._ellipsoid, minimumHeight, scratchEllipsoidShrunk);\r\n        return computeHorizonCullingPointFromVertices(possiblyShrunkEllipsoid, directionToPoint, vertices, stride, center, result);\r\n    };\r\n\r\n    var subsampleScratch = [];\r\n\r\n    /**\r\n     * Computes a point that can be used for horizon culling of a rectangle.  If the point is below\r\n     * the horizon, the ellipsoid-conforming rectangle is guaranteed to be below the horizon as well.\r\n     * The returned point is expressed in the ellipsoid-scaled space and is suitable for use with\r\n     * {@link EllipsoidalOccluder#isScaledSpacePointVisible}.\r\n     *\r\n     * @param {Rectangle} rectangle The rectangle for which to compute the horizon culling point.\r\n     * @param {Ellipsoid} ellipsoid The ellipsoid on which the rectangle is defined.  This may be different from\r\n     *                    the ellipsoid used by this instance for occlusion testing.\r\n     * @param {Cartesian3} [result] The instance on which to store the result instead of allocating a new instance.\r\n     * @returns {Cartesian3} The computed horizon culling point, expressed in the ellipsoid-scaled space.\r\n     */\r\n    EllipsoidalOccluder.prototype.computeHorizonCullingPointFromRectangle = function(rectangle, ellipsoid, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('rectangle', rectangle);\r\n        //>>includeEnd('debug');\r\n\r\n        var positions = Rectangle.subsample(rectangle, ellipsoid, 0.0, subsampleScratch);\r\n        var bs = BoundingSphere.fromPoints(positions);\r\n\r\n        // If the bounding sphere center is too close to the center of the occluder, it doesn't make\r\n        // sense to try to horizon cull it.\r\n        if (Cartesian3.magnitude(bs.center) < 0.1 * ellipsoid.minimumRadius) {\r\n            return undefined;\r\n        }\r\n\r\n        return this.computeHorizonCullingPoint(bs.center, positions, result);\r\n    };\r\n\r\n    var scratchEllipsoidShrunkRadii = new Cartesian3();\r\n\r\n    function getPossiblyShrunkEllipsoid(ellipsoid, minimumHeight, result) {\r\n        if (defined(minimumHeight) && minimumHeight < 0.0 && ellipsoid.minimumRadius > -minimumHeight) {\r\n            var ellipsoidShrunkRadii = Cartesian3.fromElements(\r\n                ellipsoid.radii.x + minimumHeight,\r\n                ellipsoid.radii.y + minimumHeight,\r\n                ellipsoid.radii.z + minimumHeight,\r\n                scratchEllipsoidShrunkRadii\r\n            );\r\n            ellipsoid = Ellipsoid.fromCartesian3(ellipsoidShrunkRadii, result);\r\n        }\r\n        return ellipsoid;\r\n    }\r\n\r\n    function computeHorizonCullingPointFromPositions(ellipsoid, directionToPoint, positions, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('directionToPoint', directionToPoint);\r\n        Check.defined('positions', positions);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        var scaledSpaceDirectionToPoint = computeScaledSpaceDirectionToPoint(ellipsoid, directionToPoint);\r\n        var resultMagnitude = 0.0;\r\n\r\n        for (var i = 0, len = positions.length; i < len; ++i) {\r\n            var position = positions[i];\r\n            var candidateMagnitude = computeMagnitude(ellipsoid, position, scaledSpaceDirectionToPoint);\r\n            if (candidateMagnitude < 0.0) {\r\n                // all points should face the same direction, but this one doesn't, so return undefined\r\n                return undefined;\r\n            }\r\n            resultMagnitude = Math.max(resultMagnitude, candidateMagnitude);\r\n        }\r\n\r\n        return magnitudeToPoint(scaledSpaceDirectionToPoint, resultMagnitude, result);\r\n    }\r\n\r\n    var positionScratch = new Cartesian3();\r\n\r\n    function computeHorizonCullingPointFromVertices(ellipsoid, directionToPoint, vertices, stride, center, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('directionToPoint', directionToPoint);\r\n        Check.defined('vertices', vertices);\r\n        Check.typeOf.number('stride', stride);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        stride = defaultValue(stride, 3);\r\n        center = defaultValue(center, Cartesian3.ZERO);\r\n        var scaledSpaceDirectionToPoint = computeScaledSpaceDirectionToPoint(ellipsoid, directionToPoint);\r\n        var resultMagnitude = 0.0;\r\n\r\n        for (var i = 0, len = vertices.length; i < len; i += stride) {\r\n            positionScratch.x = vertices[i] + center.x;\r\n            positionScratch.y = vertices[i + 1] + center.y;\r\n            positionScratch.z = vertices[i + 2] + center.z;\r\n\r\n            var candidateMagnitude = computeMagnitude(ellipsoid, positionScratch, scaledSpaceDirectionToPoint);\r\n            if (candidateMagnitude < 0.0) {\r\n                // all points should face the same direction, but this one doesn't, so return undefined\r\n                return undefined;\r\n            }\r\n            resultMagnitude = Math.max(resultMagnitude, candidateMagnitude);\r\n        }\r\n\r\n        return magnitudeToPoint(scaledSpaceDirectionToPoint, resultMagnitude, result);\r\n    }\r\n\r\n    function isScaledSpacePointVisible(occludeeScaledSpacePosition, cameraPositionInScaledSpace, distanceToLimbInScaledSpaceSquared) {\r\n        // See https://cesium.com/blog/2013/04/25/Horizon-culling/\r\n        var cv = cameraPositionInScaledSpace;\r\n        var vhMagnitudeSquared = distanceToLimbInScaledSpaceSquared;\r\n        var vt = Cartesian3.subtract(occludeeScaledSpacePosition, cv, scratchCartesian);\r\n        var vtDotVc = -Cartesian3.dot(vt, cv);\r\n        // If vhMagnitudeSquared < 0 then we are below the surface of the ellipsoid and\r\n        // in this case, set the culling plane to be on V.\r\n        var isOccluded = vhMagnitudeSquared < 0 ? vtDotVc > 0 : (vtDotVc > vhMagnitudeSquared &&\r\n                         vtDotVc * vtDotVc / Cartesian3.magnitudeSquared(vt) > vhMagnitudeSquared);\r\n        return !isOccluded;\r\n    }\r\n\r\n    var scaledSpaceScratch = new Cartesian3();\r\n    var directionScratch = new Cartesian3();\r\n\r\n    function computeMagnitude(ellipsoid, position, scaledSpaceDirectionToPoint) {\r\n        var scaledSpacePosition = ellipsoid.transformPositionToScaledSpace(position, scaledSpaceScratch);\r\n        var magnitudeSquared = Cartesian3.magnitudeSquared(scaledSpacePosition);\r\n        var magnitude = Math.sqrt(magnitudeSquared);\r\n        var direction = Cartesian3.divideByScalar(scaledSpacePosition, magnitude, directionScratch);\r\n\r\n        // For the purpose of this computation, points below the ellipsoid are consider to be on it instead.\r\n        magnitudeSquared = Math.max(1.0, magnitudeSquared);\r\n        magnitude = Math.max(1.0, magnitude);\r\n\r\n        var cosAlpha = Cartesian3.dot(direction, scaledSpaceDirectionToPoint);\r\n        var sinAlpha = Cartesian3.magnitude(Cartesian3.cross(direction, scaledSpaceDirectionToPoint, direction));\r\n        var cosBeta = 1.0 / magnitude;\r\n        var sinBeta = Math.sqrt(magnitudeSquared - 1.0) * cosBeta;\r\n\r\n        return 1.0 / (cosAlpha * cosBeta - sinAlpha * sinBeta);\r\n    }\r\n\r\n    function magnitudeToPoint(scaledSpaceDirectionToPoint, resultMagnitude, result) {\r\n        // The horizon culling point is undefined if there were no positions from which to compute it,\r\n        // the directionToPoint is pointing opposite all of the positions,  or if we computed NaN or infinity.\r\n        if (resultMagnitude <= 0.0 || resultMagnitude === 1.0 / 0.0 || resultMagnitude !== resultMagnitude) {\r\n            return undefined;\r\n        }\r\n\r\n        return Cartesian3.multiplyByScalar(scaledSpaceDirectionToPoint, resultMagnitude, result);\r\n    }\r\n\r\n    var directionToPointScratch = new Cartesian3();\r\n\r\n    function computeScaledSpaceDirectionToPoint(ellipsoid, directionToPoint) {\r\n        if (Cartesian3.equals(directionToPoint, Cartesian3.ZERO)) {\r\n            return directionToPoint;\r\n        }\r\n\r\n        ellipsoid.transformPositionToScaledSpace(directionToPoint, directionToPointScratch);\r\n        return Cartesian3.normalize(directionToPointScratch, directionToPointScratch);\r\n    }\r\nexport default EllipsoidalOccluder;\r\n","\r\n    /**\r\n     * This enumerated type is used to determine how the vertices of the terrain mesh are compressed.\r\n     *\r\n     * @exports TerrainQuantization\r\n     *\r\n     * @private\r\n     */\r\n    var TerrainQuantization = {\r\n        /**\r\n         * The vertices are not compressed.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        NONE : 0,\r\n\r\n        /**\r\n         * The vertices are compressed to 12 bits.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        BITS12 : 1\r\n    };\r\nexport default Object.freeze(TerrainQuantization);\r\n","import AttributeCompression from './AttributeCompression.js';\r\nimport Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix4 from './Matrix4.js';\r\nimport TerrainQuantization from './TerrainQuantization.js';\r\n\r\n    var cartesian3Scratch = new Cartesian3();\r\n    var cartesian3DimScratch = new Cartesian3();\r\n    var cartesian2Scratch = new Cartesian2();\r\n    var matrix4Scratch = new Matrix4();\r\n    var matrix4Scratch2 = new Matrix4();\r\n\r\n    var SHIFT_LEFT_12 = Math.pow(2.0, 12.0);\r\n\r\n    /**\r\n     * Data used to quantize and pack the terrain mesh. The position can be unpacked for picking and all attributes\r\n     * are unpacked in the vertex shader.\r\n     *\r\n     * @alias TerrainEncoding\r\n     * @constructor\r\n     *\r\n     * @param {AxisAlignedBoundingBox} axisAlignedBoundingBox The bounds of the tile in the east-north-up coordinates at the tiles center.\r\n     * @param {Number} minimumHeight The minimum height.\r\n     * @param {Number} maximumHeight The maximum height.\r\n     * @param {Matrix4} fromENU The east-north-up to fixed frame matrix at the center of the terrain mesh.\r\n     * @param {Boolean} hasVertexNormals If the mesh has vertex normals.\r\n     * @param {Boolean} [hasWebMercatorT=false] true if the terrain data includes a Web Mercator texture coordinate; otherwise, false.\r\n     *\r\n     * @private\r\n     */\r\n    function TerrainEncoding(axisAlignedBoundingBox, minimumHeight, maximumHeight, fromENU, hasVertexNormals, hasWebMercatorT) {\r\n        var quantization = TerrainQuantization.NONE;\r\n        var center;\r\n        var toENU;\r\n        var matrix;\r\n\r\n        if (defined(axisAlignedBoundingBox) && defined(minimumHeight) && defined(maximumHeight) && defined(fromENU)) {\r\n            var minimum = axisAlignedBoundingBox.minimum;\r\n            var maximum = axisAlignedBoundingBox.maximum;\r\n\r\n            var dimensions = Cartesian3.subtract(maximum, minimum, cartesian3DimScratch);\r\n            var hDim = maximumHeight - minimumHeight;\r\n            var maxDim = Math.max(Cartesian3.maximumComponent(dimensions), hDim);\r\n\r\n            if (maxDim < SHIFT_LEFT_12 - 1.0) {\r\n                quantization = TerrainQuantization.BITS12;\r\n            } else {\r\n                quantization = TerrainQuantization.NONE;\r\n            }\r\n\r\n            center = axisAlignedBoundingBox.center;\r\n            toENU = Matrix4.inverseTransformation(fromENU, new Matrix4());\r\n\r\n            var translation = Cartesian3.negate(minimum, cartesian3Scratch);\r\n            Matrix4.multiply(Matrix4.fromTranslation(translation, matrix4Scratch), toENU, toENU);\r\n\r\n            var scale = cartesian3Scratch;\r\n            scale.x = 1.0 / dimensions.x;\r\n            scale.y = 1.0 / dimensions.y;\r\n            scale.z = 1.0 / dimensions.z;\r\n            Matrix4.multiply(Matrix4.fromScale(scale, matrix4Scratch), toENU, toENU);\r\n\r\n            matrix = Matrix4.clone(fromENU);\r\n            Matrix4.setTranslation(matrix, Cartesian3.ZERO, matrix);\r\n\r\n            fromENU = Matrix4.clone(fromENU, new Matrix4());\r\n\r\n            var translationMatrix = Matrix4.fromTranslation(minimum, matrix4Scratch);\r\n            var scaleMatrix =  Matrix4.fromScale(dimensions, matrix4Scratch2);\r\n            var st = Matrix4.multiply(translationMatrix, scaleMatrix,matrix4Scratch);\r\n\r\n            Matrix4.multiply(fromENU, st, fromENU);\r\n            Matrix4.multiply(matrix, st, matrix);\r\n        }\r\n\r\n        /**\r\n         * How the vertices of the mesh were compressed.\r\n         * @type {TerrainQuantization}\r\n         */\r\n        this.quantization = quantization;\r\n\r\n        /**\r\n         * The minimum height of the tile including the skirts.\r\n         * @type {Number}\r\n         */\r\n        this.minimumHeight = minimumHeight;\r\n\r\n        /**\r\n         * The maximum height of the tile.\r\n         * @type {Number}\r\n         */\r\n        this.maximumHeight = maximumHeight;\r\n\r\n        /**\r\n         * The center of the tile.\r\n         * @type {Cartesian3}\r\n         */\r\n        this.center = center;\r\n\r\n        /**\r\n         * A matrix that takes a vertex from the tile, transforms it to east-north-up at the center and scales\r\n         * it so each component is in the [0, 1] range.\r\n         * @type {Matrix4}\r\n         */\r\n        this.toScaledENU = toENU;\r\n\r\n        /**\r\n         * A matrix that restores a vertex transformed with toScaledENU back to the earth fixed reference frame\r\n         * @type {Matrix4}\r\n         */\r\n        this.fromScaledENU = fromENU;\r\n\r\n        /**\r\n         * The matrix used to decompress the terrain vertices in the shader for RTE rendering.\r\n         * @type {Matrix4}\r\n         */\r\n        this.matrix = matrix;\r\n\r\n        /**\r\n         * The terrain mesh contains normals.\r\n         * @type {Boolean}\r\n         */\r\n        this.hasVertexNormals = hasVertexNormals;\r\n\r\n        /**\r\n         * The terrain mesh contains a vertical texture coordinate following the Web Mercator projection.\r\n         * @type {Boolean}\r\n         */\r\n        this.hasWebMercatorT = defaultValue(hasWebMercatorT, false);\r\n    }\r\n\r\n    TerrainEncoding.prototype.encode = function(vertexBuffer, bufferIndex, position, uv, height, normalToPack, webMercatorT) {\r\n        var u = uv.x;\r\n        var v = uv.y;\r\n\r\n        if (this.quantization === TerrainQuantization.BITS12) {\r\n            position = Matrix4.multiplyByPoint(this.toScaledENU, position, cartesian3Scratch);\r\n\r\n            position.x = CesiumMath.clamp(position.x, 0.0, 1.0);\r\n            position.y = CesiumMath.clamp(position.y, 0.0, 1.0);\r\n            position.z = CesiumMath.clamp(position.z, 0.0, 1.0);\r\n\r\n            var hDim = this.maximumHeight - this.minimumHeight;\r\n            var h = CesiumMath.clamp((height - this.minimumHeight) / hDim, 0.0, 1.0);\r\n\r\n            Cartesian2.fromElements(position.x, position.y, cartesian2Scratch);\r\n            var compressed0 = AttributeCompression.compressTextureCoordinates(cartesian2Scratch);\r\n\r\n            Cartesian2.fromElements(position.z, h, cartesian2Scratch);\r\n            var compressed1 = AttributeCompression.compressTextureCoordinates(cartesian2Scratch);\r\n\r\n            Cartesian2.fromElements(u, v, cartesian2Scratch);\r\n            var compressed2 = AttributeCompression.compressTextureCoordinates(cartesian2Scratch);\r\n\r\n            vertexBuffer[bufferIndex++] = compressed0;\r\n            vertexBuffer[bufferIndex++] = compressed1;\r\n            vertexBuffer[bufferIndex++] = compressed2;\r\n\r\n            if (this.hasWebMercatorT) {\r\n                Cartesian2.fromElements(webMercatorT, 0.0, cartesian2Scratch);\r\n                var compressed3 = AttributeCompression.compressTextureCoordinates(cartesian2Scratch);\r\n                vertexBuffer[bufferIndex++] = compressed3;\r\n            }\r\n        } else {\r\n            Cartesian3.subtract(position, this.center, cartesian3Scratch);\r\n\r\n            vertexBuffer[bufferIndex++] = cartesian3Scratch.x;\r\n            vertexBuffer[bufferIndex++] = cartesian3Scratch.y;\r\n            vertexBuffer[bufferIndex++] = cartesian3Scratch.z;\r\n            vertexBuffer[bufferIndex++] = height;\r\n            vertexBuffer[bufferIndex++] = u;\r\n            vertexBuffer[bufferIndex++] = v;\r\n\r\n            if (this.hasWebMercatorT) {\r\n                vertexBuffer[bufferIndex++] = webMercatorT;\r\n            }\r\n        }\r\n\r\n        if (this.hasVertexNormals) {\r\n            vertexBuffer[bufferIndex++] = AttributeCompression.octPackFloat(normalToPack);\r\n        }\r\n\r\n        return bufferIndex;\r\n    };\r\n\r\n    TerrainEncoding.prototype.decodePosition = function(buffer, index, result) {\r\n        if (!defined(result)) {\r\n            result = new Cartesian3();\r\n        }\r\n\r\n        index *= this.getStride();\r\n\r\n        if (this.quantization === TerrainQuantization.BITS12) {\r\n            var xy = AttributeCompression.decompressTextureCoordinates(buffer[index], cartesian2Scratch);\r\n            result.x = xy.x;\r\n            result.y = xy.y;\r\n\r\n            var zh = AttributeCompression.decompressTextureCoordinates(buffer[index + 1], cartesian2Scratch);\r\n            result.z = zh.x;\r\n\r\n            return Matrix4.multiplyByPoint(this.fromScaledENU, result, result);\r\n        }\r\n\r\n        result.x = buffer[index];\r\n        result.y = buffer[index + 1];\r\n        result.z = buffer[index + 2];\r\n        return Cartesian3.add(result, this.center, result);\r\n    };\r\n\r\n    TerrainEncoding.prototype.decodeTextureCoordinates = function(buffer, index, result) {\r\n        if (!defined(result)) {\r\n            result = new Cartesian2();\r\n        }\r\n\r\n        index *= this.getStride();\r\n\r\n        if (this.quantization === TerrainQuantization.BITS12) {\r\n            return AttributeCompression.decompressTextureCoordinates(buffer[index + 2], result);\r\n        }\r\n\r\n        return Cartesian2.fromElements(buffer[index + 4], buffer[index + 5], result);\r\n    };\r\n\r\n    TerrainEncoding.prototype.decodeHeight = function(buffer, index) {\r\n        index *= this.getStride();\r\n\r\n        if (this.quantization === TerrainQuantization.BITS12) {\r\n            var zh = AttributeCompression.decompressTextureCoordinates(buffer[index + 1], cartesian2Scratch);\r\n            return zh.y * (this.maximumHeight - this.minimumHeight) + this.minimumHeight;\r\n        }\r\n\r\n        return buffer[index + 3];\r\n    };\r\n\r\n    TerrainEncoding.prototype.decodeWebMercatorT = function(buffer, index) {\r\n        index *= this.getStride();\r\n\r\n        if (this.quantization === TerrainQuantization.BITS12) {\r\n            return AttributeCompression.decompressTextureCoordinates(buffer[index + 3], cartesian2Scratch).x;\r\n        }\r\n\r\n        return buffer[index + 6];\r\n    };\r\n\r\n    TerrainEncoding.prototype.getOctEncodedNormal = function(buffer, index, result) {\r\n        var stride = this.getStride();\r\n        index = (index + 1) * stride - 1;\r\n\r\n        var temp = buffer[index] / 256.0;\r\n        var x = Math.floor(temp);\r\n        var y = (temp - x) * 256.0;\r\n\r\n        return Cartesian2.fromElements(x, y, result);\r\n    };\r\n\r\n    TerrainEncoding.prototype.getStride = function() {\r\n        var vertexStride;\r\n\r\n        switch (this.quantization) {\r\n            case TerrainQuantization.BITS12:\r\n                vertexStride = 3;\r\n                break;\r\n            default:\r\n                vertexStride = 6;\r\n        }\r\n\r\n        if (this.hasWebMercatorT) {\r\n            ++vertexStride;\r\n        }\r\n\r\n        if (this.hasVertexNormals) {\r\n            ++vertexStride;\r\n        }\r\n\r\n        return vertexStride;\r\n    };\r\n\r\n    var attributesNone = {\r\n        position3DAndHeight : 0,\r\n        textureCoordAndEncodedNormals : 1\r\n    };\r\n    var attributes = {\r\n        compressed0 : 0,\r\n        compressed1 : 1\r\n    };\r\n\r\n    TerrainEncoding.prototype.getAttributes = function(buffer) {\r\n        var datatype = ComponentDatatype.FLOAT;\r\n        var sizeInBytes = ComponentDatatype.getSizeInBytes(datatype);\r\n        var stride;\r\n\r\n        if (this.quantization === TerrainQuantization.NONE) {\r\n            var position3DAndHeightLength = 4;\r\n            var numTexCoordComponents = 2;\r\n\r\n            if (this.hasWebMercatorT) {\r\n                ++numTexCoordComponents;\r\n            }\r\n\r\n            if (this.hasVertexNormals) {\r\n                ++numTexCoordComponents;\r\n            }\r\n\r\n            stride = (position3DAndHeightLength + numTexCoordComponents) * sizeInBytes;\r\n\r\n            return [{\r\n                index : attributesNone.position3DAndHeight,\r\n                vertexBuffer : buffer,\r\n                componentDatatype : datatype,\r\n                componentsPerAttribute : position3DAndHeightLength,\r\n                offsetInBytes : 0,\r\n                strideInBytes : stride\r\n            }, {\r\n                index : attributesNone.textureCoordAndEncodedNormals,\r\n                vertexBuffer : buffer,\r\n                componentDatatype : datatype,\r\n                componentsPerAttribute : numTexCoordComponents,\r\n                offsetInBytes : position3DAndHeightLength * sizeInBytes,\r\n                strideInBytes : stride\r\n            }];\r\n        }\r\n\r\n        var numCompressed0 = 3;\r\n        var numCompressed1 = 0;\r\n\r\n        if (this.hasWebMercatorT || this.hasVertexNormals) {\r\n            ++numCompressed0;\r\n        }\r\n\r\n        if (this.hasWebMercatorT && this.hasVertexNormals) {\r\n            ++numCompressed1;\r\n\r\n            stride = (numCompressed0 + numCompressed1) * sizeInBytes;\r\n\r\n            return [{\r\n                index : attributes.compressed0,\r\n                vertexBuffer : buffer,\r\n                componentDatatype : datatype,\r\n                componentsPerAttribute : numCompressed0,\r\n                offsetInBytes : 0,\r\n                strideInBytes : stride\r\n            }, {\r\n                index : attributes.compressed1,\r\n                vertexBuffer : buffer,\r\n                componentDatatype : datatype,\r\n                componentsPerAttribute : numCompressed1,\r\n                offsetInBytes : numCompressed0 * sizeInBytes,\r\n                strideInBytes : stride\r\n            }];\r\n        }\r\n        return [{\r\n            index : attributes.compressed0,\r\n            vertexBuffer : buffer,\r\n            componentDatatype : datatype,\r\n            componentsPerAttribute : numCompressed0\r\n        }];\r\n    };\r\n\r\n    TerrainEncoding.prototype.getAttributeLocations = function() {\r\n        if (this.quantization === TerrainQuantization.NONE) {\r\n            return attributesNone;\r\n        }\r\n        return attributes;\r\n    };\r\n\r\n    TerrainEncoding.clone = function(encoding, result) {\r\n        if (!defined(result)) {\r\n            result = new TerrainEncoding();\r\n        }\r\n\r\n        result.quantization = encoding.quantization;\r\n        result.minimumHeight = encoding.minimumHeight;\r\n        result.maximumHeight = encoding.maximumHeight;\r\n        result.center = Cartesian3.clone(encoding.center);\r\n        result.toScaledENU = Matrix4.clone(encoding.toScaledENU);\r\n        result.fromScaledENU = Matrix4.clone(encoding.fromScaledENU);\r\n        result.matrix = Matrix4.clone(encoding.matrix);\r\n        result.hasVertexNormals = encoding.hasVertexNormals;\r\n        result.hasWebMercatorT = encoding.hasWebMercatorT;\r\n        return result;\r\n    };\r\nexport default TerrainEncoding;\r\n"],"names":["Check","Cartesian3","defined","Ellipsoid","Rectangle","BoundingSphere","defaultValue","Cartesian2","Matrix4","TerrainQuantization","CesiumMath","AttributeCompression","ComponentDatatype"],"mappings":"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"}